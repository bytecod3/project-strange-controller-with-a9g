
uart-ring-buffer-blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac18  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800adb8  0800adb8  0001adb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b278  0800b278  00020260  2**0
                  CONTENTS
  4 .ARM          00000008  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b280  0800b280  00020260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b280  0800b280  0001b280  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b284  0800b284  0001b284  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000260  20000000  0800b288  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009bc  20000260  0800b4e8  00020260  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c1c  0800b4e8  00020c1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011823  00000000  00000000  000202d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002777  00000000  00000000  00031af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b0  00000000  00000000  00034270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d33  00000000  00000000  00035320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017f04  00000000  00000000  00036053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014299  00000000  00000000  0004df57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000928df  00000000  00000000  000621f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c60  00000000  00000000  000f4ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000fa730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000260 	.word	0x20000260
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ada0 	.word	0x0800ada0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000264 	.word	0x20000264
 80001dc:	0800ada0 	.word	0x0800ada0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	0000      	movs	r0, r0
	...

08000f58 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000f58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f5c:	b08c      	sub	sp, #48	; 0x30
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000f64:	4b5b      	ldr	r3, [pc, #364]	; (80010d4 <decodeGGA+0x17c>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000f6e:	e004      	b.n	8000f7a <decodeGGA+0x22>
 8000f70:	4b58      	ldr	r3, [pc, #352]	; (80010d4 <decodeGGA+0x17c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	3301      	adds	r3, #1
 8000f76:	4a57      	ldr	r2, [pc, #348]	; (80010d4 <decodeGGA+0x17c>)
 8000f78:	6013      	str	r3, [r2, #0]
 8000f7a:	4b56      	ldr	r3, [pc, #344]	; (80010d4 <decodeGGA+0x17c>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	461a      	mov	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	2b2c      	cmp	r3, #44	; 0x2c
 8000f88:	d1f2      	bne.n	8000f70 <decodeGGA+0x18>
	inx++;
 8000f8a:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <decodeGGA+0x17c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a50      	ldr	r2, [pc, #320]	; (80010d4 <decodeGGA+0x17c>)
 8000f92:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000f94:	e004      	b.n	8000fa0 <decodeGGA+0x48>
 8000f96:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <decodeGGA+0x17c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	4a4d      	ldr	r2, [pc, #308]	; (80010d4 <decodeGGA+0x17c>)
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b4c      	ldr	r3, [pc, #304]	; (80010d4 <decodeGGA+0x17c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b2c      	cmp	r3, #44	; 0x2c
 8000fae:	d1f2      	bne.n	8000f96 <decodeGGA+0x3e>
	inx++;
 8000fb0:	4b48      	ldr	r3, [pc, #288]	; (80010d4 <decodeGGA+0x17c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a47      	ldr	r2, [pc, #284]	; (80010d4 <decodeGGA+0x17c>)
 8000fb8:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000fba:	e004      	b.n	8000fc6 <decodeGGA+0x6e>
 8000fbc:	4b45      	ldr	r3, [pc, #276]	; (80010d4 <decodeGGA+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <decodeGGA+0x17c>)
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <decodeGGA+0x17c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4413      	add	r3, r2
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b2c      	cmp	r3, #44	; 0x2c
 8000fd4:	d1f2      	bne.n	8000fbc <decodeGGA+0x64>
	inx++;
 8000fd6:	4b3f      	ldr	r3, [pc, #252]	; (80010d4 <decodeGGA+0x17c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	4a3d      	ldr	r2, [pc, #244]	; (80010d4 <decodeGGA+0x17c>)
 8000fde:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000fe0:	e004      	b.n	8000fec <decodeGGA+0x94>
 8000fe2:	4b3c      	ldr	r3, [pc, #240]	; (80010d4 <decodeGGA+0x17c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	4a3a      	ldr	r2, [pc, #232]	; (80010d4 <decodeGGA+0x17c>)
 8000fea:	6013      	str	r3, [r2, #0]
 8000fec:	4b39      	ldr	r3, [pc, #228]	; (80010d4 <decodeGGA+0x17c>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b2c      	cmp	r3, #44	; 0x2c
 8000ffa:	d1f2      	bne.n	8000fe2 <decodeGGA+0x8a>
	inx++;
 8000ffc:	4b35      	ldr	r3, [pc, #212]	; (80010d4 <decodeGGA+0x17c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a34      	ldr	r2, [pc, #208]	; (80010d4 <decodeGGA+0x17c>)
 8001004:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8001006:	e004      	b.n	8001012 <decodeGGA+0xba>
 8001008:	4b32      	ldr	r3, [pc, #200]	; (80010d4 <decodeGGA+0x17c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	3301      	adds	r3, #1
 800100e:	4a31      	ldr	r2, [pc, #196]	; (80010d4 <decodeGGA+0x17c>)
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <decodeGGA+0x17c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b2c      	cmp	r3, #44	; 0x2c
 8001020:	d1f2      	bne.n	8001008 <decodeGGA+0xb0>
	inx++;
 8001022:	4b2c      	ldr	r3, [pc, #176]	; (80010d4 <decodeGGA+0x17c>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	3301      	adds	r3, #1
 8001028:	4a2a      	ldr	r2, [pc, #168]	; (80010d4 <decodeGGA+0x17c>)
 800102a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 800102c:	e004      	b.n	8001038 <decodeGGA+0xe0>
 800102e:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <decodeGGA+0x17c>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	3301      	adds	r3, #1
 8001034:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <decodeGGA+0x17c>)
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <decodeGGA+0x17c>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b2c      	cmp	r3, #44	; 0x2c
 8001046:	d1f2      	bne.n	800102e <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8001048:	4b22      	ldr	r3, [pc, #136]	; (80010d4 <decodeGGA+0x17c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	3301      	adds	r3, #1
 800104e:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <decodeGGA+0x17c>)
 8001050:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8001052:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <decodeGGA+0x17c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b31      	cmp	r3, #49	; 0x31
 8001060:	d00f      	beq.n	8001082 <decodeGGA+0x12a>
 8001062:	4b1c      	ldr	r3, [pc, #112]	; (80010d4 <decodeGGA+0x17c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b32      	cmp	r3, #50	; 0x32
 8001070:	d007      	beq.n	8001082 <decodeGGA+0x12a>
 8001072:	4b18      	ldr	r3, [pc, #96]	; (80010d4 <decodeGGA+0x17c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	461a      	mov	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b36      	cmp	r3, #54	; 0x36
 8001080:	d106      	bne.n	8001090 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <decodeGGA+0x17c>)
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800108e:	e009      	b.n	80010a4 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8001096:	2301      	movs	r3, #1
 8001098:	e2fd      	b.n	8001696 <decodeGGA+0x73e>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 800109a:	4b0e      	ldr	r3, [pc, #56]	; (80010d4 <decodeGGA+0x17c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <decodeGGA+0x17c>)
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <decodeGGA+0x17c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b2c      	cmp	r3, #44	; 0x2c
 80010b2:	d1f2      	bne.n	800109a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 80010b4:	4b07      	ldr	r3, [pc, #28]	; (80010d4 <decodeGGA+0x17c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	3301      	adds	r3, #1
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <decodeGGA+0x17c>)
 80010bc:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	220c      	movs	r2, #12
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f006 fe3a 	bl	8007d40 <memset>
	i=0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 80010d0:	e016      	b.n	8001100 <decodeGGA+0x1a8>
 80010d2:	bf00      	nop
 80010d4:	2000027c 	.word	0x2000027c
	{
		buffer[i] = GGAbuffer[inx];
 80010d8:	4bab      	ldr	r3, [pc, #684]	; (8001388 <decodeGGA+0x430>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4413      	add	r3, r2
 80010e2:	7819      	ldrb	r1, [r3, #0]
 80010e4:	f107 020c 	add.w	r2, r7, #12
 80010e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ea:	4413      	add	r3, r2
 80010ec:	460a      	mov	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
		i++;
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	3301      	adds	r3, #1
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80010f6:	4ba4      	ldr	r3, [pc, #656]	; (8001388 <decodeGGA+0x430>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3301      	adds	r3, #1
 80010fc:	4aa2      	ldr	r2, [pc, #648]	; (8001388 <decodeGGA+0x430>)
 80010fe:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8001100:	4ba1      	ldr	r3, [pc, #644]	; (8001388 <decodeGGA+0x430>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b2c      	cmp	r3, #44	; 0x2c
 800110e:	d1e3      	bne.n	80010d8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	4618      	mov	r0, r3
 8001116:	f005 ffbf 	bl	8007098 <atoi>
 800111a:	4603      	mov	r3, r0
 800111c:	4a9b      	ldr	r2, [pc, #620]	; (800138c <decodeGGA+0x434>)
 800111e:	fb82 1203 	smull	r1, r2, r2, r3
 8001122:	1312      	asrs	r2, r2, #12
 8001124:	17db      	asrs	r3, r3, #31
 8001126:	1ad2      	subs	r2, r2, r3
 8001128:	4b99      	ldr	r3, [pc, #612]	; (8001390 <decodeGGA+0x438>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4999      	ldr	r1, [pc, #612]	; (8001394 <decodeGGA+0x43c>)
 800112e:	fb81 0103 	smull	r0, r1, r1, r3
 8001132:	1149      	asrs	r1, r1, #5
 8001134:	17db      	asrs	r3, r3, #31
 8001136:	1acb      	subs	r3, r1, r3
 8001138:	4413      	add	r3, r2
 800113a:	4a97      	ldr	r2, [pc, #604]	; (8001398 <decodeGGA+0x440>)
 800113c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 800113e:	f107 030c 	add.w	r3, r7, #12
 8001142:	4618      	mov	r0, r3
 8001144:	f005 ffa8 	bl	8007098 <atoi>
 8001148:	4603      	mov	r3, r0
 800114a:	4a92      	ldr	r2, [pc, #584]	; (8001394 <decodeGGA+0x43c>)
 800114c:	fb82 1203 	smull	r1, r2, r2, r3
 8001150:	1152      	asrs	r2, r2, #5
 8001152:	17db      	asrs	r3, r3, #31
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	4a8f      	ldr	r2, [pc, #572]	; (8001394 <decodeGGA+0x43c>)
 8001158:	fb82 1203 	smull	r1, r2, r2, r3
 800115c:	1151      	asrs	r1, r2, #5
 800115e:	17da      	asrs	r2, r3, #31
 8001160:	1a8a      	subs	r2, r1, r2
 8001162:	2164      	movs	r1, #100	; 0x64
 8001164:	fb01 f202 	mul.w	r2, r1, r2
 8001168:	1a9a      	subs	r2, r3, r2
 800116a:	4b89      	ldr	r3, [pc, #548]	; (8001390 <decodeGGA+0x438>)
 800116c:	6819      	ldr	r1, [r3, #0]
 800116e:	4b89      	ldr	r3, [pc, #548]	; (8001394 <decodeGGA+0x43c>)
 8001170:	fb83 0301 	smull	r0, r3, r3, r1
 8001174:	1158      	asrs	r0, r3, #5
 8001176:	17cb      	asrs	r3, r1, #31
 8001178:	1ac3      	subs	r3, r0, r3
 800117a:	2064      	movs	r0, #100	; 0x64
 800117c:	fb00 f303 	mul.w	r3, r0, r3
 8001180:	1acb      	subs	r3, r1, r3
 8001182:	4413      	add	r3, r2
 8001184:	4a85      	ldr	r2, [pc, #532]	; (800139c <decodeGGA+0x444>)
 8001186:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59)
 8001188:	4b84      	ldr	r3, [pc, #528]	; (800139c <decodeGGA+0x444>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b3b      	cmp	r3, #59	; 0x3b
 800118e:	dd09      	ble.n	80011a4 <decodeGGA+0x24c>
	{
		min = min-60;
 8001190:	4b82      	ldr	r3, [pc, #520]	; (800139c <decodeGGA+0x444>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	3b3c      	subs	r3, #60	; 0x3c
 8001196:	4a81      	ldr	r2, [pc, #516]	; (800139c <decodeGGA+0x444>)
 8001198:	6013      	str	r3, [r2, #0]
		hr++;
 800119a:	4b7f      	ldr	r3, [pc, #508]	; (8001398 <decodeGGA+0x440>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	4a7d      	ldr	r2, [pc, #500]	; (8001398 <decodeGGA+0x440>)
 80011a2:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 80011a4:	4b7c      	ldr	r3, [pc, #496]	; (8001398 <decodeGGA+0x440>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	da09      	bge.n	80011c0 <decodeGGA+0x268>
	{
		hr=24+hr;
 80011ac:	4b7a      	ldr	r3, [pc, #488]	; (8001398 <decodeGGA+0x440>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3318      	adds	r3, #24
 80011b2:	4a79      	ldr	r2, [pc, #484]	; (8001398 <decodeGGA+0x440>)
 80011b4:	6013      	str	r3, [r2, #0]
		daychange--;
 80011b6:	4b7a      	ldr	r3, [pc, #488]	; (80013a0 <decodeGGA+0x448>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	4a78      	ldr	r2, [pc, #480]	; (80013a0 <decodeGGA+0x448>)
 80011be:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 80011c0:	4b75      	ldr	r3, [pc, #468]	; (8001398 <decodeGGA+0x440>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b17      	cmp	r3, #23
 80011c6:	dd09      	ble.n	80011dc <decodeGGA+0x284>
	{
		hr=hr-24;
 80011c8:	4b73      	ldr	r3, [pc, #460]	; (8001398 <decodeGGA+0x440>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	3b18      	subs	r3, #24
 80011ce:	4a72      	ldr	r2, [pc, #456]	; (8001398 <decodeGGA+0x440>)
 80011d0:	6013      	str	r3, [r2, #0]
		daychange++;
 80011d2:	4b73      	ldr	r3, [pc, #460]	; (80013a0 <decodeGGA+0x448>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	4a71      	ldr	r2, [pc, #452]	; (80013a0 <decodeGGA+0x448>)
 80011da:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 80011dc:	4b6e      	ldr	r3, [pc, #440]	; (8001398 <decodeGGA+0x440>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <decodeGGA+0x444>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 80011ec:	f107 030c 	add.w	r3, r7, #12
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 ff51 	bl	8007098 <atoi>
 80011f6:	4602      	mov	r2, r0
 80011f8:	4b66      	ldr	r3, [pc, #408]	; (8001394 <decodeGGA+0x43c>)
 80011fa:	fb83 1302 	smull	r1, r3, r3, r2
 80011fe:	1159      	asrs	r1, r3, #5
 8001200:	17d3      	asrs	r3, r2, #31
 8001202:	1acb      	subs	r3, r1, r3
 8001204:	2164      	movs	r1, #100	; 0x64
 8001206:	fb01 f303 	mul.w	r3, r1, r3
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	683a      	ldr	r2, [r7, #0]
 800120e:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8001210:	4b5d      	ldr	r3, [pc, #372]	; (8001388 <decodeGGA+0x430>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	4a5c      	ldr	r2, [pc, #368]	; (8001388 <decodeGGA+0x430>)
 8001218:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800121a:	f107 030c 	add.w	r3, r7, #12
 800121e:	220c      	movs	r2, #12
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f006 fd8c 	bl	8007d40 <memset>
	i=0;
 8001228:	2300      	movs	r3, #0
 800122a:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 800122c:	e013      	b.n	8001256 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 800122e:	4b56      	ldr	r3, [pc, #344]	; (8001388 <decodeGGA+0x430>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	461a      	mov	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4413      	add	r3, r2
 8001238:	7819      	ldrb	r1, [r3, #0]
 800123a:	f107 020c 	add.w	r2, r7, #12
 800123e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001240:	4413      	add	r3, r2
 8001242:	460a      	mov	r2, r1
 8001244:	701a      	strb	r2, [r3, #0]
		i++;
 8001246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001248:	3301      	adds	r3, #1
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800124c:	4b4e      	ldr	r3, [pc, #312]	; (8001388 <decodeGGA+0x430>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a4d      	ldr	r2, [pc, #308]	; (8001388 <decodeGGA+0x430>)
 8001254:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8001256:	4b4c      	ldr	r3, [pc, #304]	; (8001388 <decodeGGA+0x430>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b2c      	cmp	r3, #44	; 0x2c
 8001264:	d1e3      	bne.n	800122e <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff f808 	bl	8000280 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	2b05      	cmp	r3, #5
 8001274:	d801      	bhi.n	800127a <decodeGGA+0x322>
 8001276:	2302      	movs	r3, #2
 8001278:	e20d      	b.n	8001696 <decodeGGA+0x73e>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 800127a:	f107 030c 	add.w	r3, r7, #12
 800127e:	4618      	mov	r0, r3
 8001280:	f005 ff0a 	bl	8007098 <atoi>
 8001284:	4603      	mov	r3, r0
 8001286:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8001288:	2300      	movs	r3, #0
 800128a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 800128c:	e002      	b.n	8001294 <decodeGGA+0x33c>
 800128e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001290:	3301      	adds	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
 8001294:	f107 020c 	add.w	r2, r7, #12
 8001298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800129a:	4413      	add	r3, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b2e      	cmp	r3, #46	; 0x2e
 80012a0:	d1f5      	bne.n	800128e <decodeGGA+0x336>
	j++;
 80012a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012a4:	3301      	adds	r3, #1
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7fe ffe7 	bl	8000280 <strlen>
 80012b2:	4602      	mov	r2, r0
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	f107 020c 	add.w	r2, r7, #12
 80012c0:	4413      	add	r3, r2
 80012c2:	4618      	mov	r0, r3
 80012c4:	f005 fee8 	bl	8007098 <atoi>
 80012c8:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 80012ca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f930 	bl	8000534 <__aeabi_i2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <decodeGGA+0x44c>)
 80012da:	f7ff fabf 	bl	800085c <__aeabi_ddiv>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4690      	mov	r8, r2
 80012e4:	4699      	mov	r9, r3
 80012e6:	69f8      	ldr	r0, [r7, #28]
 80012e8:	f7ff f924 	bl	8000534 <__aeabi_i2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	6a3b      	ldr	r3, [r7, #32]
 80012f2:	3302      	adds	r3, #2
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f91d 	bl	8000534 <__aeabi_i2d>
 80012fa:	4602      	mov	r2, r0
 80012fc:	460b      	mov	r3, r1
 80012fe:	ec43 2b11 	vmov	d1, r2, r3
 8001302:	ed9f 0b1f 	vldr	d0, [pc, #124]	; 8001380 <decodeGGA+0x428>
 8001306:	f008 fe13 	bl	8009f30 <pow>
 800130a:	ec53 2b10 	vmov	r2, r3, d0
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7ff faa3 	bl	800085c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4640      	mov	r0, r8
 800131c:	4649      	mov	r1, r9
 800131e:	f7fe ffbd 	bl	800029c <__adddf3>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc45 	bl	8000bb8 <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	601a      	str	r2, [r3, #0]
	inx++;
 8001338:	4b13      	ldr	r3, [pc, #76]	; (8001388 <decodeGGA+0x430>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	3301      	adds	r3, #1
 800133e:	4a12      	ldr	r2, [pc, #72]	; (8001388 <decodeGGA+0x430>)
 8001340:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8001342:	4b11      	ldr	r3, [pc, #68]	; (8001388 <decodeGGA+0x430>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4413      	add	r3, r2
 800134c:	781a      	ldrb	r2, [r3, #0]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8001352:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <decodeGGA+0x430>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <decodeGGA+0x430>)
 800135a:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <decodeGGA+0x430>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	3301      	adds	r3, #1
 8001362:	4a09      	ldr	r2, [pc, #36]	; (8001388 <decodeGGA+0x430>)
 8001364:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	220c      	movs	r2, #12
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f006 fce6 	bl	8007d40 <memset>
	i=0;
 8001374:	2300      	movs	r3, #0
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8001378:	e02a      	b.n	80013d0 <decodeGGA+0x478>
 800137a:	bf00      	nop
 800137c:	f3af 8000 	nop.w
 8001380:	00000000 	.word	0x00000000
 8001384:	40240000 	.word	0x40240000
 8001388:	2000027c 	.word	0x2000027c
 800138c:	68db8bad 	.word	0x68db8bad
 8001390:	20000000 	.word	0x20000000
 8001394:	51eb851f 	.word	0x51eb851f
 8001398:	20000280 	.word	0x20000280
 800139c:	20000284 	.word	0x20000284
 80013a0:	20000294 	.word	0x20000294
 80013a4:	40590000 	.word	0x40590000
	{
		buffer[i] = GGAbuffer[inx];
 80013a8:	4b8b      	ldr	r3, [pc, #556]	; (80015d8 <decodeGGA+0x680>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	461a      	mov	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ba:	4413      	add	r3, r2
 80013bc:	460a      	mov	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
		i++;
 80013c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c2:	3301      	adds	r3, #1
 80013c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80013c6:	4b84      	ldr	r3, [pc, #528]	; (80015d8 <decodeGGA+0x680>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	3301      	adds	r3, #1
 80013cc:	4a82      	ldr	r2, [pc, #520]	; (80015d8 <decodeGGA+0x680>)
 80013ce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 80013d0:	4b81      	ldr	r3, [pc, #516]	; (80015d8 <decodeGGA+0x680>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4413      	add	r3, r2
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	2b2c      	cmp	r3, #44	; 0x2c
 80013de:	d1e3      	bne.n	80013a8 <decodeGGA+0x450>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4618      	mov	r0, r3
 80013e6:	f005 fe57 	bl	8007098 <atoi>
 80013ea:	4603      	mov	r3, r0
 80013ec:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 80013f2:	e002      	b.n	80013fa <decodeGGA+0x4a2>
 80013f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f6:	3301      	adds	r3, #1
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013fa:	f107 020c 	add.w	r2, r7, #12
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	4413      	add	r3, r2
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b2e      	cmp	r3, #46	; 0x2e
 8001406:	d1f5      	bne.n	80013f4 <decodeGGA+0x49c>
	j++;
 8001408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800140a:	3301      	adds	r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4618      	mov	r0, r3
 8001414:	f7fe ff34 	bl	8000280 <strlen>
 8001418:	4602      	mov	r2, r0
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8001420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	4413      	add	r3, r2
 8001428:	4618      	mov	r0, r3
 800142a:	f005 fe35 	bl	8007098 <atoi>
 800142e:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8001430:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f87d 	bl	8000534 <__aeabi_i2d>
 800143a:	f04f 0200 	mov.w	r2, #0
 800143e:	4b67      	ldr	r3, [pc, #412]	; (80015dc <decodeGGA+0x684>)
 8001440:	f7ff fa0c 	bl	800085c <__aeabi_ddiv>
 8001444:	4602      	mov	r2, r0
 8001446:	460b      	mov	r3, r1
 8001448:	4690      	mov	r8, r2
 800144a:	4699      	mov	r9, r3
 800144c:	69f8      	ldr	r0, [r7, #28]
 800144e:	f7ff f871 	bl	8000534 <__aeabi_i2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	3302      	adds	r3, #2
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff f86a 	bl	8000534 <__aeabi_i2d>
 8001460:	4602      	mov	r2, r0
 8001462:	460b      	mov	r3, r1
 8001464:	ec43 2b11 	vmov	d1, r2, r3
 8001468:	ed9f 0b59 	vldr	d0, [pc, #356]	; 80015d0 <decodeGGA+0x678>
 800146c:	f008 fd60 	bl	8009f30 <pow>
 8001470:	ec53 2b10 	vmov	r2, r3, d0
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7ff f9f0 	bl	800085c <__aeabi_ddiv>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4640      	mov	r0, r8
 8001482:	4649      	mov	r1, r9
 8001484:	f7fe ff0a 	bl	800029c <__adddf3>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4610      	mov	r0, r2
 800148e:	4619      	mov	r1, r3
 8001490:	f7ff fb92 	bl	8000bb8 <__aeabi_d2f>
 8001494:	4603      	mov	r3, r0
 8001496:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	609a      	str	r2, [r3, #8]
	inx++;
 800149e:	4b4e      	ldr	r3, [pc, #312]	; (80015d8 <decodeGGA+0x680>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	3301      	adds	r3, #1
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <decodeGGA+0x680>)
 80014a6:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 80014a8:	4b4b      	ldr	r3, [pc, #300]	; (80015d8 <decodeGGA+0x680>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4413      	add	r3, r2
 80014b2:	781a      	ldrb	r2, [r3, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 80014b8:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <decodeGGA+0x680>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	4a46      	ldr	r2, [pc, #280]	; (80015d8 <decodeGGA+0x680>)
 80014c0:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 80014c2:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <decodeGGA+0x680>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	3301      	adds	r3, #1
 80014c8:	4a43      	ldr	r2, [pc, #268]	; (80015d8 <decodeGGA+0x680>)
 80014ca:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 80014cc:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <decodeGGA+0x680>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	3301      	adds	r3, #1
 80014d2:	4a41      	ldr	r2, [pc, #260]	; (80015d8 <decodeGGA+0x680>)
 80014d4:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <decodeGGA+0x680>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	4a3e      	ldr	r2, [pc, #248]	; (80015d8 <decodeGGA+0x680>)
 80014de:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	220c      	movs	r2, #12
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f006 fc29 	bl	8007d40 <memset>
	i=0;
 80014ee:	2300      	movs	r3, #0
 80014f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80014f2:	e013      	b.n	800151c <decodeGGA+0x5c4>
	{
		buffer[i] = GGAbuffer[inx];
 80014f4:	4b38      	ldr	r3, [pc, #224]	; (80015d8 <decodeGGA+0x680>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4413      	add	r3, r2
 80014fe:	7819      	ldrb	r1, [r3, #0]
 8001500:	f107 020c 	add.w	r2, r7, #12
 8001504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001506:	4413      	add	r3, r2
 8001508:	460a      	mov	r2, r1
 800150a:	701a      	strb	r2, [r3, #0]
		i++;
 800150c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150e:	3301      	adds	r3, #1
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001512:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <decodeGGA+0x680>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <decodeGGA+0x680>)
 800151a:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 800151c:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <decodeGGA+0x680>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4413      	add	r3, r2
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b2c      	cmp	r3, #44	; 0x2c
 800152a:	d1e3      	bne.n	80014f4 <decodeGGA+0x59c>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 800152c:	f107 030c 	add.w	r3, r7, #12
 8001530:	4618      	mov	r0, r3
 8001532:	f005 fdb1 	bl	8007098 <atoi>
 8001536:	4602      	mov	r2, r0
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 800153c:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <decodeGGA+0x680>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	3301      	adds	r3, #1
 8001542:	4a25      	ldr	r2, [pc, #148]	; (80015d8 <decodeGGA+0x680>)
 8001544:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001546:	e004      	b.n	8001552 <decodeGGA+0x5fa>
 8001548:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <decodeGGA+0x680>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	3301      	adds	r3, #1
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <decodeGGA+0x680>)
 8001550:	6013      	str	r3, [r2, #0]
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <decodeGGA+0x680>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	461a      	mov	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4413      	add	r3, r2
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b2c      	cmp	r3, #44	; 0x2c
 8001560:	d1f2      	bne.n	8001548 <decodeGGA+0x5f0>


	/*************** Altitude calculation ********************/
	inx++;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <decodeGGA+0x680>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	3301      	adds	r3, #1
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <decodeGGA+0x680>)
 800156a:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	220c      	movs	r2, #12
 8001572:	2100      	movs	r1, #0
 8001574:	4618      	mov	r0, r3
 8001576:	f006 fbe3 	bl	8007d40 <memset>
	i=0;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 800157e:	e013      	b.n	80015a8 <decodeGGA+0x650>
	{
		buffer[i] = GGAbuffer[inx];
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <decodeGGA+0x680>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4413      	add	r3, r2
 800158a:	7819      	ldrb	r1, [r3, #0]
 800158c:	f107 020c 	add.w	r2, r7, #12
 8001590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001592:	4413      	add	r3, r2
 8001594:	460a      	mov	r2, r1
 8001596:	701a      	strb	r2, [r3, #0]
		i++;
 8001598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159a:	3301      	adds	r3, #1
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <decodeGGA+0x680>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	3301      	adds	r3, #1
 80015a4:	4a0c      	ldr	r2, [pc, #48]	; (80015d8 <decodeGGA+0x680>)
 80015a6:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <decodeGGA+0x680>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b2c      	cmp	r3, #44	; 0x2c
 80015b6:	d1e3      	bne.n	8001580 <decodeGGA+0x628>
	}
	num = (atoi(buffer));
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4618      	mov	r0, r3
 80015be:	f005 fd6b 	bl	8007098 <atoi>
 80015c2:	4603      	mov	r3, r0
 80015c4:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 80015ca:	e00c      	b.n	80015e6 <decodeGGA+0x68e>
 80015cc:	f3af 8000 	nop.w
 80015d0:	00000000 	.word	0x00000000
 80015d4:	40240000 	.word	0x40240000
 80015d8:	2000027c 	.word	0x2000027c
 80015dc:	40590000 	.word	0x40590000
 80015e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e2:	3301      	adds	r3, #1
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80015e6:	f107 020c 	add.w	r2, r7, #12
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	4413      	add	r3, r2
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b2e      	cmp	r3, #46	; 0x2e
 80015f2:	d1f5      	bne.n	80015e0 <decodeGGA+0x688>
	j++;
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	3301      	adds	r3, #1
 80015f8:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe fe3e 	bl	8000280 <strlen>
 8001604:	4602      	mov	r2, r0
 8001606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 800160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160e:	f107 020c 	add.w	r2, r7, #12
 8001612:	4413      	add	r3, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f005 fd3f 	bl	8007098 <atoi>
 800161a:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 800161c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff87 	bl	8000534 <__aeabi_i2d>
 8001626:	4604      	mov	r4, r0
 8001628:	460d      	mov	r5, r1
 800162a:	69f8      	ldr	r0, [r7, #28]
 800162c:	f7fe ff82 	bl	8000534 <__aeabi_i2d>
 8001630:	4680      	mov	r8, r0
 8001632:	4689      	mov	r9, r1
 8001634:	6a38      	ldr	r0, [r7, #32]
 8001636:	f7fe ff7d 	bl	8000534 <__aeabi_i2d>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	ec43 2b11 	vmov	d1, r2, r3
 8001642:	ed9f 0b17 	vldr	d0, [pc, #92]	; 80016a0 <decodeGGA+0x748>
 8001646:	f008 fc73 	bl	8009f30 <pow>
 800164a:	ec53 2b10 	vmov	r2, r3, d0
 800164e:	4640      	mov	r0, r8
 8001650:	4649      	mov	r1, r9
 8001652:	f7ff f903 	bl	800085c <__aeabi_ddiv>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7fe fe1d 	bl	800029c <__adddf3>
 8001662:	4602      	mov	r2, r0
 8001664:	460b      	mov	r3, r1
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	f7ff faa5 	bl	8000bb8 <__aeabi_d2f>
 800166e:	4603      	mov	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	621a      	str	r2, [r3, #32]

	inx++;
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <decodeGGA+0x750>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <decodeGGA+0x750>)
 8001680:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 8001682:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <decodeGGA+0x750>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	461a      	mov	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4413      	add	r3, r2
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 8001694:	2300      	movs	r3, #0

}
 8001696:	4618      	mov	r0, r3
 8001698:	3730      	adds	r7, #48	; 0x30
 800169a:	46bd      	mov	sp, r7
 800169c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016a0:	00000000 	.word	0x00000000
 80016a4:	40240000 	.word	0x40240000
 80016a8:	2000027c 	.word	0x2000027c
 80016ac:	00000000 	.word	0x00000000

080016b0 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 80016b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016b4:	b090      	sub	sp, #64	; 0x40
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
 80016ba:	6039      	str	r1, [r7, #0]
	inx = 0;
 80016bc:	4b94      	ldr	r3, [pc, #592]	; (8001910 <decodeRMC+0x260>)
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 80016c6:	e004      	b.n	80016d2 <decodeRMC+0x22>
 80016c8:	4b91      	ldr	r3, [pc, #580]	; (8001910 <decodeRMC+0x260>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	3301      	adds	r3, #1
 80016ce:	4a90      	ldr	r2, [pc, #576]	; (8001910 <decodeRMC+0x260>)
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b8f      	ldr	r3, [pc, #572]	; (8001910 <decodeRMC+0x260>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b2c      	cmp	r3, #44	; 0x2c
 80016e0:	d1f2      	bne.n	80016c8 <decodeRMC+0x18>
	inx++;
 80016e2:	4b8b      	ldr	r3, [pc, #556]	; (8001910 <decodeRMC+0x260>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	4a89      	ldr	r2, [pc, #548]	; (8001910 <decodeRMC+0x260>)
 80016ea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80016ec:	e004      	b.n	80016f8 <decodeRMC+0x48>
 80016ee:	4b88      	ldr	r3, [pc, #544]	; (8001910 <decodeRMC+0x260>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	3301      	adds	r3, #1
 80016f4:	4a86      	ldr	r2, [pc, #536]	; (8001910 <decodeRMC+0x260>)
 80016f6:	6013      	str	r3, [r2, #0]
 80016f8:	4b85      	ldr	r3, [pc, #532]	; (8001910 <decodeRMC+0x260>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	461a      	mov	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b2c      	cmp	r3, #44	; 0x2c
 8001706:	d1f2      	bne.n	80016ee <decodeRMC+0x3e>
	inx++;
 8001708:	4b81      	ldr	r3, [pc, #516]	; (8001910 <decodeRMC+0x260>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	3301      	adds	r3, #1
 800170e:	4a80      	ldr	r2, [pc, #512]	; (8001910 <decodeRMC+0x260>)
 8001710:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 8001712:	4b7f      	ldr	r3, [pc, #508]	; (8001910 <decodeRMC+0x260>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4413      	add	r3, r2
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b41      	cmp	r3, #65	; 0x41
 8001720:	d10d      	bne.n	800173e <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2201      	movs	r2, #1
 8001726:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 8001728:	4b79      	ldr	r3, [pc, #484]	; (8001910 <decodeRMC+0x260>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	3301      	adds	r3, #1
 800172e:	4a78      	ldr	r2, [pc, #480]	; (8001910 <decodeRMC+0x260>)
 8001730:	6013      	str	r3, [r2, #0]
	inx++;
 8001732:	4b77      	ldr	r3, [pc, #476]	; (8001910 <decodeRMC+0x260>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3301      	adds	r3, #1
 8001738:	4a75      	ldr	r2, [pc, #468]	; (8001910 <decodeRMC+0x260>)
 800173a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 800173c:	e009      	b.n	8001752 <decodeRMC+0xa2>
		rmc->isValid =0;
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	2200      	movs	r2, #0
 8001742:	615a      	str	r2, [r3, #20]
		return 1;
 8001744:	2301      	movs	r3, #1
 8001746:	e1d8      	b.n	8001afa <decodeRMC+0x44a>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 8001748:	4b71      	ldr	r3, [pc, #452]	; (8001910 <decodeRMC+0x260>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	3301      	adds	r3, #1
 800174e:	4a70      	ldr	r2, [pc, #448]	; (8001910 <decodeRMC+0x260>)
 8001750:	6013      	str	r3, [r2, #0]
 8001752:	4b6f      	ldr	r3, [pc, #444]	; (8001910 <decodeRMC+0x260>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4413      	add	r3, r2
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b2c      	cmp	r3, #44	; 0x2c
 8001760:	d1f2      	bne.n	8001748 <decodeRMC+0x98>
	inx++;
 8001762:	4b6b      	ldr	r3, [pc, #428]	; (8001910 <decodeRMC+0x260>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	4a69      	ldr	r2, [pc, #420]	; (8001910 <decodeRMC+0x260>)
 800176a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 800176c:	e004      	b.n	8001778 <decodeRMC+0xc8>
 800176e:	4b68      	ldr	r3, [pc, #416]	; (8001910 <decodeRMC+0x260>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a66      	ldr	r2, [pc, #408]	; (8001910 <decodeRMC+0x260>)
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b65      	ldr	r3, [pc, #404]	; (8001910 <decodeRMC+0x260>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	2b2c      	cmp	r3, #44	; 0x2c
 8001786:	d1f2      	bne.n	800176e <decodeRMC+0xbe>
	inx++;
 8001788:	4b61      	ldr	r3, [pc, #388]	; (8001910 <decodeRMC+0x260>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	3301      	adds	r3, #1
 800178e:	4a60      	ldr	r2, [pc, #384]	; (8001910 <decodeRMC+0x260>)
 8001790:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001792:	e004      	b.n	800179e <decodeRMC+0xee>
 8001794:	4b5e      	ldr	r3, [pc, #376]	; (8001910 <decodeRMC+0x260>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	4a5d      	ldr	r2, [pc, #372]	; (8001910 <decodeRMC+0x260>)
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b5c      	ldr	r3, [pc, #368]	; (8001910 <decodeRMC+0x260>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	4413      	add	r3, r2
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b2c      	cmp	r3, #44	; 0x2c
 80017ac:	d1f2      	bne.n	8001794 <decodeRMC+0xe4>
	inx++;
 80017ae:	4b58      	ldr	r3, [pc, #352]	; (8001910 <decodeRMC+0x260>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	3301      	adds	r3, #1
 80017b4:	4a56      	ldr	r2, [pc, #344]	; (8001910 <decodeRMC+0x260>)
 80017b6:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 80017b8:	e004      	b.n	80017c4 <decodeRMC+0x114>
 80017ba:	4b55      	ldr	r3, [pc, #340]	; (8001910 <decodeRMC+0x260>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	4a53      	ldr	r2, [pc, #332]	; (8001910 <decodeRMC+0x260>)
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b52      	ldr	r3, [pc, #328]	; (8001910 <decodeRMC+0x260>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b2c      	cmp	r3, #44	; 0x2c
 80017d2:	d1f2      	bne.n	80017ba <decodeRMC+0x10a>

	// Get Speed
	inx++;
 80017d4:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <decodeRMC+0x260>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	3301      	adds	r3, #1
 80017da:	4a4d      	ldr	r2, [pc, #308]	; (8001910 <decodeRMC+0x260>)
 80017dc:	6013      	str	r3, [r2, #0]
	i=0;
 80017de:	2300      	movs	r3, #0
 80017e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80017e2:	f107 0308 	add.w	r3, r7, #8
 80017e6:	220c      	movs	r2, #12
 80017e8:	2100      	movs	r1, #0
 80017ea:	4618      	mov	r0, r3
 80017ec:	f006 faa8 	bl	8007d40 <memset>
	while (RMCbuffer[inx] != ',')
 80017f0:	e013      	b.n	800181a <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80017f2:	4b47      	ldr	r3, [pc, #284]	; (8001910 <decodeRMC+0x260>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	4413      	add	r3, r2
 80017fc:	7819      	ldrb	r1, [r3, #0]
 80017fe:	f107 0208 	add.w	r2, r7, #8
 8001802:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001804:	4413      	add	r3, r2
 8001806:	460a      	mov	r2, r1
 8001808:	701a      	strb	r2, [r3, #0]
		i++;
 800180a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800180c:	3301      	adds	r3, #1
 800180e:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001810:	4b3f      	ldr	r3, [pc, #252]	; (8001910 <decodeRMC+0x260>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	3301      	adds	r3, #1
 8001816:	4a3e      	ldr	r2, [pc, #248]	; (8001910 <decodeRMC+0x260>)
 8001818:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800181a:	4b3d      	ldr	r3, [pc, #244]	; (8001910 <decodeRMC+0x260>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	461a      	mov	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b2c      	cmp	r3, #44	; 0x2c
 8001828:	d1e3      	bne.n	80017f2 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d056      	beq.n	80018e2 <decodeRMC+0x232>
		int16_t num = (atoi(buffer));  // convert the data into the number
 8001834:	f107 0308 	add.w	r3, r7, #8
 8001838:	4618      	mov	r0, r3
 800183a:	f005 fc2d 	bl	8007098 <atoi>
 800183e:	4603      	mov	r3, r0
 8001840:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 8001846:	e002      	b.n	800184e <decodeRMC+0x19e>
 8001848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800184a:	3301      	adds	r3, #1
 800184c:	63bb      	str	r3, [r7, #56]	; 0x38
 800184e:	f107 0208 	add.w	r2, r7, #8
 8001852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001854:	4413      	add	r3, r2
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b2e      	cmp	r3, #46	; 0x2e
 800185a:	d1f5      	bne.n	8001848 <decodeRMC+0x198>
		j++;
 800185c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800185e:	3301      	adds	r3, #1
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fd0a 	bl	8000280 <strlen>
 800186c:	4602      	mov	r2, r0
 800186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8001874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001876:	f107 0208 	add.w	r2, r7, #8
 800187a:	4413      	add	r3, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f005 fc0b 	bl	8007098 <atoi>
 8001882:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001884:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fe53 	bl	8000534 <__aeabi_i2d>
 800188e:	4604      	mov	r4, r0
 8001890:	460d      	mov	r5, r1
 8001892:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001894:	f7fe fe4e 	bl	8000534 <__aeabi_i2d>
 8001898:	4680      	mov	r8, r0
 800189a:	4689      	mov	r9, r1
 800189c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800189e:	f7fe fe49 	bl	8000534 <__aeabi_i2d>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	ec43 2b11 	vmov	d1, r2, r3
 80018aa:	ed9f 0b17 	vldr	d0, [pc, #92]	; 8001908 <decodeRMC+0x258>
 80018ae:	f008 fb3f 	bl	8009f30 <pow>
 80018b2:	ec53 2b10 	vmov	r2, r3, d0
 80018b6:	4640      	mov	r0, r8
 80018b8:	4649      	mov	r1, r9
 80018ba:	f7fe ffcf 	bl	800085c <__aeabi_ddiv>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4620      	mov	r0, r4
 80018c4:	4629      	mov	r1, r5
 80018c6:	f7fe fce9 	bl	800029c <__adddf3>
 80018ca:	4602      	mov	r2, r0
 80018cc:	460b      	mov	r3, r1
 80018ce:	4610      	mov	r0, r2
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff f971 	bl	8000bb8 <__aeabi_d2f>
 80018d6:	4603      	mov	r3, r0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018de:	60da      	str	r2, [r3, #12]
 80018e0:	e003      	b.n	80018ea <decodeRMC+0x23a>
	}
	else rmc->speed = 0;
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	f04f 0200 	mov.w	r2, #0
 80018e8:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 80018ea:	4b09      	ldr	r3, [pc, #36]	; (8001910 <decodeRMC+0x260>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	4a07      	ldr	r2, [pc, #28]	; (8001910 <decodeRMC+0x260>)
 80018f2:	6013      	str	r3, [r2, #0]
	i=0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	220c      	movs	r2, #12
 80018fe:	2100      	movs	r1, #0
 8001900:	4618      	mov	r0, r3
 8001902:	f006 fa1d 	bl	8007d40 <memset>
	while (RMCbuffer[inx] != ',')
 8001906:	e019      	b.n	800193c <decodeRMC+0x28c>
 8001908:	00000000 	.word	0x00000000
 800190c:	40240000 	.word	0x40240000
 8001910:	2000027c 	.word	0x2000027c
	{
		buffer[i] = RMCbuffer[inx];
 8001914:	4b7e      	ldr	r3, [pc, #504]	; (8001b10 <decodeRMC+0x460>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	461a      	mov	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	7819      	ldrb	r1, [r3, #0]
 8001920:	f107 0208 	add.w	r2, r7, #8
 8001924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001926:	4413      	add	r3, r2
 8001928:	460a      	mov	r2, r1
 800192a:	701a      	strb	r2, [r3, #0]
		i++;
 800192c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800192e:	3301      	adds	r3, #1
 8001930:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001932:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <decodeRMC+0x460>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	3301      	adds	r3, #1
 8001938:	4a75      	ldr	r2, [pc, #468]	; (8001b10 <decodeRMC+0x460>)
 800193a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 800193c:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <decodeRMC+0x460>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b2c      	cmp	r3, #44	; 0x2c
 800194a:	d1e3      	bne.n	8001914 <decodeRMC+0x264>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 800194c:	f107 0308 	add.w	r3, r7, #8
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d056      	beq.n	8001a04 <decodeRMC+0x354>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001956:	f107 0308 	add.w	r3, r7, #8
 800195a:	4618      	mov	r0, r3
 800195c:	f005 fb9c 	bl	8007098 <atoi>
 8001960:	4603      	mov	r3, r0
 8001962:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001964:	2300      	movs	r3, #0
 8001966:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001968:	e002      	b.n	8001970 <decodeRMC+0x2c0>
 800196a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800196c:	3301      	adds	r3, #1
 800196e:	637b      	str	r3, [r7, #52]	; 0x34
 8001970:	f107 0208 	add.w	r2, r7, #8
 8001974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001976:	4413      	add	r3, r2
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b2e      	cmp	r3, #46	; 0x2e
 800197c:	d1f5      	bne.n	800196a <decodeRMC+0x2ba>
		j++;
 800197e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001980:	3301      	adds	r3, #1
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001984:	f107 0308 	add.w	r3, r7, #8
 8001988:	4618      	mov	r0, r3
 800198a:	f7fe fc79 	bl	8000280 <strlen>
 800198e:	4602      	mov	r2, r0
 8001990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001992:	1ad3      	subs	r3, r2, r3
 8001994:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001996:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001998:	f107 0208 	add.w	r2, r7, #8
 800199c:	4413      	add	r3, r2
 800199e:	4618      	mov	r0, r3
 80019a0:	f005 fb7a 	bl	8007098 <atoi>
 80019a4:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 80019a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fdc2 	bl	8000534 <__aeabi_i2d>
 80019b0:	4604      	mov	r4, r0
 80019b2:	460d      	mov	r5, r1
 80019b4:	69b8      	ldr	r0, [r7, #24]
 80019b6:	f7fe fdbd 	bl	8000534 <__aeabi_i2d>
 80019ba:	4680      	mov	r8, r0
 80019bc:	4689      	mov	r9, r1
 80019be:	69f8      	ldr	r0, [r7, #28]
 80019c0:	f7fe fdb8 	bl	8000534 <__aeabi_i2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	ec43 2b11 	vmov	d1, r2, r3
 80019cc:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001b08 <decodeRMC+0x458>
 80019d0:	f008 faae 	bl	8009f30 <pow>
 80019d4:	ec53 2b10 	vmov	r2, r3, d0
 80019d8:	4640      	mov	r0, r8
 80019da:	4649      	mov	r1, r9
 80019dc:	f7fe ff3e 	bl	800085c <__aeabi_ddiv>
 80019e0:	4602      	mov	r2, r0
 80019e2:	460b      	mov	r3, r1
 80019e4:	4620      	mov	r0, r4
 80019e6:	4629      	mov	r1, r5
 80019e8:	f7fe fc58 	bl	800029c <__adddf3>
 80019ec:	4602      	mov	r2, r0
 80019ee:	460b      	mov	r3, r1
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	f7ff f8e0 	bl	8000bb8 <__aeabi_d2f>
 80019f8:	4603      	mov	r3, r0
 80019fa:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	697a      	ldr	r2, [r7, #20]
 8001a00:	611a      	str	r2, [r3, #16]
 8001a02:	e003      	b.n	8001a0c <decodeRMC+0x35c>
	}
	else
		{
			rmc->course = 0;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 8001a0c:	4b40      	ldr	r3, [pc, #256]	; (8001b10 <decodeRMC+0x460>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <decodeRMC+0x460>)
 8001a14:	6013      	str	r3, [r2, #0]
	i=0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	220c      	movs	r2, #12
 8001a20:	2100      	movs	r1, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	f006 f98c 	bl	8007d40 <memset>
	while (RMCbuffer[inx] != ',')
 8001a28:	e013      	b.n	8001a52 <decodeRMC+0x3a2>
	{
		buffer[i] = RMCbuffer[inx];
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <decodeRMC+0x460>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4413      	add	r3, r2
 8001a34:	7819      	ldrb	r1, [r3, #0]
 8001a36:	f107 0208 	add.w	r2, r7, #8
 8001a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a3c:	4413      	add	r3, r2
 8001a3e:	460a      	mov	r2, r1
 8001a40:	701a      	strb	r2, [r3, #0]
		i++;
 8001a42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a44:	3301      	adds	r3, #1
 8001a46:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 8001a48:	4b31      	ldr	r3, [pc, #196]	; (8001b10 <decodeRMC+0x460>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4a30      	ldr	r2, [pc, #192]	; (8001b10 <decodeRMC+0x460>)
 8001a50:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001a52:	4b2f      	ldr	r3, [pc, #188]	; (8001b10 <decodeRMC+0x460>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	2b2c      	cmp	r3, #44	; 0x2c
 8001a60:	d1e3      	bne.n	8001a2a <decodeRMC+0x37a>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f005 fb16 	bl	8007098 <atoi>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a29      	ldr	r2, [pc, #164]	; (8001b14 <decodeRMC+0x464>)
 8001a70:	fb82 1203 	smull	r1, r2, r2, r3
 8001a74:	1312      	asrs	r2, r2, #12
 8001a76:	17db      	asrs	r3, r3, #31
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	4a27      	ldr	r2, [pc, #156]	; (8001b18 <decodeRMC+0x468>)
 8001a7c:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 8001a7e:	f107 0308 	add.w	r3, r7, #8
 8001a82:	4618      	mov	r0, r3
 8001a84:	f005 fb08 	bl	8007098 <atoi>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	4a24      	ldr	r2, [pc, #144]	; (8001b1c <decodeRMC+0x46c>)
 8001a8c:	fb82 1203 	smull	r1, r2, r2, r3
 8001a90:	1152      	asrs	r2, r2, #5
 8001a92:	17db      	asrs	r3, r3, #31
 8001a94:	1ad2      	subs	r2, r2, r3
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <decodeRMC+0x46c>)
 8001a98:	fb83 1302 	smull	r1, r3, r3, r2
 8001a9c:	1159      	asrs	r1, r3, #5
 8001a9e:	17d3      	asrs	r3, r2, #31
 8001aa0:	1acb      	subs	r3, r1, r3
 8001aa2:	2164      	movs	r1, #100	; 0x64
 8001aa4:	fb01 f303 	mul.w	r3, r1, r3
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <decodeRMC+0x470>)
 8001aac:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f005 faf0 	bl	8007098 <atoi>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <decodeRMC+0x46c>)
 8001abc:	fb83 1302 	smull	r1, r3, r3, r2
 8001ac0:	1159      	asrs	r1, r3, #5
 8001ac2:	17d3      	asrs	r3, r2, #31
 8001ac4:	1acb      	subs	r3, r1, r3
 8001ac6:	2164      	movs	r1, #100	; 0x64
 8001ac8:	fb01 f303 	mul.w	r3, r1, r3
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	4a15      	ldr	r2, [pc, #84]	; (8001b24 <decodeRMC+0x474>)
 8001ad0:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001ad2:	4b11      	ldr	r3, [pc, #68]	; (8001b18 <decodeRMC+0x468>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4b14      	ldr	r3, [pc, #80]	; (8001b28 <decodeRMC+0x478>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4413      	add	r3, r2
 8001adc:	4a0e      	ldr	r2, [pc, #56]	; (8001b18 <decodeRMC+0x468>)
 8001ade:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <decodeRMC+0x468>)
 8001ae2:	681a      	ldr	r2, [r3, #0]
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001ae8:	4b0d      	ldr	r3, [pc, #52]	; (8001b20 <decodeRMC+0x470>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <decodeRMC+0x474>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	609a      	str	r2, [r3, #8]

	return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3740      	adds	r7, #64	; 0x40
 8001afe:	46bd      	mov	sp, r7
 8001b00:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001b04:	f3af 8000 	nop.w
 8001b08:	00000000 	.word	0x00000000
 8001b0c:	40240000 	.word	0x40240000
 8001b10:	2000027c 	.word	0x2000027c
 8001b14:	68db8bad 	.word	0x68db8bad
 8001b18:	20000288 	.word	0x20000288
 8001b1c:	51eb851f 	.word	0x51eb851f
 8001b20:	2000028c 	.word	0x2000028c
 8001b24:	20000290 	.word	0x20000290
 8001b28:	20000294 	.word	0x20000294

08001b2c <Ringbuf_init>:
ring_buffer *_tx_buffer;

void store_char(unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <Ringbuf_init+0x3c>)
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <Ringbuf_init+0x40>)
 8001b34:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <Ringbuf_init+0x44>)
 8001b38:	4a0e      	ldr	r2, [pc, #56]	; (8001b74 <Ringbuf_init+0x48>)
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8001b3c:	4b0e      	ldr	r3, [pc, #56]	; (8001b78 <Ringbuf_init+0x4c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	695a      	ldr	r2, [r3, #20]
 8001b42:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <Ringbuf_init+0x4c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8001b4c:	4b0a      	ldr	r3, [pc, #40]	; (8001b78 <Ringbuf_init+0x4c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <Ringbuf_init+0x4c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0220 	orr.w	r2, r2, #32
 8001b5a:	60da      	str	r2, [r3, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	200006ac 	.word	0x200006ac
 8001b6c:	2000029c 	.word	0x2000029c
 8001b70:	200006b0 	.word	0x200006b0
 8001b74:	200004a4 	.word	0x200004a4
 8001b78:	20000798 	.word	0x20000798

08001b7c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	6039      	str	r1, [r7, #0]
 8001b86:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b8e:	3301      	adds	r3, #1
 8001b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b94:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d009      	beq.n	8001bb6 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ba8:	683a      	ldr	r2, [r7, #0]
 8001baa:	79f9      	ldrb	r1, [r7, #7]
 8001bac:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8001bca:	4b13      	ldr	r3, [pc, #76]	; (8001c18 <Uart_read+0x54>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001bd2:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <Uart_read+0x54>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d102      	bne.n	8001be4 <Uart_read+0x20>
  {
    return -1;
 8001bde:	f04f 33ff 	mov.w	r3, #4294967295
 8001be2:	e013      	b.n	8001c0c <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <Uart_read+0x54>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	4b0b      	ldr	r3, [pc, #44]	; (8001c18 <Uart_read+0x54>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <Uart_read+0x54>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <Uart_read+0x54>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001c06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	200006ac 	.word	0x200006ac

08001c1c <Uart_write>:

/* writes a single character to the uart and increments head
 */
void Uart_write(int c)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	db25      	blt.n	8001c76 <Uart_write+0x5a>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <Uart_write+0x68>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c32:	3301      	adds	r3, #1
 8001c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c38:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 8001c3a:	bf00      	nop
 8001c3c:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <Uart_write+0x68>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d0f8      	beq.n	8001c3c <Uart_write+0x20>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 8001c4a:	4b0e      	ldr	r3, [pc, #56]	; (8001c84 <Uart_write+0x68>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <Uart_write+0x68>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c56:	6879      	ldr	r1, [r7, #4]
 8001c58:	b2c9      	uxtb	r1, r1
 8001c5a:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <Uart_write+0x68>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <Uart_write+0x6c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68da      	ldr	r2, [r3, #12]
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <Uart_write+0x6c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c74:	60da      	str	r2, [r3, #12]
	}
}
 8001c76:	bf00      	nop
 8001c78:	3714      	adds	r7, #20
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	200006b0 	.word	0x200006b0
 8001c88:	20000798 	.word	0x20000798

08001c8c <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	; (8001cbc <IsDataAvailable+0x30>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <IsDataAvailable+0x30>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	200006ac 	.word	0x200006ac

08001cc0 <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (const char *s)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8001cc8:	e006      	b.n	8001cd8 <Uart_sendstring+0x18>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ffa2 	bl	8001c1c <Uart_write>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f4      	bne.n	8001cca <Uart_sendstring+0xa>
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	; (8001d24 <Uart_peek+0x38>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <Uart_peek+0x38>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d102      	bne.n	8001d0a <Uart_peek+0x1e>
  {
    return -1;
 8001d04:	f04f 33ff 	mov.w	r3, #4294967295
 8001d08:	e006      	b.n	8001d18 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <Uart_peek+0x38>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <Uart_peek+0x38>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d16:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200006ac 	.word	0x200006ac

08001d28 <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7fe faa2 	bl	8000280 <strlen>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8001d44:	e01e      	b.n	8001d84 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 8001d46:	4b36      	ldr	r3, [pc, #216]	; (8001e20 <Copy_upto+0xf8>)
 8001d48:	6819      	ldr	r1, [r3, #0]
 8001d4a:	4b35      	ldr	r3, [pc, #212]	; (8001e20 <Copy_upto+0xf8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	4403      	add	r3, r0
 8001d58:	5c8a      	ldrb	r2, [r1, r2]
 8001d5a:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001d5c:	4b30      	ldr	r3, [pc, #192]	; (8001e20 <Copy_upto+0xf8>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001d64:	1c5a      	adds	r2, r3, #1
 8001d66:	4b2e      	ldr	r3, [pc, #184]	; (8001e20 <Copy_upto+0xf8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	3301      	adds	r3, #1
 8001d76:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8001d78:	bf00      	nop
 8001d7a:	f7ff ff87 	bl	8001c8c <IsDataAvailable>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d0fa      	beq.n	8001d7a <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 8001d84:	f7ff ffb2 	bl	8001cec <Uart_peek>
 8001d88:	4601      	mov	r1, r0
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	4413      	add	r3, r2
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4299      	cmp	r1, r3
 8001d94:	d1d7      	bne.n	8001d46 <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8001d96:	e027      	b.n	8001de8 <Copy_upto+0xc0>
	{
		so_far++;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 8001d9e:	f7ff ff11 	bl	8001bc4 <Uart_read>
 8001da2:	4601      	mov	r1, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1c5a      	adds	r2, r3, #1
 8001da8:	613a      	str	r2, [r7, #16]
 8001daa:	461a      	mov	r2, r3
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	b2ca      	uxtb	r2, r1
 8001db2:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d101      	bne.n	8001dc0 <Copy_upto+0x98>
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e02a      	b.n	8001e16 <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <Copy_upto+0xfc>)
 8001dc2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dc6:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001dc8:	bf00      	nop
 8001dca:	f7ff ff5f 	bl	8001c8c <IsDataAvailable>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d103      	bne.n	8001ddc <Copy_upto+0xb4>
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <Copy_upto+0xfc>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f6      	bne.n	8001dca <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8001ddc:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <Copy_upto+0xfc>)
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <Copy_upto+0xc0>
 8001de4:	2300      	movs	r3, #0
 8001de6:	e016      	b.n	8001e16 <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 8001de8:	f7ff ff80 	bl	8001cec <Uart_peek>
 8001dec:	4601      	mov	r1, r0
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4299      	cmp	r1, r3
 8001df8:	d0ce      	beq.n	8001d98 <Copy_upto+0x70>
	}

	if (so_far != len)
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d002      	beq.n	8001e08 <Copy_upto+0xe0>
	{
		so_far = 0;
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
		goto again;
 8001e06:	e79d      	b.n	8001d44 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	d101      	bne.n	8001e14 <Copy_upto+0xec>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <Copy_upto+0xee>
	else return 0;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	200006ac 	.word	0x200006ac
 8001e24:	20000298 	.word	0x20000298

08001e28 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f7fe fa23 	bl	8000280 <strlen>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8001e3e:	4b3c      	ldr	r3, [pc, #240]	; (8001f30 <Wait_for+0x108>)
 8001e40:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e44:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 8001e46:	bf00      	nop
 8001e48:	f7ff ff20 	bl	8001c8c <IsDataAvailable>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d103      	bne.n	8001e5a <Wait_for+0x32>
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <Wait_for+0x108>)
 8001e54:	881b      	ldrh	r3, [r3, #0]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f6      	bne.n	8001e48 <Wait_for+0x20>
	if (timeout == 0) return 0;
 8001e5a:	4b35      	ldr	r3, [pc, #212]	; (8001f30 <Wait_for+0x108>)
 8001e5c:	881b      	ldrh	r3, [r3, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d119      	bne.n	8001e96 <Wait_for+0x6e>
 8001e62:	2300      	movs	r3, #0
 8001e64:	e060      	b.n	8001f28 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 8001e66:	4b33      	ldr	r3, [pc, #204]	; (8001f34 <Wait_for+0x10c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001e6e:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <Wait_for+0x10c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d00b      	beq.n	8001e92 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001e7a:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <Wait_for+0x10c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	4b2b      	ldr	r3, [pc, #172]	; (8001f34 <Wait_for+0x10c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001e90:	e001      	b.n	8001e96 <Wait_for+0x6e>
		}

		else
		{
			return 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	e048      	b.n	8001f28 <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 8001e96:	f7ff ff29 	bl	8001cec <Uart_peek>
 8001e9a:	4601      	mov	r1, r0
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4299      	cmp	r1, r3
 8001ea6:	d1de      	bne.n	8001e66 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001ea8:	e027      	b.n	8001efa <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	3301      	adds	r3, #1
 8001eae:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8001eb0:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <Wait_for+0x10c>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	4b1e      	ldr	r3, [pc, #120]	; (8001f34 <Wait_for+0x10c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ec2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d101      	bne.n	8001ed2 <Wait_for+0xaa>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e02a      	b.n	8001f28 <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8001ed2:	4b17      	ldr	r3, [pc, #92]	; (8001f30 <Wait_for+0x108>)
 8001ed4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ed8:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8001eda:	bf00      	nop
 8001edc:	f7ff fed6 	bl	8001c8c <IsDataAvailable>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d103      	bne.n	8001eee <Wait_for+0xc6>
 8001ee6:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <Wait_for+0x108>)
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f6      	bne.n	8001edc <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <Wait_for+0x108>)
 8001ef0:	881b      	ldrh	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <Wait_for+0xd2>
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	e016      	b.n	8001f28 <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 8001efa:	f7ff fef7 	bl	8001cec <Uart_peek>
 8001efe:	4601      	mov	r1, r0
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	4413      	add	r3, r2
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	4299      	cmp	r1, r3
 8001f0a:	d0ce      	beq.n	8001eaa <Wait_for+0x82>
	}

	if (so_far != len)
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d002      	beq.n	8001f1a <Wait_for+0xf2>
	{
		so_far = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
		goto again;
 8001f18:	e791      	b.n	8001e3e <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001f1a:	68fa      	ldr	r2, [r7, #12]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d101      	bne.n	8001f26 <Wait_for+0xfe>
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <Wait_for+0x100>
	else return 0;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20000298 	.word	0x20000298
 8001f34:	200006ac 	.word	0x200006ac

08001f38 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d013      	beq.n	8001f82 <Uart_isr+0x4a>
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	f003 0320 	and.w	r3, r3, #32
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00e      	beq.n	8001f82 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001f72:	4b1e      	ldr	r3, [pc, #120]	; (8001fec <Uart_isr+0xb4>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	7bfb      	ldrb	r3, [r7, #15]
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fdfe 	bl	8001b7c <store_char>
        return;
 8001f80:	e031      	b.n	8001fe6 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d02c      	beq.n	8001fe6 <Uart_isr+0xae>
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d027      	beq.n	8001fe6 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001f96:	4b16      	ldr	r3, [pc, #88]	; (8001ff0 <Uart_isr+0xb8>)
 8001f98:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001f9c:	4b14      	ldr	r3, [pc, #80]	; (8001ff0 <Uart_isr+0xb8>)
 8001f9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d108      	bne.n	8001fb8 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68da      	ldr	r2, [r3, #12]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fb4:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001fb6:	e015      	b.n	8001fe4 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <Uart_isr+0xb8>)
 8001fba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fbe:	4a0c      	ldr	r2, [pc, #48]	; (8001ff0 <Uart_isr+0xb8>)
 8001fc0:	5cd3      	ldrb	r3, [r2, r3]
 8001fc2:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8001fc4:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <Uart_isr+0xb8>)
 8001fc6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001fca:	3301      	adds	r3, #1
 8001fcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fd0:	4a07      	ldr	r2, [pc, #28]	; (8001ff0 <Uart_isr+0xb8>)
 8001fd2:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	7bba      	ldrb	r2, [r7, #14]
 8001fe2:	605a      	str	r2, [r3, #4]
    	return;
 8001fe4:	bf00      	nop
    }
}
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200006ac 	.word	0x200006ac
 8001ff0:	200004a4 	.word	0x200004a4

08001ff4 <initGPS>:
char GGA[100]; // hold GGA data from GPS
char RMC[100];

char gpsResponseBuf[100]; // hold GPS response during initialization

void initGPS(){
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0

	Uart_sendstring(startGPSCommand); // start GPS
 8001ff8:	4806      	ldr	r0, [pc, #24]	; (8002014 <initGPS+0x20>)
 8001ffa:	f7ff fe61 	bl	8001cc0 <Uart_sendstring>
	HAL_Delay(200);
 8001ffe:	20c8      	movs	r0, #200	; 0xc8
 8002000:	f000 fe80 	bl	8002d04 <HAL_Delay>
	Uart_sendstring(startGPSCommandReceive); // receive GPS data after N seconds
 8002004:	4804      	ldr	r0, [pc, #16]	; (8002018 <initGPS+0x24>)
 8002006:	f7ff fe5b 	bl	8001cc0 <Uart_sendstring>
	HAL_Delay(200);
 800200a:	20c8      	movs	r0, #200	; 0xc8
 800200c:	f000 fe7a 	bl	8002d04 <HAL_Delay>

}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}
 8002014:	20000004 	.word	0x20000004
 8002018:	20000014 	.word	0x20000014

0800201c <checkGPSInitResponse>:

int checkGPSInitResponse() {
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0

	if(Wait_for("OK") == 1) {
 8002020:	4809      	ldr	r0, [pc, #36]	; (8002048 <checkGPSInitResponse+0x2c>)
 8002022:	f7ff ff01 	bl	8001e28 <Wait_for>
 8002026:	4603      	mov	r3, r0
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <checkGPSInitResponse+0x1c>
		VCCTimeout = 5000;
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <checkGPSInitResponse+0x30>)
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	601a      	str	r2, [r3, #0]
		return 1;
 8002034:	2301      	movs	r3, #1
 8002036:	e004      	b.n	8002042 <checkGPSInitResponse+0x26>

	} else {
		VCCTimeout = 5000;
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <checkGPSInitResponse+0x30>)
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	601a      	str	r2, [r3, #0]
		return 0;
 8002040:	2300      	movs	r3, #0

		  myprintf(huart1, vcc_timeout_message);
		  return 0;
	  }

}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	0800ae54 	.word	0x0800ae54
 800204c:	20000024 	.word	0x20000024

08002050 <myprintf>:

void myprintf(UART_HandleTypeDef huart, const char* fmt,  ...){
 8002050:	b40f      	push	{r0, r1, r2, r3}
 8002052:	b580      	push	{r7, lr}
 8002054:	b082      	sub	sp, #8
 8002056:	af00      	add	r7, sp, #0
 8002058:	f107 0c10 	add.w	ip, r7, #16
 800205c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	static char buffer[256];
	va_list args;
	va_start(args, fmt);
 8002060:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002064:	603b      	str	r3, [r7, #0]
	vsnprintf(buffer, sizeof(buffer), fmt, args);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800206a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800206e:	480c      	ldr	r0, [pc, #48]	; (80020a0 <myprintf+0x50>)
 8002070:	f005 fe58 	bl	8007d24 <vsniprintf>
	va_end(args);

	int len = strlen(buffer);
 8002074:	480a      	ldr	r0, [pc, #40]	; (80020a0 <myprintf+0x50>)
 8002076:	f7fe f903 	bl	8000280 <strlen>
 800207a:	4603      	mov	r3, r0
 800207c:	607b      	str	r3, [r7, #4]
	HAL_UART_Transmit(&huart, (uint8_t*)buffer, len, -1 );
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	b29a      	uxth	r2, r3
 8002082:	f04f 33ff 	mov.w	r3, #4294967295
 8002086:	4906      	ldr	r1, [pc, #24]	; (80020a0 <myprintf+0x50>)
 8002088:	f107 0010 	add.w	r0, r7, #16
 800208c:	f004 f852 	bl	8006134 <HAL_UART_Transmit>

}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800209a:	b004      	add	sp, #16
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	200009c8 	.word	0x200009c8

080020a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020a6:	b091      	sub	sp, #68	; 0x44
 80020a8:	af10      	add	r7, sp, #64	; 0x40
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020aa:	f000 fdb9 	bl	8002c20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020ae:	f000 f857 	bl	8002160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020b2:	f000 f98f 	bl	80023d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020b6:	f000 f939 	bl	800232c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80020ba:	f000 f961 	bl	8002380 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80020be:	f000 f8b9 	bl	8002234 <MX_I2C1_Init>
  MX_TIM2_Init();
 80020c2:	f000 f8e5 	bl	8002290 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  Ringbuf_init();
 80020c6:	f7ff fd31 	bl	8001b2c <Ringbuf_init>

  initGPS();
 80020ca:	f7ff ff93 	bl	8001ff4 <initGPS>


  if(checkGPSInitResponse()) {
 80020ce:	f7ff ffa5 	bl	800201c <checkGPSInitResponse>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d005      	beq.n	80020e4 <main+0x40>
	  sprintf(gpsResponseBuf,
 80020d8:	4a1a      	ldr	r2, [pc, #104]	; (8002144 <main+0xa0>)
 80020da:	491b      	ldr	r1, [pc, #108]	; (8002148 <main+0xa4>)
 80020dc:	481b      	ldr	r0, [pc, #108]	; (800214c <main+0xa8>)
 80020de:	f005 fd93 	bl	8007c08 <siprintf>
 80020e2:	e004      	b.n	80020ee <main+0x4a>
			"%s\n\r",
			"Init OK"
			);
  } else {
	  sprintf(gpsResponseBuf,
 80020e4:	4a1a      	ldr	r2, [pc, #104]	; (8002150 <main+0xac>)
 80020e6:	4918      	ldr	r1, [pc, #96]	; (8002148 <main+0xa4>)
 80020e8:	4818      	ldr	r0, [pc, #96]	; (800214c <main+0xa8>)
 80020ea:	f005 fd8d 	bl	8007c08 <siprintf>
    /* USER CODE BEGIN 3 */

//	  HAL_UART_Transmit(&huart1, (uint8_t*)gpsResponseBuf, 10, 100);
//	  HAL_Delay(5);

	  read_GPS();
 80020ee:	f000 f9d1 	bl	8002494 <read_GPS>

	  myprintf(huart1, posBuffer);
 80020f2:	4e18      	ldr	r6, [pc, #96]	; (8002154 <main+0xb0>)
 80020f4:	4b18      	ldr	r3, [pc, #96]	; (8002158 <main+0xb4>)
 80020f6:	930e      	str	r3, [sp, #56]	; 0x38
 80020f8:	466d      	mov	r5, sp
 80020fa:	f106 0410 	add.w	r4, r6, #16
 80020fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002100:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800210a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800210e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002112:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8002116:	f7ff ff9b 	bl	8002050 <myprintf>
	  myprintf(huart1, timeBuffer);
 800211a:	4e0e      	ldr	r6, [pc, #56]	; (8002154 <main+0xb0>)
 800211c:	4b0f      	ldr	r3, [pc, #60]	; (800215c <main+0xb8>)
 800211e:	930e      	str	r3, [sp, #56]	; 0x38
 8002120:	466d      	mov	r5, sp
 8002122:	f106 0410 	add.w	r4, r6, #16
 8002126:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002128:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800212e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002130:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002132:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002136:	e885 0003 	stmia.w	r5, {r0, r1}
 800213a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800213e:	f7ff ff87 	bl	8002050 <myprintf>
	  read_GPS();
 8002142:	e7d4      	b.n	80020ee <main+0x4a>
 8002144:	0800ae58 	.word	0x0800ae58
 8002148:	0800ae60 	.word	0x0800ae60
 800214c:	20000964 	.word	0x20000964
 8002150:	0800ae68 	.word	0x0800ae68
 8002154:	20000750 	.word	0x20000750
 8002158:	2000082c 	.word	0x2000082c
 800215c:	20000860 	.word	0x20000860

08002160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b094      	sub	sp, #80	; 0x50
 8002164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002166:	f107 0320 	add.w	r3, r7, #32
 800216a:	2230      	movs	r2, #48	; 0x30
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f005 fde6 	bl	8007d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002184:	2300      	movs	r3, #0
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	4b28      	ldr	r3, [pc, #160]	; (800222c <SystemClock_Config+0xcc>)
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <SystemClock_Config+0xcc>)
 800218e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002192:	6413      	str	r3, [r2, #64]	; 0x40
 8002194:	4b25      	ldr	r3, [pc, #148]	; (800222c <SystemClock_Config+0xcc>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a0:	2300      	movs	r3, #0
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <SystemClock_Config+0xd0>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80021ac:	4a20      	ldr	r2, [pc, #128]	; (8002230 <SystemClock_Config+0xd0>)
 80021ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b1e      	ldr	r3, [pc, #120]	; (8002230 <SystemClock_Config+0xd0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021c0:	2301      	movs	r3, #1
 80021c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ca:	2302      	movs	r3, #2
 80021cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80021d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80021d4:	2319      	movs	r3, #25
 80021d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80021d8:	2390      	movs	r3, #144	; 0x90
 80021da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021dc:	2302      	movs	r3, #2
 80021de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021e0:	2304      	movs	r3, #4
 80021e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021e4:	f107 0320 	add.w	r3, r7, #32
 80021e8:	4618      	mov	r0, r3
 80021ea:	f002 ff25 	bl	8005038 <HAL_RCC_OscConfig>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021f4:	f000 fa8e 	bl	8002714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021f8:	230f      	movs	r3, #15
 80021fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021fc:	2302      	movs	r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002208:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2102      	movs	r1, #2
 8002214:	4618      	mov	r0, r3
 8002216:	f003 f987 	bl	8005528 <HAL_RCC_ClockConfig>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002220:	f000 fa78 	bl	8002714 <Error_Handler>
  }
}
 8002224:	bf00      	nop
 8002226:	3750      	adds	r7, #80	; 0x50
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40023800 	.word	0x40023800
 8002230:	40007000 	.word	0x40007000

08002234 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <MX_I2C1_Init+0x50>)
 800223a:	4a13      	ldr	r2, [pc, #76]	; (8002288 <MX_I2C1_Init+0x54>)
 800223c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800223e:	4b11      	ldr	r3, [pc, #68]	; (8002284 <MX_I2C1_Init+0x50>)
 8002240:	4a12      	ldr	r2, [pc, #72]	; (800228c <MX_I2C1_Init+0x58>)
 8002242:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002244:	4b0f      	ldr	r3, [pc, #60]	; (8002284 <MX_I2C1_Init+0x50>)
 8002246:	2200      	movs	r2, #0
 8002248:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800224a:	4b0e      	ldr	r3, [pc, #56]	; (8002284 <MX_I2C1_Init+0x50>)
 800224c:	2200      	movs	r2, #0
 800224e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <MX_I2C1_Init+0x50>)
 8002252:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002256:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002258:	4b0a      	ldr	r3, [pc, #40]	; (8002284 <MX_I2C1_Init+0x50>)
 800225a:	2200      	movs	r2, #0
 800225c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <MX_I2C1_Init+0x50>)
 8002260:	2200      	movs	r2, #0
 8002262:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002264:	4b07      	ldr	r3, [pc, #28]	; (8002284 <MX_I2C1_Init+0x50>)
 8002266:	2200      	movs	r2, #0
 8002268:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <MX_I2C1_Init+0x50>)
 800226c:	2200      	movs	r2, #0
 800226e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	; (8002284 <MX_I2C1_Init+0x50>)
 8002272:	f001 f8bb 	bl	80033ec <HAL_I2C_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800227c:	f000 fa4a 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200006b4 	.word	0x200006b4
 8002288:	40005400 	.word	0x40005400
 800228c:	000186a0 	.word	0x000186a0

08002290 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002296:	f107 0308 	add.w	r3, r7, #8
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]
 80022a0:	609a      	str	r2, [r3, #8]
 80022a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a4:	463b      	mov	r3, r7
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022ac:	4b1e      	ldr	r3, [pc, #120]	; (8002328 <MX_TIM2_Init+0x98>)
 80022ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 80022b4:	4b1c      	ldr	r3, [pc, #112]	; (8002328 <MX_TIM2_Init+0x98>)
 80022b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80022ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022bc:	4b1a      	ldr	r3, [pc, #104]	; (8002328 <MX_TIM2_Init+0x98>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80022c2:	4b19      	ldr	r3, [pc, #100]	; (8002328 <MX_TIM2_Init+0x98>)
 80022c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80022c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ca:	4b17      	ldr	r3, [pc, #92]	; (8002328 <MX_TIM2_Init+0x98>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <MX_TIM2_Init+0x98>)
 80022d2:	2280      	movs	r2, #128	; 0x80
 80022d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022d6:	4814      	ldr	r0, [pc, #80]	; (8002328 <MX_TIM2_Init+0x98>)
 80022d8:	f003 fb06 	bl	80058e8 <HAL_TIM_Base_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80022e2:	f000 fa17 	bl	8002714 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	4619      	mov	r1, r3
 80022f2:	480d      	ldr	r0, [pc, #52]	; (8002328 <MX_TIM2_Init+0x98>)
 80022f4:	f003 fc37 	bl	8005b66 <HAL_TIM_ConfigClockSource>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80022fe:	f000 fa09 	bl	8002714 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002302:	2300      	movs	r3, #0
 8002304:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002306:	2300      	movs	r3, #0
 8002308:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800230a:	463b      	mov	r3, r7
 800230c:	4619      	mov	r1, r3
 800230e:	4806      	ldr	r0, [pc, #24]	; (8002328 <MX_TIM2_Init+0x98>)
 8002310:	f003 fe3e 	bl	8005f90 <HAL_TIMEx_MasterConfigSynchronization>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800231a:	f000 f9fb 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800231e:	bf00      	nop
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000708 	.word	0x20000708

0800232c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002330:	4b11      	ldr	r3, [pc, #68]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002332:	4a12      	ldr	r2, [pc, #72]	; (800237c <MX_USART1_UART_Init+0x50>)
 8002334:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002338:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800233c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800233e:	4b0e      	ldr	r3, [pc, #56]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002340:	2200      	movs	r2, #0
 8002342:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002344:	4b0c      	ldr	r3, [pc, #48]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800234a:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002350:	4b09      	ldr	r3, [pc, #36]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002352:	220c      	movs	r2, #12
 8002354:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002356:	4b08      	ldr	r3, [pc, #32]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800235c:	4b06      	ldr	r3, [pc, #24]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 800235e:	2200      	movs	r2, #0
 8002360:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002362:	4805      	ldr	r0, [pc, #20]	; (8002378 <MX_USART1_UART_Init+0x4c>)
 8002364:	f003 fe96 	bl	8006094 <HAL_UART_Init>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800236e:	f000 f9d1 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	20000750 	.word	0x20000750
 800237c:	40011000 	.word	0x40011000

08002380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <MX_USART2_UART_Init+0x50>)
 8002388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 800238c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0c      	ldr	r3, [pc, #48]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b06      	ldr	r3, [pc, #24]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023b6:	4805      	ldr	r0, [pc, #20]	; (80023cc <MX_USART2_UART_Init+0x4c>)
 80023b8:	f003 fe6c 	bl	8006094 <HAL_UART_Init>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80023c2:	f000 f9a7 	bl	8002714 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	20000798 	.word	0x20000798
 80023d0:	40004400 	.word	0x40004400

080023d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	605a      	str	r2, [r3, #4]
 80023e4:	609a      	str	r2, [r3, #8]
 80023e6:	60da      	str	r2, [r3, #12]
 80023e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	4b27      	ldr	r3, [pc, #156]	; (800248c <MX_GPIO_Init+0xb8>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a26      	ldr	r2, [pc, #152]	; (800248c <MX_GPIO_Init+0xb8>)
 80023f4:	f043 0304 	orr.w	r3, r3, #4
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <MX_GPIO_Init+0xb8>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b20      	ldr	r3, [pc, #128]	; (800248c <MX_GPIO_Init+0xb8>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	4a1f      	ldr	r2, [pc, #124]	; (800248c <MX_GPIO_Init+0xb8>)
 8002410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002414:	6313      	str	r3, [r2, #48]	; 0x30
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <MX_GPIO_Init+0xb8>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <MX_GPIO_Init+0xb8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	4a18      	ldr	r2, [pc, #96]	; (800248c <MX_GPIO_Init+0xb8>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6313      	str	r3, [r2, #48]	; 0x30
 8002432:	4b16      	ldr	r3, [pc, #88]	; (800248c <MX_GPIO_Init+0xb8>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	607b      	str	r3, [r7, #4]
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <MX_GPIO_Init+0xb8>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4a11      	ldr	r2, [pc, #68]	; (800248c <MX_GPIO_Init+0xb8>)
 8002448:	f043 0302 	orr.w	r3, r3, #2
 800244c:	6313      	str	r3, [r2, #48]	; 0x30
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_GPIO_Init+0xb8>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	607b      	str	r3, [r7, #4]
 8002458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002460:	480b      	ldr	r0, [pc, #44]	; (8002490 <MX_GPIO_Init+0xbc>)
 8002462:	f000 ffa9 	bl	80033b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8002466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800246c:	2301      	movs	r3, #1
 800246e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002474:	2300      	movs	r3, #0
 8002476:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8002478:	f107 0314 	add.w	r3, r7, #20
 800247c:	4619      	mov	r1, r3
 800247e:	4804      	ldr	r0, [pc, #16]	; (8002490 <MX_GPIO_Init+0xbc>)
 8002480:	f000 fe16 	bl	80030b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002484:	bf00      	nop
 8002486:	3728      	adds	r7, #40	; 0x28
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	40020800 	.word	0x40020800

08002494 <read_GPS>:
/**
 * @brief GPS read stuff
 * @param none
 * @retval int
 */
int read_GPS(void) {
 8002494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002496:	b091      	sub	sp, #68	; 0x44
 8002498:	af10      	add	r7, sp, #64	; 0x40
	/*  GPS Stuff */
	  if (Wait_for("GGA") == 1)
 800249a:	486d      	ldr	r0, [pc, #436]	; (8002650 <read_GPS+0x1bc>)
 800249c:	f7ff fcc4 	bl	8001e28 <Wait_for>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d115      	bne.n	80024d2 <read_GPS+0x3e>
	  {
		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 80024a6:	4b6b      	ldr	r3, [pc, #428]	; (8002654 <read_GPS+0x1c0>)
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	601a      	str	r2, [r3, #0]
		  Copy_upto("*", GGA);
 80024ae:	496a      	ldr	r1, [pc, #424]	; (8002658 <read_GPS+0x1c4>)
 80024b0:	486a      	ldr	r0, [pc, #424]	; (800265c <read_GPS+0x1c8>)
 80024b2:	f7ff fc39 	bl	8001d28 <Copy_upto>
		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 80024b6:	496a      	ldr	r1, [pc, #424]	; (8002660 <read_GPS+0x1cc>)
 80024b8:	4867      	ldr	r0, [pc, #412]	; (8002658 <read_GPS+0x1c4>)
 80024ba:	f7fe fd4d 	bl	8000f58 <decodeGGA>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d103      	bne.n	80024cc <read_GPS+0x38>
 80024c4:	4b67      	ldr	r3, [pc, #412]	; (8002664 <read_GPS+0x1d0>)
 80024c6:	2202      	movs	r2, #2
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	e002      	b.n	80024d2 <read_GPS+0x3e>
		  else flagGGA = 1;  // 1 indicates the data is invalid
 80024cc:	4b65      	ldr	r3, [pc, #404]	; (8002664 <read_GPS+0x1d0>)
 80024ce:	2201      	movs	r2, #1
 80024d0:	601a      	str	r2, [r3, #0]
	  }

	  if (Wait_for("RMC") == 1)
 80024d2:	4865      	ldr	r0, [pc, #404]	; (8002668 <read_GPS+0x1d4>)
 80024d4:	f7ff fca8 	bl	8001e28 <Wait_for>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d115      	bne.n	800250a <read_GPS+0x76>
	  {
		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 80024de:	4b5d      	ldr	r3, [pc, #372]	; (8002654 <read_GPS+0x1c0>)
 80024e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e4:	601a      	str	r2, [r3, #0]
		  Copy_upto("*", RMC);
 80024e6:	4961      	ldr	r1, [pc, #388]	; (800266c <read_GPS+0x1d8>)
 80024e8:	485c      	ldr	r0, [pc, #368]	; (800265c <read_GPS+0x1c8>)
 80024ea:	f7ff fc1d 	bl	8001d28 <Copy_upto>
		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 80024ee:	4960      	ldr	r1, [pc, #384]	; (8002670 <read_GPS+0x1dc>)
 80024f0:	485e      	ldr	r0, [pc, #376]	; (800266c <read_GPS+0x1d8>)
 80024f2:	f7ff f8dd 	bl	80016b0 <decodeRMC>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d103      	bne.n	8002504 <read_GPS+0x70>
 80024fc:	4b5d      	ldr	r3, [pc, #372]	; (8002674 <read_GPS+0x1e0>)
 80024fe:	2202      	movs	r2, #2
 8002500:	601a      	str	r2, [r3, #0]
 8002502:	e002      	b.n	800250a <read_GPS+0x76>
		  else flagRMC = 1;  // 1 indicates the data is invalid
 8002504:	4b5b      	ldr	r3, [pc, #364]	; (8002674 <read_GPS+0x1e0>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]
	  }

	  if ((flagGGA == 2) | (flagRMC == 2))
 800250a:	4b56      	ldr	r3, [pc, #344]	; (8002664 <read_GPS+0x1d0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b02      	cmp	r3, #2
 8002510:	bf0c      	ite	eq
 8002512:	2301      	moveq	r3, #1
 8002514:	2300      	movne	r3, #0
 8002516:	b2da      	uxtb	r2, r3
 8002518:	4b56      	ldr	r3, [pc, #344]	; (8002674 <read_GPS+0x1e0>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b02      	cmp	r3, #2
 800251e:	bf0c      	ite	eq
 8002520:	2301      	moveq	r3, #1
 8002522:	2300      	movne	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	4313      	orrs	r3, r2
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d03e      	beq.n	80025ac <read_GPS+0x118>
	  {
		  memset(timeBuffer, '\0', 50);
 800252e:	2232      	movs	r2, #50	; 0x32
 8002530:	2100      	movs	r1, #0
 8002532:	4851      	ldr	r0, [pc, #324]	; (8002678 <read_GPS+0x1e4>)
 8002534:	f005 fc04 	bl	8007d40 <memset>

		  sprintf (timeBuffer,
 8002538:	4b49      	ldr	r3, [pc, #292]	; (8002660 <read_GPS+0x1cc>)
 800253a:	691c      	ldr	r4, [r3, #16]
 800253c:	4b48      	ldr	r3, [pc, #288]	; (8002660 <read_GPS+0x1cc>)
 800253e:	695d      	ldr	r5, [r3, #20]
 8002540:	4b47      	ldr	r3, [pc, #284]	; (8002660 <read_GPS+0x1cc>)
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4a46      	ldr	r2, [pc, #280]	; (8002660 <read_GPS+0x1cc>)
 8002546:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002548:	4945      	ldr	r1, [pc, #276]	; (8002660 <read_GPS+0x1cc>)
 800254a:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800254c:	4844      	ldr	r0, [pc, #272]	; (8002660 <read_GPS+0x1cc>)
 800254e:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8002550:	9003      	str	r0, [sp, #12]
 8002552:	9102      	str	r1, [sp, #8]
 8002554:	9201      	str	r2, [sp, #4]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	462b      	mov	r3, r5
 800255a:	4622      	mov	r2, r4
 800255c:	4947      	ldr	r1, [pc, #284]	; (800267c <read_GPS+0x1e8>)
 800255e:	4846      	ldr	r0, [pc, #280]	; (8002678 <read_GPS+0x1e4>)
 8002560:	f005 fb52 	bl	8007c08 <siprintf>
				  gpsData.ggastruct.tim.sec,
				  gpsData.rmcstruct.date.Day,
				  gpsData.rmcstruct.date.Mon,
				  gpsData.rmcstruct.date.Yr);

		  memset(posBuffer, '\0', 50);
 8002564:	2232      	movs	r2, #50	; 0x32
 8002566:	2100      	movs	r1, #0
 8002568:	4845      	ldr	r0, [pc, #276]	; (8002680 <read_GPS+0x1ec>)
 800256a:	f005 fbe9 	bl	8007d40 <memset>

		  sprintf (posBuffer,
				  "%.2f%c, %.2f%c  ",
				  gpsData.ggastruct.lcation.latitude,
 800256e:	4b3c      	ldr	r3, [pc, #240]	; (8002660 <read_GPS+0x1cc>)
 8002570:	681b      	ldr	r3, [r3, #0]
		  sprintf (posBuffer,
 8002572:	4618      	mov	r0, r3
 8002574:	f7fd fff0 	bl	8000558 <__aeabi_f2d>
 8002578:	4604      	mov	r4, r0
 800257a:	460d      	mov	r5, r1
				  gpsData.ggastruct.lcation.NS,
 800257c:	4b38      	ldr	r3, [pc, #224]	; (8002660 <read_GPS+0x1cc>)
 800257e:	791b      	ldrb	r3, [r3, #4]
		  sprintf (posBuffer,
 8002580:	461e      	mov	r6, r3
				  gpsData.ggastruct.lcation.longitude,
 8002582:	4b37      	ldr	r3, [pc, #220]	; (8002660 <read_GPS+0x1cc>)
 8002584:	689b      	ldr	r3, [r3, #8]
		  sprintf (posBuffer,
 8002586:	4618      	mov	r0, r3
 8002588:	f7fd ffe6 	bl	8000558 <__aeabi_f2d>
 800258c:	4602      	mov	r2, r0
 800258e:	460b      	mov	r3, r1
				  gpsData.ggastruct.lcation.EW);
 8002590:	4933      	ldr	r1, [pc, #204]	; (8002660 <read_GPS+0x1cc>)
 8002592:	7b09      	ldrb	r1, [r1, #12]
		  sprintf (posBuffer,
 8002594:	9104      	str	r1, [sp, #16]
 8002596:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800259a:	9600      	str	r6, [sp, #0]
 800259c:	4622      	mov	r2, r4
 800259e:	462b      	mov	r3, r5
 80025a0:	4938      	ldr	r1, [pc, #224]	; (8002684 <read_GPS+0x1f0>)
 80025a2:	4837      	ldr	r0, [pc, #220]	; (8002680 <read_GPS+0x1ec>)
 80025a4:	f005 fb30 	bl	8007c08 <siprintf>

		  return 1;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e04c      	b.n	8002646 <read_GPS+0x1b2>
	  }
	  else if ((flagGGA == 1) | (flagRMC == 1))
 80025ac:	4b2d      	ldr	r3, [pc, #180]	; (8002664 <read_GPS+0x1d0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	bf0c      	ite	eq
 80025b4:	2301      	moveq	r3, #1
 80025b6:	2300      	movne	r3, #0
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <read_GPS+0x1e0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	4313      	orrs	r3, r2
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d015      	beq.n	80025fc <read_GPS+0x168>
	  {
		  myprintf(huart1, no_fix_message);
 80025d0:	4e2d      	ldr	r6, [pc, #180]	; (8002688 <read_GPS+0x1f4>)
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <read_GPS+0x1f8>)
 80025d4:	930e      	str	r3, [sp, #56]	; 0x38
 80025d6:	466d      	mov	r5, sp
 80025d8:	f106 0410 	add.w	r4, r6, #16
 80025dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80025f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80025f4:	f7ff fd2c 	bl	8002050 <myprintf>
		  return 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e024      	b.n	8002646 <read_GPS+0x1b2>
	  }

	  if (VCCTimeout <= 0)
 80025fc:	4b15      	ldr	r3, [pc, #84]	; (8002654 <read_GPS+0x1c0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	dc20      	bgt.n	8002646 <read_GPS+0x1b2>
	  {
		  VCCTimeout = 5000;  // Reset the timeout
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <read_GPS+0x1c0>)
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	601a      	str	r2, [r3, #0]

		  //reset flags
		  flagGGA =flagRMC =0;
 800260c:	4b19      	ldr	r3, [pc, #100]	; (8002674 <read_GPS+0x1e0>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
 8002612:	4b18      	ldr	r3, [pc, #96]	; (8002674 <read_GPS+0x1e0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a13      	ldr	r2, [pc, #76]	; (8002664 <read_GPS+0x1d0>)
 8002618:	6013      	str	r3, [r2, #0]

		  myprintf(huart1, vcc_timeout_message);
 800261a:	4e1b      	ldr	r6, [pc, #108]	; (8002688 <read_GPS+0x1f4>)
 800261c:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <read_GPS+0x1fc>)
 800261e:	930e      	str	r3, [sp, #56]	; 0x38
 8002620:	466d      	mov	r5, sp
 8002622:	f106 0410 	add.w	r4, r6, #16
 8002626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800262c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800262e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002636:	e885 0003 	stmia.w	r5, {r0, r1}
 800263a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800263e:	f7ff fd07 	bl	8002050 <myprintf>
		  return 0;
 8002642:	2300      	movs	r3, #0
 8002644:	e7ff      	b.n	8002646 <read_GPS+0x1b2>
	  }
}
 8002646:	4618      	mov	r0, r3
 8002648:	3704      	adds	r7, #4
 800264a:	46bd      	mov	sp, r7
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800264e:	bf00      	nop
 8002650:	0800ae74 	.word	0x0800ae74
 8002654:	20000024 	.word	0x20000024
 8002658:	2000089c 	.word	0x2000089c
 800265c:	0800ae78 	.word	0x0800ae78
 8002660:	200007e0 	.word	0x200007e0
 8002664:	20000824 	.word	0x20000824
 8002668:	0800ae7c 	.word	0x0800ae7c
 800266c:	20000900 	.word	0x20000900
 8002670:	2000080c 	.word	0x2000080c
 8002674:	20000828 	.word	0x20000828
 8002678:	20000860 	.word	0x20000860
 800267c:	0800ae80 	.word	0x0800ae80
 8002680:	2000082c 	.word	0x2000082c
 8002684:	0800aea0 	.word	0x0800aea0
 8002688:	20000750 	.word	0x20000750
 800268c:	20000028 	.word	0x20000028
 8002690:	20000050 	.word	0x20000050

08002694 <HAL_I2C_SlaveTxCpltCallback>:
  *         you can add your own implementation.
  * @retval None
  */

void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, "Txed", 4, 100);
 800269c:	2364      	movs	r3, #100	; 0x64
 800269e:	2204      	movs	r2, #4
 80026a0:	4903      	ldr	r1, [pc, #12]	; (80026b0 <HAL_I2C_SlaveTxCpltCallback+0x1c>)
 80026a2:	4804      	ldr	r0, [pc, #16]	; (80026b4 <HAL_I2C_SlaveTxCpltCallback+0x20>)
 80026a4:	f003 fd46 	bl	8006134 <HAL_UART_Transmit>
  //Xfer_Complete = 1;
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	0800aeb4 	.word	0x0800aeb4
 80026b4:	20000750 	.word	0x20000750

080026b8 <HAL_I2C_ErrorCallback>:
  * @note   This example shows a simple way to report transfer error, and you can
  *         add your own implementation.
  * @retval None
  */
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /** Error_Handler() function is called when error occurs.
  * 1- When Slave don't acknowledge it's address, Master restarts communication.
  * 2- When Master don't acknowledge the last data transferred, Slave don't care in this example.
  */
  if (HAL_I2C_GetError(hi2c) != HAL_I2C_ERROR_AF)
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f001 fa32 	bl	8003b2a <HAL_I2C_GetError>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d001      	beq.n	80026d0 <HAL_I2C_ErrorCallback+0x18>
  {
    Error_Handler();
 80026cc:	f000 f822 	bl	8002714 <Error_Handler>
  }
}
 80026d0:	bf00      	nop
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <HAL_TIM_PeriodElapsedCallback>:
/**
 * @brief Timer Interrupt callback
 * @param Timer Handle
 * @retval none
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
	if (secS < 60) {
 80026e0:	4b0a      	ldr	r3, [pc, #40]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2b3b      	cmp	r3, #59	; 0x3b
 80026e6:	dc05      	bgt.n	80026f4 <HAL_TIM_PeriodElapsedCallback+0x1c>
		secS++;
 80026e8:	4b08      	ldr	r3, [pc, #32]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3301      	adds	r3, #1
 80026ee:	4a07      	ldr	r2, [pc, #28]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80026f0:	6013      	str	r3, [r2, #0]
	} else {
		secS = 0;
		minP = 1;
	}
}
 80026f2:	e005      	b.n	8002700 <HAL_TIM_PeriodElapsedCallback+0x28>
		secS = 0;
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	601a      	str	r2, [r3, #0]
		minP = 1;
 80026fa:	4b05      	ldr	r3, [pc, #20]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80026fc:	2201      	movs	r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	20000894 	.word	0x20000894
 8002710:	20000898 	.word	0x20000898

08002714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002718:	b672      	cpsid	i
}
 800271a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800271c:	e7fe      	b.n	800271c <Error_Handler+0x8>
	...

08002720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_MspInit+0x4c>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_MspInit+0x4c>)
 8002730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002734:	6453      	str	r3, [r2, #68]	; 0x44
 8002736:	4b0d      	ldr	r3, [pc, #52]	; (800276c <HAL_MspInit+0x4c>)
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002742:	2300      	movs	r3, #0
 8002744:	603b      	str	r3, [r7, #0]
 8002746:	4b09      	ldr	r3, [pc, #36]	; (800276c <HAL_MspInit+0x4c>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274a:	4a08      	ldr	r2, [pc, #32]	; (800276c <HAL_MspInit+0x4c>)
 800274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002750:	6413      	str	r3, [r2, #64]	; 0x40
 8002752:	4b06      	ldr	r3, [pc, #24]	; (800276c <HAL_MspInit+0x4c>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275a:	603b      	str	r3, [r7, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40023800 	.word	0x40023800

08002770 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08a      	sub	sp, #40	; 0x28
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 0314 	add.w	r3, r7, #20
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a21      	ldr	r2, [pc, #132]	; (8002814 <HAL_I2C_MspInit+0xa4>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d13b      	bne.n	800280a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b20      	ldr	r3, [pc, #128]	; (8002818 <HAL_I2C_MspInit+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a1f      	ldr	r2, [pc, #124]	; (8002818 <HAL_I2C_MspInit+0xa8>)
 800279c:	f043 0302 	orr.w	r3, r3, #2
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b1d      	ldr	r3, [pc, #116]	; (8002818 <HAL_I2C_MspInit+0xa8>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	613b      	str	r3, [r7, #16]
 80027ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027b2:	2312      	movs	r3, #18
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027be:	2304      	movs	r3, #4
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	4814      	ldr	r0, [pc, #80]	; (800281c <HAL_I2C_MspInit+0xac>)
 80027ca:	f000 fc71 	bl	80030b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	4b11      	ldr	r3, [pc, #68]	; (8002818 <HAL_I2C_MspInit+0xa8>)
 80027d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d6:	4a10      	ldr	r2, [pc, #64]	; (8002818 <HAL_I2C_MspInit+0xa8>)
 80027d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027dc:	6413      	str	r3, [r2, #64]	; 0x40
 80027de:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <HAL_I2C_MspInit+0xa8>)
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027ea:	2200      	movs	r2, #0
 80027ec:	2100      	movs	r1, #0
 80027ee:	201f      	movs	r0, #31
 80027f0:	f000 fb87 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027f4:	201f      	movs	r0, #31
 80027f6:	f000 fba0 	bl	8002f3a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2020      	movs	r0, #32
 8002800:	f000 fb7f 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002804:	2020      	movs	r0, #32
 8002806:	f000 fb98 	bl	8002f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	; 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	40005400 	.word	0x40005400
 8002818:	40023800 	.word	0x40023800
 800281c:	40020400 	.word	0x40020400

08002820 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002830:	d115      	bne.n	800285e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b0c      	ldr	r3, [pc, #48]	; (8002868 <HAL_TIM_Base_MspInit+0x48>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	4a0b      	ldr	r2, [pc, #44]	; (8002868 <HAL_TIM_Base_MspInit+0x48>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	6413      	str	r3, [r2, #64]	; 0x40
 8002842:	4b09      	ldr	r3, [pc, #36]	; (8002868 <HAL_TIM_Base_MspInit+0x48>)
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800284e:	2200      	movs	r2, #0
 8002850:	2100      	movs	r1, #0
 8002852:	201c      	movs	r0, #28
 8002854:	f000 fb55 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002858:	201c      	movs	r0, #28
 800285a:	f000 fb6e 	bl	8002f3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800285e:	bf00      	nop
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800

0800286c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	; 0x30
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	2200      	movs	r2, #0
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	60da      	str	r2, [r3, #12]
 8002882:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a36      	ldr	r2, [pc, #216]	; (8002964 <HAL_UART_MspInit+0xf8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d12d      	bne.n	80028ea <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800288e:	2300      	movs	r3, #0
 8002890:	61bb      	str	r3, [r7, #24]
 8002892:	4b35      	ldr	r3, [pc, #212]	; (8002968 <HAL_UART_MspInit+0xfc>)
 8002894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002896:	4a34      	ldr	r2, [pc, #208]	; (8002968 <HAL_UART_MspInit+0xfc>)
 8002898:	f043 0310 	orr.w	r3, r3, #16
 800289c:	6453      	str	r3, [r2, #68]	; 0x44
 800289e:	4b32      	ldr	r3, [pc, #200]	; (8002968 <HAL_UART_MspInit+0xfc>)
 80028a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	61bb      	str	r3, [r7, #24]
 80028a8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	4b2e      	ldr	r3, [pc, #184]	; (8002968 <HAL_UART_MspInit+0xfc>)
 80028b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b2:	4a2d      	ldr	r2, [pc, #180]	; (8002968 <HAL_UART_MspInit+0xfc>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ba:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <HAL_UART_MspInit+0xfc>)
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = DEBUG_TX_Pin|DEBUG_RX_Pin;
 80028c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028cc:	2302      	movs	r3, #2
 80028ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d0:	2300      	movs	r3, #0
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d4:	2303      	movs	r3, #3
 80028d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028d8:	2307      	movs	r3, #7
 80028da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028dc:	f107 031c 	add.w	r3, r7, #28
 80028e0:	4619      	mov	r1, r3
 80028e2:	4822      	ldr	r0, [pc, #136]	; (800296c <HAL_UART_MspInit+0x100>)
 80028e4:	f000 fbe4 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80028e8:	e038      	b.n	800295c <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a20      	ldr	r2, [pc, #128]	; (8002970 <HAL_UART_MspInit+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d133      	bne.n	800295c <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028f4:	2300      	movs	r3, #0
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_UART_MspInit+0xfc>)
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_UART_MspInit+0xfc>)
 80028fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002902:	6413      	str	r3, [r2, #64]	; 0x40
 8002904:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_UART_MspInit+0xfc>)
 8002906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_UART_MspInit+0xfc>)
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	4a13      	ldr	r2, [pc, #76]	; (8002968 <HAL_UART_MspInit+0xfc>)
 800291a:	f043 0301 	orr.w	r3, r3, #1
 800291e:	6313      	str	r3, [r2, #48]	; 0x30
 8002920:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_UART_MspInit+0xfc>)
 8002922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	60fb      	str	r3, [r7, #12]
 800292a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPS_TX_Pin|GPS_RX_Pin;
 800292c:	230c      	movs	r3, #12
 800292e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002930:	2302      	movs	r3, #2
 8002932:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002934:	2300      	movs	r3, #0
 8002936:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002938:	2303      	movs	r3, #3
 800293a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800293c:	2307      	movs	r3, #7
 800293e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002940:	f107 031c 	add.w	r3, r7, #28
 8002944:	4619      	mov	r1, r3
 8002946:	4809      	ldr	r0, [pc, #36]	; (800296c <HAL_UART_MspInit+0x100>)
 8002948:	f000 fbb2 	bl	80030b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800294c:	2200      	movs	r2, #0
 800294e:	2100      	movs	r1, #0
 8002950:	2026      	movs	r0, #38	; 0x26
 8002952:	f000 fad6 	bl	8002f02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002956:	2026      	movs	r0, #38	; 0x26
 8002958:	f000 faef 	bl	8002f3a <HAL_NVIC_EnableIRQ>
}
 800295c:	bf00      	nop
 800295e:	3730      	adds	r7, #48	; 0x30
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40011000 	.word	0x40011000
 8002968:	40023800 	.word	0x40023800
 800296c:	40020000 	.word	0x40020000
 8002970:	40004400 	.word	0x40004400

08002974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002978:	e7fe      	b.n	8002978 <NMI_Handler+0x4>

0800297a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800297e:	e7fe      	b.n	800297e <HardFault_Handler+0x4>

08002980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002984:	e7fe      	b.n	8002984 <MemManage_Handler+0x4>

08002986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002986:	b480      	push	{r7}
 8002988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298a:	e7fe      	b.n	800298a <BusFault_Handler+0x4>

0800298c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002990:	e7fe      	b.n	8002990 <UsageFault_Handler+0x4>

08002992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002992:	b480      	push	{r7}
 8002994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002996:	bf00      	nop
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a4:	bf00      	nop
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ae:	b480      	push	{r7}
 80029b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr

080029bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c0:	f000 f980 	bl	8002cc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80029cc:	4802      	ldr	r0, [pc, #8]	; (80029d8 <TIM2_IRQHandler+0x10>)
 80029ce:	f002 ffda 	bl	8005986 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	20000708 	.word	0x20000708

080029dc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <I2C1_EV_IRQHandler+0x10>)
 80029e2:	f000 fe5c 	bl	800369e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	200006b4 	.word	0x200006b4

080029f0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <I2C1_ER_IRQHandler+0x10>)
 80029f6:	f000 ffa5 	bl	8003944 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200006b4 	.word	0x200006b4

08002a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

	Uart_isr(&huart2);
 8002a08:	4803      	ldr	r0, [pc, #12]	; (8002a18 <USART2_IRQHandler+0x14>)
 8002a0a:	f7ff fa95 	bl	8001f38 <Uart_isr>

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a0e:	4802      	ldr	r0, [pc, #8]	; (8002a18 <USART2_IRQHandler+0x14>)
 8002a10:	f003 fc1c 	bl	800624c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a14:	bf00      	nop
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000798 	.word	0x20000798

08002a1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return 1;
 8002a20:	2301      	movs	r3, #1
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <_kill>:

int _kill(int pid, int sig)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a36:	f005 f9d5 	bl	8007de4 <__errno>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2216      	movs	r2, #22
 8002a3e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <_exit>:

void _exit (int status)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a54:	f04f 31ff 	mov.w	r1, #4294967295
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f7ff ffe7 	bl	8002a2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a5e:	e7fe      	b.n	8002a5e <_exit+0x12>

08002a60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	e00a      	b.n	8002a88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a72:	f3af 8000 	nop.w
 8002a76:	4601      	mov	r1, r0
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	60ba      	str	r2, [r7, #8]
 8002a7e:	b2ca      	uxtb	r2, r1
 8002a80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	3301      	adds	r3, #1
 8002a86:	617b      	str	r3, [r7, #20]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	dbf0      	blt.n	8002a72 <_read+0x12>
  }

  return len;
 8002a90:	687b      	ldr	r3, [r7, #4]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3718      	adds	r7, #24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b086      	sub	sp, #24
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	60f8      	str	r0, [r7, #12]
 8002aa2:	60b9      	str	r1, [r7, #8]
 8002aa4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e009      	b.n	8002ac0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	60ba      	str	r2, [r7, #8]
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	3301      	adds	r3, #1
 8002abe:	617b      	str	r3, [r7, #20]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	dbf1      	blt.n	8002aac <_write+0x12>
  }
  return len;
 8002ac8:	687b      	ldr	r3, [r7, #4]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_close>:

int _close(int file)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afa:	605a      	str	r2, [r3, #4]
  return 0;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <_isatty>:

int _isatty(int file)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b083      	sub	sp, #12
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b12:	2301      	movs	r3, #1
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b085      	sub	sp, #20
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <_sbrk+0x5c>)
 8002b46:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <_sbrk+0x60>)
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b50:	4b13      	ldr	r3, [pc, #76]	; (8002ba0 <_sbrk+0x64>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d102      	bne.n	8002b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b58:	4b11      	ldr	r3, [pc, #68]	; (8002ba0 <_sbrk+0x64>)
 8002b5a:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <_sbrk+0x68>)
 8002b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <_sbrk+0x64>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4413      	add	r3, r2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d207      	bcs.n	8002b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b6c:	f005 f93a 	bl	8007de4 <__errno>
 8002b70:	4603      	mov	r3, r0
 8002b72:	220c      	movs	r2, #12
 8002b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b76:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7a:	e009      	b.n	8002b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <_sbrk+0x64>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b82:	4b07      	ldr	r3, [pc, #28]	; (8002ba0 <_sbrk+0x64>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4413      	add	r3, r2
 8002b8a:	4a05      	ldr	r2, [pc, #20]	; (8002ba0 <_sbrk+0x64>)
 8002b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20010000 	.word	0x20010000
 8002b9c:	00000400 	.word	0x00000400
 8002ba0:	20000ac8 	.word	0x20000ac8
 8002ba4:	20000c20 	.word	0x20000c20

08002ba8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <SystemInit+0x20>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <SystemInit+0x20>)
 8002bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002bd0:	f7ff ffea 	bl	8002ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bd4:	480c      	ldr	r0, [pc, #48]	; (8002c08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002bd6:	490d      	ldr	r1, [pc, #52]	; (8002c0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002bd8:	4a0d      	ldr	r2, [pc, #52]	; (8002c10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bdc:	e002      	b.n	8002be4 <LoopCopyDataInit>

08002bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002be2:	3304      	adds	r3, #4

08002be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002be8:	d3f9      	bcc.n	8002bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002bec:	4c0a      	ldr	r4, [pc, #40]	; (8002c18 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bf0:	e001      	b.n	8002bf6 <LoopFillZerobss>

08002bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bf4:	3204      	adds	r2, #4

08002bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bf8:	d3fb      	bcc.n	8002bf2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bfa:	f005 f8f9 	bl	8007df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bfe:	f7ff fa51 	bl	80020a4 <main>
  bx  lr    
 8002c02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002c04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c0c:	20000260 	.word	0x20000260
  ldr r2, =_sidata
 8002c10:	0800b288 	.word	0x0800b288
  ldr r2, =_sbss
 8002c14:	20000260 	.word	0x20000260
  ldr r4, =_ebss
 8002c18:	20000c1c 	.word	0x20000c1c

08002c1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c1c:	e7fe      	b.n	8002c1c <ADC_IRQHandler>
	...

08002c20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c24:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <HAL_Init+0x40>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0d      	ldr	r2, [pc, #52]	; (8002c60 <HAL_Init+0x40>)
 8002c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_Init+0x40>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a0a      	ldr	r2, [pc, #40]	; (8002c60 <HAL_Init+0x40>)
 8002c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_Init+0x40>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a07      	ldr	r2, [pc, #28]	; (8002c60 <HAL_Init+0x40>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c48:	2003      	movs	r0, #3
 8002c4a:	f000 f94f 	bl	8002eec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c4e:	200f      	movs	r0, #15
 8002c50:	f000 f808 	bl	8002c64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c54:	f7ff fd64 	bl	8002720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023c00 	.word	0x40023c00

08002c64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_InitTick+0x54>)
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b12      	ldr	r3, [pc, #72]	; (8002cbc <HAL_InitTick+0x58>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	4619      	mov	r1, r3
 8002c76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 f967 	bl	8002f56 <HAL_SYSTICK_Config>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e00e      	b.n	8002cb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2b0f      	cmp	r3, #15
 8002c96:	d80a      	bhi.n	8002cae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	f000 f92f 	bl	8002f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ca4:	4a06      	ldr	r2, [pc, #24]	; (8002cc0 <HAL_InitTick+0x5c>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3708      	adds	r7, #8
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000078 	.word	0x20000078
 8002cbc:	20000080 	.word	0x20000080
 8002cc0:	2000007c 	.word	0x2000007c

08002cc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cc8:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_IncTick+0x20>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_IncTick+0x24>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	4a04      	ldr	r2, [pc, #16]	; (8002ce8 <HAL_IncTick+0x24>)
 8002cd6:	6013      	str	r3, [r2, #0]
}
 8002cd8:	bf00      	nop
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	20000080 	.word	0x20000080
 8002ce8:	20000acc 	.word	0x20000acc

08002cec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  return uwTick;
 8002cf0:	4b03      	ldr	r3, [pc, #12]	; (8002d00 <HAL_GetTick+0x14>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	20000acc 	.word	0x20000acc

08002d04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d0c:	f7ff ffee 	bl	8002cec <HAL_GetTick>
 8002d10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d005      	beq.n	8002d2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_Delay+0x44>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	461a      	mov	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	4413      	add	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d2a:	bf00      	nop
 8002d2c:	f7ff ffde 	bl	8002cec <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d8f7      	bhi.n	8002d2c <HAL_Delay+0x28>
  {
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	3710      	adds	r7, #16
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop
 8002d48:	20000080 	.word	0x20000080

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	; (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	; (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4907      	ldr	r1, [pc, #28]	; (8002de8 <__NVIC_EnableIRQ+0x38>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	e000e100 	.word	0xe000e100

08002dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	6039      	str	r1, [r7, #0]
 8002df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	db0a      	blt.n	8002e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <__NVIC_SetPriority+0x4c>)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	0112      	lsls	r2, r2, #4
 8002e0c:	b2d2      	uxtb	r2, r2
 8002e0e:	440b      	add	r3, r1
 8002e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e14:	e00a      	b.n	8002e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	4908      	ldr	r1, [pc, #32]	; (8002e3c <__NVIC_SetPriority+0x50>)
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	3b04      	subs	r3, #4
 8002e24:	0112      	lsls	r2, r2, #4
 8002e26:	b2d2      	uxtb	r2, r2
 8002e28:	440b      	add	r3, r1
 8002e2a:	761a      	strb	r2, [r3, #24]
}
 8002e2c:	bf00      	nop
 8002e2e:	370c      	adds	r7, #12
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	e000e100 	.word	0xe000e100
 8002e3c:	e000ed00 	.word	0xe000ed00

08002e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b089      	sub	sp, #36	; 0x24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	f1c3 0307 	rsb	r3, r3, #7
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	bf28      	it	cs
 8002e5e:	2304      	movcs	r3, #4
 8002e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2b06      	cmp	r3, #6
 8002e68:	d902      	bls.n	8002e70 <NVIC_EncodePriority+0x30>
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	3b03      	subs	r3, #3
 8002e6e:	e000      	b.n	8002e72 <NVIC_EncodePriority+0x32>
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e74:	f04f 32ff 	mov.w	r2, #4294967295
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	401a      	ands	r2, r3
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e88:	f04f 31ff 	mov.w	r1, #4294967295
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e92:	43d9      	mvns	r1, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e98:	4313      	orrs	r3, r2
         );
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3724      	adds	r7, #36	; 0x24
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
	...

08002ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb8:	d301      	bcc.n	8002ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e00f      	b.n	8002ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <SysTick_Config+0x40>)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ec6:	210f      	movs	r1, #15
 8002ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ecc:	f7ff ff8e 	bl	8002dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ed0:	4b05      	ldr	r3, [pc, #20]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ed6:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <SysTick_Config+0x40>)
 8002ed8:	2207      	movs	r2, #7
 8002eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	e000e010 	.word	0xe000e010

08002eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f7ff ff29 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b086      	sub	sp, #24
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	60b9      	str	r1, [r7, #8]
 8002f0c:	607a      	str	r2, [r7, #4]
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f10:	2300      	movs	r3, #0
 8002f12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f14:	f7ff ff3e 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002f18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	6978      	ldr	r0, [r7, #20]
 8002f20:	f7ff ff8e 	bl	8002e40 <NVIC_EncodePriority>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7ff ff5d 	bl	8002dec <__NVIC_SetPriority>
}
 8002f32:	bf00      	nop
 8002f34:	3718      	adds	r7, #24
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b082      	sub	sp, #8
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff ff31 	bl	8002db0 <__NVIC_EnableIRQ>
}
 8002f4e:	bf00      	nop
 8002f50:	3708      	adds	r7, #8
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}

08002f56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f56:	b580      	push	{r7, lr}
 8002f58:	b082      	sub	sp, #8
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7ff ffa2 	bl	8002ea8 <SysTick_Config>
 8002f64:	4603      	mov	r3, r0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b084      	sub	sp, #16
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f7c:	f7ff feb6 	bl	8002cec <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	2b02      	cmp	r3, #2
 8002f8c:	d008      	beq.n	8002fa0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e052      	b.n	8003046 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0216 	bic.w	r2, r2, #22
 8002fae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695a      	ldr	r2, [r3, #20]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fbe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d103      	bne.n	8002fd0 <HAL_DMA_Abort+0x62>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0208 	bic.w	r2, r2, #8
 8002fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 0201 	bic.w	r2, r2, #1
 8002fee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ff0:	e013      	b.n	800301a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ff2:	f7ff fe7b 	bl	8002cec <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b05      	cmp	r3, #5
 8002ffe:	d90c      	bls.n	800301a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2220      	movs	r2, #32
 8003004:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2203      	movs	r2, #3
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e015      	b.n	8003046 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1e4      	bne.n	8002ff2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302c:	223f      	movs	r2, #63	; 0x3f
 800302e:	409a      	lsls	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800304e:	b480      	push	{r7}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d004      	beq.n	800306c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2280      	movs	r2, #128	; 0x80
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	e00c      	b.n	8003086 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2205      	movs	r2, #5
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f022 0201 	bic.w	r2, r2, #1
 8003082:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030a0:	b2db      	uxtb	r3, r3
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
	...

080030b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030ba:	2300      	movs	r3, #0
 80030bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030be:	2300      	movs	r3, #0
 80030c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
 80030ca:	e159      	b.n	8003380 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80030cc:	2201      	movs	r2, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	f040 8148 	bne.w	800337a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d005      	beq.n	8003102 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d130      	bne.n	8003164 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	2203      	movs	r2, #3
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	68da      	ldr	r2, [r3, #12]
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4313      	orrs	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69ba      	ldr	r2, [r7, #24]
 8003130:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003138:	2201      	movs	r2, #1
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	69ba      	ldr	r2, [r7, #24]
 8003144:	4013      	ands	r3, r2
 8003146:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 0201 	and.w	r2, r3, #1
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	2b03      	cmp	r3, #3
 800316e:	d017      	beq.n	80031a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f003 0303 	and.w	r3, r3, #3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d123      	bne.n	80031f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	08da      	lsrs	r2, r3, #3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	3208      	adds	r2, #8
 80031b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	220f      	movs	r2, #15
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	f003 0307 	and.w	r3, r3, #7
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	08da      	lsrs	r2, r3, #3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	3208      	adds	r2, #8
 80031ee:	69b9      	ldr	r1, [r7, #24]
 80031f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	005b      	lsls	r3, r3, #1
 80031fe:	2203      	movs	r2, #3
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 0203 	and.w	r2, r3, #3
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	4313      	orrs	r3, r2
 8003220:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a2 	beq.w	800337a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	4b57      	ldr	r3, [pc, #348]	; (8003398 <HAL_GPIO_Init+0x2e8>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4a56      	ldr	r2, [pc, #344]	; (8003398 <HAL_GPIO_Init+0x2e8>)
 8003240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003244:	6453      	str	r3, [r2, #68]	; 0x44
 8003246:	4b54      	ldr	r3, [pc, #336]	; (8003398 <HAL_GPIO_Init+0x2e8>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003252:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_GPIO_Init+0x2ec>)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a49      	ldr	r2, [pc, #292]	; (80033a0 <HAL_GPIO_Init+0x2f0>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d019      	beq.n	80032b2 <HAL_GPIO_Init+0x202>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a48      	ldr	r2, [pc, #288]	; (80033a4 <HAL_GPIO_Init+0x2f4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d013      	beq.n	80032ae <HAL_GPIO_Init+0x1fe>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a47      	ldr	r2, [pc, #284]	; (80033a8 <HAL_GPIO_Init+0x2f8>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d00d      	beq.n	80032aa <HAL_GPIO_Init+0x1fa>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a46      	ldr	r2, [pc, #280]	; (80033ac <HAL_GPIO_Init+0x2fc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d007      	beq.n	80032a6 <HAL_GPIO_Init+0x1f6>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a45      	ldr	r2, [pc, #276]	; (80033b0 <HAL_GPIO_Init+0x300>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d101      	bne.n	80032a2 <HAL_GPIO_Init+0x1f2>
 800329e:	2304      	movs	r3, #4
 80032a0:	e008      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032a2:	2307      	movs	r3, #7
 80032a4:	e006      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032a6:	2303      	movs	r3, #3
 80032a8:	e004      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032aa:	2302      	movs	r3, #2
 80032ac:	e002      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032ae:	2301      	movs	r3, #1
 80032b0:	e000      	b.n	80032b4 <HAL_GPIO_Init+0x204>
 80032b2:	2300      	movs	r3, #0
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f002 0203 	and.w	r2, r2, #3
 80032ba:	0092      	lsls	r2, r2, #2
 80032bc:	4093      	lsls	r3, r2
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032c4:	4935      	ldr	r1, [pc, #212]	; (800339c <HAL_GPIO_Init+0x2ec>)
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	089b      	lsrs	r3, r3, #2
 80032ca:	3302      	adds	r3, #2
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032d2:	4b38      	ldr	r3, [pc, #224]	; (80033b4 <HAL_GPIO_Init+0x304>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	43db      	mvns	r3, r3
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	4013      	ands	r3, r2
 80032e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032f6:	4a2f      	ldr	r2, [pc, #188]	; (80033b4 <HAL_GPIO_Init+0x304>)
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032fc:	4b2d      	ldr	r3, [pc, #180]	; (80033b4 <HAL_GPIO_Init+0x304>)
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003320:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <HAL_GPIO_Init+0x304>)
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003326:	4b23      	ldr	r3, [pc, #140]	; (80033b4 <HAL_GPIO_Init+0x304>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	43db      	mvns	r3, r3
 8003330:	69ba      	ldr	r2, [r7, #24]
 8003332:	4013      	ands	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d003      	beq.n	800334a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800334a:	4a1a      	ldr	r2, [pc, #104]	; (80033b4 <HAL_GPIO_Init+0x304>)
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003350:	4b18      	ldr	r3, [pc, #96]	; (80033b4 <HAL_GPIO_Init+0x304>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003374:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <HAL_GPIO_Init+0x304>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3301      	adds	r3, #1
 800337e:	61fb      	str	r3, [r7, #28]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	2b0f      	cmp	r3, #15
 8003384:	f67f aea2 	bls.w	80030cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3724      	adds	r7, #36	; 0x24
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	40023800 	.word	0x40023800
 800339c:	40013800 	.word	0x40013800
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40020800 	.word	0x40020800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40013c00 	.word	0x40013c00

080033b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	807b      	strh	r3, [r7, #2]
 80033c4:	4613      	mov	r3, r2
 80033c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033c8:	787b      	ldrb	r3, [r7, #1]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d003      	beq.n	80033d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033ce:	887a      	ldrh	r2, [r7, #2]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033d4:	e003      	b.n	80033de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033d6:	887b      	ldrh	r3, [r7, #2]
 80033d8:	041a      	lsls	r2, r3, #16
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	619a      	str	r2, [r3, #24]
}
 80033de:	bf00      	nop
 80033e0:	370c      	adds	r7, #12
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
	...

080033ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e12b      	b.n	8003656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7ff f9ac 	bl	8002770 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2224      	movs	r2, #36	; 0x24
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f022 0201 	bic.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800343e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800344e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003450:	f002 fa22 	bl	8005898 <HAL_RCC_GetPCLK1Freq>
 8003454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	4a81      	ldr	r2, [pc, #516]	; (8003660 <HAL_I2C_Init+0x274>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d807      	bhi.n	8003470 <HAL_I2C_Init+0x84>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	4a80      	ldr	r2, [pc, #512]	; (8003664 <HAL_I2C_Init+0x278>)
 8003464:	4293      	cmp	r3, r2
 8003466:	bf94      	ite	ls
 8003468:	2301      	movls	r3, #1
 800346a:	2300      	movhi	r3, #0
 800346c:	b2db      	uxtb	r3, r3
 800346e:	e006      	b.n	800347e <HAL_I2C_Init+0x92>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4a7d      	ldr	r2, [pc, #500]	; (8003668 <HAL_I2C_Init+0x27c>)
 8003474:	4293      	cmp	r3, r2
 8003476:	bf94      	ite	ls
 8003478:	2301      	movls	r3, #1
 800347a:	2300      	movhi	r3, #0
 800347c:	b2db      	uxtb	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e0e7      	b.n	8003656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4a78      	ldr	r2, [pc, #480]	; (800366c <HAL_I2C_Init+0x280>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0c9b      	lsrs	r3, r3, #18
 8003490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	68ba      	ldr	r2, [r7, #8]
 80034a2:	430a      	orrs	r2, r1
 80034a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a6a      	ldr	r2, [pc, #424]	; (8003660 <HAL_I2C_Init+0x274>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d802      	bhi.n	80034c0 <HAL_I2C_Init+0xd4>
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	3301      	adds	r3, #1
 80034be:	e009      	b.n	80034d4 <HAL_I2C_Init+0xe8>
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80034c6:	fb02 f303 	mul.w	r3, r2, r3
 80034ca:	4a69      	ldr	r2, [pc, #420]	; (8003670 <HAL_I2C_Init+0x284>)
 80034cc:	fba2 2303 	umull	r2, r3, r2, r3
 80034d0:	099b      	lsrs	r3, r3, #6
 80034d2:	3301      	adds	r3, #1
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	430b      	orrs	r3, r1
 80034da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80034e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	495c      	ldr	r1, [pc, #368]	; (8003660 <HAL_I2C_Init+0x274>)
 80034f0:	428b      	cmp	r3, r1
 80034f2:	d819      	bhi.n	8003528 <HAL_I2C_Init+0x13c>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	1e59      	subs	r1, r3, #1
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	005b      	lsls	r3, r3, #1
 80034fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003502:	1c59      	adds	r1, r3, #1
 8003504:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003508:	400b      	ands	r3, r1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_I2C_Init+0x138>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e59      	subs	r1, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	fbb1 f3f3 	udiv	r3, r1, r3
 800351c:	3301      	adds	r3, #1
 800351e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003522:	e051      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003524:	2304      	movs	r3, #4
 8003526:	e04f      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d111      	bne.n	8003554 <HAL_I2C_Init+0x168>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	1e58      	subs	r0, r3, #1
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	460b      	mov	r3, r1
 800353a:	005b      	lsls	r3, r3, #1
 800353c:	440b      	add	r3, r1
 800353e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003548:	2b00      	cmp	r3, #0
 800354a:	bf0c      	ite	eq
 800354c:	2301      	moveq	r3, #1
 800354e:	2300      	movne	r3, #0
 8003550:	b2db      	uxtb	r3, r3
 8003552:	e012      	b.n	800357a <HAL_I2C_Init+0x18e>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	1e58      	subs	r0, r3, #1
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6859      	ldr	r1, [r3, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	440b      	add	r3, r1
 8003562:	0099      	lsls	r1, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	fbb0 f3f3 	udiv	r3, r0, r3
 800356a:	3301      	adds	r3, #1
 800356c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003570:	2b00      	cmp	r3, #0
 8003572:	bf0c      	ite	eq
 8003574:	2301      	moveq	r3, #1
 8003576:	2300      	movne	r3, #0
 8003578:	b2db      	uxtb	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_I2C_Init+0x196>
 800357e:	2301      	movs	r3, #1
 8003580:	e022      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10e      	bne.n	80035a8 <HAL_I2C_Init+0x1bc>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	1e58      	subs	r0, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6859      	ldr	r1, [r3, #4]
 8003592:	460b      	mov	r3, r1
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	440b      	add	r3, r1
 8003598:	fbb0 f3f3 	udiv	r3, r0, r3
 800359c:	3301      	adds	r3, #1
 800359e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035a6:	e00f      	b.n	80035c8 <HAL_I2C_Init+0x1dc>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	440b      	add	r3, r1
 80035b6:	0099      	lsls	r1, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80035be:	3301      	adds	r3, #1
 80035c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	6809      	ldr	r1, [r1, #0]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69da      	ldr	r2, [r3, #28]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6a1b      	ldr	r3, [r3, #32]
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	430a      	orrs	r2, r1
 80035ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80035f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6911      	ldr	r1, [r2, #16]
 80035fe:	687a      	ldr	r2, [r7, #4]
 8003600:	68d2      	ldr	r2, [r2, #12]
 8003602:	4311      	orrs	r1, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6812      	ldr	r2, [r2, #0]
 8003608:	430b      	orrs	r3, r1
 800360a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	695a      	ldr	r2, [r3, #20]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f042 0201 	orr.w	r2, r2, #1
 8003636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	000186a0 	.word	0x000186a0
 8003664:	001e847f 	.word	0x001e847f
 8003668:	003d08ff 	.word	0x003d08ff
 800366c:	431bde83 	.word	0x431bde83
 8003670:	10624dd3 	.word	0x10624dd3

08003674 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003686:	2b80      	cmp	r3, #128	; 0x80
 8003688:	d103      	bne.n	8003692 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]
  }
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b088      	sub	sp, #32
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036a6:	2300      	movs	r3, #0
 80036a8:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b6:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036c6:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
 80036ca:	2b10      	cmp	r3, #16
 80036cc:	d003      	beq.n	80036d6 <HAL_I2C_EV_IRQHandler+0x38>
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	2b40      	cmp	r3, #64	; 0x40
 80036d2:	f040 80b1 	bne.w	8003838 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	699b      	ldr	r3, [r3, #24]
 80036dc:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10d      	bne.n	800370c <HAL_I2C_EV_IRQHandler+0x6e>
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80036f6:	d003      	beq.n	8003700 <HAL_I2C_EV_IRQHandler+0x62>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036fe:	d101      	bne.n	8003704 <HAL_I2C_EV_IRQHandler+0x66>
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_I2C_EV_IRQHandler+0x68>
 8003704:	2300      	movs	r3, #0
 8003706:	2b01      	cmp	r3, #1
 8003708:	f000 8114 	beq.w	8003934 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d00b      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0x90>
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800371c:	2b00      	cmp	r3, #0
 800371e:	d006      	beq.n	800372e <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f001 fc6d 	bl	8005000 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 fd72 	bl	8004210 <I2C_Master_SB>
 800372c:	e083      	b.n	8003836 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0308 	and.w	r3, r3, #8
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_I2C_EV_IRQHandler+0xac>
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373e:	2b00      	cmp	r3, #0
 8003740:	d003      	beq.n	800374a <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 fdea 	bl	800431c <I2C_Master_ADD10>
 8003748:	e075      	b.n	8003836 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0xc8>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fe06 	bl	8004370 <I2C_Master_ADDR>
 8003764:	e067      	b.n	8003836 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d036      	beq.n	80037de <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377e:	f000 80db 	beq.w	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <HAL_I2C_EV_IRQHandler+0x10a>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d008      	beq.n	80037a8 <HAL_I2C_EV_IRQHandler+0x10a>
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f9ce 	bl	8003b42 <I2C_MasterTransmit_TXE>
 80037a6:	e046      	b.n	8003836 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80c2 	beq.w	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	f000 80bc 	beq.w	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80037c0:	7bbb      	ldrb	r3, [r7, #14]
 80037c2:	2b21      	cmp	r3, #33	; 0x21
 80037c4:	d103      	bne.n	80037ce <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fa57 	bl	8003c7a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037cc:	e0b4      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	f040 80b1 	bne.w	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fac5 	bl	8003d66 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037dc:	e0ac      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037ec:	f000 80a4 	beq.w	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0x178>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <HAL_I2C_EV_IRQHandler+0x178>
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0304 	and.w	r3, r3, #4
 800380a:	2b00      	cmp	r3, #0
 800380c:	d103      	bne.n	8003816 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fb41 	bl	8003e96 <I2C_MasterReceive_RXNE>
 8003814:	e00f      	b.n	8003836 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 808b 	beq.w	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 8085 	beq.w	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fbf9 	bl	8004026 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003834:	e080      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
 8003836:	e07f      	b.n	8003938 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d004      	beq.n	800384a <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	e007      	b.n	800385a <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	f003 0302 	and.w	r3, r3, #2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d011      	beq.n	8003888 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00c      	beq.n	8003888 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b00      	cmp	r3, #0
 8003874:	d003      	beq.n	800387e <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800387e:	69b9      	ldr	r1, [r7, #24]
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f000 ffc4 	bl	800480e <I2C_Slave_ADDR>
 8003886:	e05a      	b.n	800393e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	d008      	beq.n	80038a4 <HAL_I2C_EV_IRQHandler+0x206>
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800389c:	6878      	ldr	r0, [r7, #4]
 800389e:	f000 ffff 	bl	80048a0 <I2C_Slave_STOPF>
 80038a2:	e04c      	b.n	800393e <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038a4:	7bbb      	ldrb	r3, [r7, #14]
 80038a6:	2b21      	cmp	r3, #33	; 0x21
 80038a8:	d002      	beq.n	80038b0 <HAL_I2C_EV_IRQHandler+0x212>
 80038aa:	7bbb      	ldrb	r3, [r7, #14]
 80038ac:	2b29      	cmp	r3, #41	; 0x29
 80038ae:	d120      	bne.n	80038f2 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00d      	beq.n	80038d6 <HAL_I2C_EV_IRQHandler+0x238>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d008      	beq.n	80038d6 <HAL_I2C_EV_IRQHandler+0x238>
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d103      	bne.n	80038d6 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fedf 	bl	8004692 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038d4:	e032      	b.n	800393c <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d02d      	beq.n	800393c <HAL_I2C_EV_IRQHandler+0x29e>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d028      	beq.n	800393c <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 ff0e 	bl	800470c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038f0:	e024      	b.n	800393c <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00d      	beq.n	8003918 <HAL_I2C_EV_IRQHandler+0x27a>
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_I2C_EV_IRQHandler+0x27a>
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	f003 0304 	and.w	r3, r3, #4
 800390c:	2b00      	cmp	r3, #0
 800390e:	d103      	bne.n	8003918 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f000 ff1c 	bl	800474e <I2C_SlaveReceive_RXNE>
 8003916:	e012      	b.n	800393e <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	f003 0304 	and.w	r3, r3, #4
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00d      	beq.n	800393e <HAL_I2C_EV_IRQHandler+0x2a0>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003928:	2b00      	cmp	r3, #0
 800392a:	d008      	beq.n	800393e <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 ff4c 	bl	80047ca <I2C_SlaveReceive_BTF>
 8003932:	e004      	b.n	800393e <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003934:	bf00      	nop
 8003936:	e002      	b.n	800393e <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003938:	bf00      	nop
 800393a:	e000      	b.n	800393e <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800393c:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800393e:	3720      	adds	r7, #32
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	; 0x28
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800395c:	2300      	movs	r3, #0
 800395e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003966:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00d      	beq.n	800398e <HAL_I2C_ER_IRQHandler+0x4a>
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	2b00      	cmp	r3, #0
 800397a:	d008      	beq.n	800398e <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800397c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397e:	f043 0301 	orr.w	r3, r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800398c:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800398e:	6a3b      	ldr	r3, [r7, #32]
 8003990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00d      	beq.n	80039b4 <HAL_I2C_ER_IRQHandler+0x70>
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d008      	beq.n	80039b4 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80039a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a4:	f043 0302 	orr.w	r3, r3, #2
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80039b2:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d03e      	beq.n	8003a3c <HAL_I2C_ER_IRQHandler+0xf8>
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d039      	beq.n	8003a3c <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80039c8:	7efb      	ldrb	r3, [r7, #27]
 80039ca:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039da:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80039e2:	7ebb      	ldrb	r3, [r7, #26]
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d112      	bne.n	8003a0e <HAL_I2C_ER_IRQHandler+0xca>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10f      	bne.n	8003a0e <HAL_I2C_ER_IRQHandler+0xca>
 80039ee:	7cfb      	ldrb	r3, [r7, #19]
 80039f0:	2b21      	cmp	r3, #33	; 0x21
 80039f2:	d008      	beq.n	8003a06 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80039f4:	7cfb      	ldrb	r3, [r7, #19]
 80039f6:	2b29      	cmp	r3, #41	; 0x29
 80039f8:	d005      	beq.n	8003a06 <HAL_I2C_ER_IRQHandler+0xc2>
 80039fa:	7cfb      	ldrb	r3, [r7, #19]
 80039fc:	2b28      	cmp	r3, #40	; 0x28
 80039fe:	d106      	bne.n	8003a0e <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b21      	cmp	r3, #33	; 0x21
 8003a04:	d103      	bne.n	8003a0e <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f001 f87a 	bl	8004b00 <I2C_Slave_AF>
 8003a0c:	e016      	b.n	8003a3c <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a16:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	f043 0304 	orr.w	r3, r3, #4
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003a20:	7efb      	ldrb	r3, [r7, #27]
 8003a22:	2b10      	cmp	r3, #16
 8003a24:	d002      	beq.n	8003a2c <HAL_I2C_ER_IRQHandler+0xe8>
 8003a26:	7efb      	ldrb	r3, [r7, #27]
 8003a28:	2b40      	cmp	r3, #64	; 0x40
 8003a2a:	d107      	bne.n	8003a3c <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <HAL_I2C_ER_IRQHandler+0x11e>
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d008      	beq.n	8003a62 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f043 0308 	orr.w	r3, r3, #8
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003a60:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f001 f8b7 	bl	8004be8 <I2C_ITError>
  }
}
 8003a7a:	bf00      	nop
 8003a7c:	3728      	adds	r7, #40	; 0x28
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a82:	b480      	push	{r7}
 8003a84:	b083      	sub	sp, #12
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b083      	sub	sp, #12
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003a9e:	bf00      	nop
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b083      	sub	sp, #12
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	70fb      	strb	r3, [r7, #3]
 8003aca:	4613      	mov	r3, r2
 8003acc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003ace:	bf00      	nop
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003ae2:	bf00      	nop
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aee:	b480      	push	{r7}
 8003af0:	b083      	sub	sp, #12
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003af6:	bf00      	nop
 8003af8:	370c      	adds	r7, #12
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr

08003b42 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b50:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b58:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d150      	bne.n	8003c0a <I2C_MasterTransmit_TXE+0xc8>
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
 8003b6a:	2b21      	cmp	r3, #33	; 0x21
 8003b6c:	d14d      	bne.n	8003c0a <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	2b08      	cmp	r3, #8
 8003b72:	d01d      	beq.n	8003bb0 <I2C_MasterTransmit_TXE+0x6e>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	d01a      	beq.n	8003bb0 <I2C_MasterTransmit_TXE+0x6e>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b80:	d016      	beq.n	8003bb0 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b90:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2211      	movs	r2, #17
 8003b96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f7ff ff6a 	bl	8003a82 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bae:	e060      	b.n	8003c72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bbe:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d107      	bne.n	8003bfa <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff ff7b 	bl	8003aee <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bf8:	e03b      	b.n	8003c72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7ff ff3d 	bl	8003a82 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c08:	e033      	b.n	8003c72 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003c0a:	7bfb      	ldrb	r3, [r7, #15]
 8003c0c:	2b21      	cmp	r3, #33	; 0x21
 8003c0e:	d005      	beq.n	8003c1c <I2C_MasterTransmit_TXE+0xda>
 8003c10:	7bbb      	ldrb	r3, [r7, #14]
 8003c12:	2b40      	cmp	r3, #64	; 0x40
 8003c14:	d12d      	bne.n	8003c72 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003c16:	7bfb      	ldrb	r3, [r7, #15]
 8003c18:	2b22      	cmp	r3, #34	; 0x22
 8003c1a:	d12a      	bne.n	8003c72 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d108      	bne.n	8003c38 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c34:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003c36:	e01c      	b.n	8003c72 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d103      	bne.n	8003c4c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f88e 	bl	8003d66 <I2C_MemoryTransmit_TXE_BTF>
}
 8003c4a:	e012      	b.n	8003c72 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	781a      	ldrb	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c70:	e7ff      	b.n	8003c72 <I2C_MasterTransmit_TXE+0x130>
 8003c72:	bf00      	nop
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c86:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b21      	cmp	r3, #33	; 0x21
 8003c92:	d164      	bne.n	8003d5e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c98:	b29b      	uxth	r3, r3
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d012      	beq.n	8003cc4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	781a      	ldrb	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	1c5a      	adds	r2, r3, #1
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003cc2:	e04c      	b.n	8003d5e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d01d      	beq.n	8003d06 <I2C_MasterTransmit_BTF+0x8c>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b20      	cmp	r3, #32
 8003cce:	d01a      	beq.n	8003d06 <I2C_MasterTransmit_BTF+0x8c>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cd6:	d016      	beq.n	8003d06 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ce6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2211      	movs	r2, #17
 8003cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff febf 	bl	8003a82 <HAL_I2C_MasterTxCpltCallback>
}
 8003d04:	e02b      	b.n	8003d5e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d14:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d24:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d107      	bne.n	8003d50 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff fed0 	bl	8003aee <HAL_I2C_MemTxCpltCallback>
}
 8003d4e:	e006      	b.n	8003d5e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7ff fe92 	bl	8003a82 <HAL_I2C_MasterTxCpltCallback>
}
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b084      	sub	sp, #16
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d74:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d11d      	bne.n	8003dba <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d10b      	bne.n	8003d9e <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d96:	1c9a      	adds	r2, r3, #2
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8003d9c:	e077      	b.n	8003e8e <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	121b      	asrs	r3, r3, #8
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003db8:	e069      	b.n	8003e8e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d10b      	bne.n	8003dda <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003dd8:	e059      	b.n	8003e8e <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d152      	bne.n	8003e88 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	2b22      	cmp	r3, #34	; 0x22
 8003de6:	d10d      	bne.n	8003e04 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df6:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	1c5a      	adds	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e02:	e044      	b.n	8003e8e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d015      	beq.n	8003e3a <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
 8003e10:	2b21      	cmp	r3, #33	; 0x21
 8003e12:	d112      	bne.n	8003e3a <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003e38:	e029      	b.n	8003e8e <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d124      	bne.n	8003e8e <I2C_MemoryTransmit_TXE_BTF+0x128>
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	2b21      	cmp	r3, #33	; 0x21
 8003e48:	d121      	bne.n	8003e8e <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e58:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e68:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f7ff fe34 	bl	8003aee <HAL_I2C_MemTxCpltCallback>
}
 8003e86:	e002      	b.n	8003e8e <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7ff fbf3 	bl	8003674 <I2C_Flush_DR>
}
 8003e8e:	bf00      	nop
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b22      	cmp	r3, #34	; 0x22
 8003ea8:	f040 80b9 	bne.w	800401e <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	2b03      	cmp	r3, #3
 8003ebe:	d921      	bls.n	8003f04 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	b2d2      	uxtb	r2, r2
 8003ecc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	f040 8096 	bne.w	800401e <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f00:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8003f02:	e08c      	b.n	800401e <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d07f      	beq.n	800400c <I2C_MasterReceive_RXNE+0x176>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d002      	beq.n	8003f18 <I2C_MasterReceive_RXNE+0x82>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d179      	bne.n	800400c <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f18:	6878      	ldr	r0, [r7, #4]
 8003f1a:	f001 f83f 	bl	8004f9c <I2C_WaitOnSTOPRequestThroughIT>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d14c      	bne.n	8003fbe <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f32:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685a      	ldr	r2, [r3, #4]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003f42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b40      	cmp	r3, #64	; 0x40
 8003f7c:	d10a      	bne.n	8003f94 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff fdb8 	bl	8003b02 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f92:	e044      	b.n	800401e <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d002      	beq.n	8003fa8 <I2C_MasterReceive_RXNE+0x112>
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	d103      	bne.n	8003fb0 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	631a      	str	r2, [r3, #48]	; 0x30
 8003fae:	e002      	b.n	8003fb6 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2212      	movs	r2, #18
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff fd6d 	bl	8003a96 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003fbc:	e02f      	b.n	800401e <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fcc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd8:	b2d2      	uxtb	r2, r2
 8003fda:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	3b01      	subs	r3, #1
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7fe fb57 	bl	80026b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800400a:	e008      	b.n	800401e <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800401a:	605a      	str	r2, [r3, #4]
}
 800401c:	e7ff      	b.n	800401e <I2C_MasterReceive_RXNE+0x188>
 800401e:	bf00      	nop
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}

08004026 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004026:	b580      	push	{r7, lr}
 8004028:	b084      	sub	sp, #16
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004032:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004038:	b29b      	uxth	r3, r3
 800403a:	2b04      	cmp	r3, #4
 800403c:	d11b      	bne.n	8004076 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800404c:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004074:	e0c8      	b.n	8004208 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b03      	cmp	r3, #3
 800407e:	d129      	bne.n	80040d4 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408e:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2b04      	cmp	r3, #4
 8004094:	d00a      	beq.n	80040ac <I2C_MasterReceive_BTF+0x86>
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b02      	cmp	r3, #2
 800409a:	d007      	beq.n	80040ac <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040aa:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	3b01      	subs	r3, #1
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040d2:	e099      	b.n	8004208 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	f040 8081 	bne.w	80041e2 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d002      	beq.n	80040ec <I2C_MasterReceive_BTF+0xc6>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2b10      	cmp	r3, #16
 80040ea:	d108      	bne.n	80040fe <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	e019      	b.n	8004132 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d002      	beq.n	800410a <I2C_MasterReceive_BTF+0xe4>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2b02      	cmp	r3, #2
 8004108:	d108      	bne.n	800411c <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	e00a      	b.n	8004132 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b10      	cmp	r3, #16
 8004120:	d007      	beq.n	8004132 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004130:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	3b01      	subs	r3, #1
 8004152:	b29a      	uxth	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691a      	ldr	r2, [r3, #16]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	3b01      	subs	r3, #1
 8004178:	b29a      	uxth	r2, r3
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800418c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2220      	movs	r2, #32
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b40      	cmp	r3, #64	; 0x40
 80041a0:	d10a      	bne.n	80041b8 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f7ff fca6 	bl	8003b02 <HAL_I2C_MemRxCpltCallback>
}
 80041b6:	e027      	b.n	8004208 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d002      	beq.n	80041cc <I2C_MasterReceive_BTF+0x1a6>
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b20      	cmp	r3, #32
 80041ca:	d103      	bne.n	80041d4 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	631a      	str	r2, [r3, #48]	; 0x30
 80041d2:	e002      	b.n	80041da <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2212      	movs	r2, #18
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7ff fc5b 	bl	8003a96 <HAL_I2C_MasterRxCpltCallback>
}
 80041e0:	e012      	b.n	8004208 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b40      	cmp	r3, #64	; 0x40
 8004222:	d117      	bne.n	8004254 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004228:	2b00      	cmp	r3, #0
 800422a:	d109      	bne.n	8004240 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800423c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800423e:	e067      	b.n	8004310 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004244:	b2db      	uxtb	r3, r3
 8004246:	f043 0301 	orr.w	r3, r3, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	611a      	str	r2, [r3, #16]
}
 8004252:	e05d      	b.n	8004310 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425c:	d133      	bne.n	80042c6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b21      	cmp	r3, #33	; 0x21
 8004268:	d109      	bne.n	800427e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	b2db      	uxtb	r3, r3
 8004270:	461a      	mov	r2, r3
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800427a:	611a      	str	r2, [r3, #16]
 800427c:	e008      	b.n	8004290 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	b2da      	uxtb	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	2b00      	cmp	r3, #0
 8004296:	d004      	beq.n	80042a2 <I2C_Master_SB+0x92>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d108      	bne.n	80042b4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d032      	beq.n	8004310 <I2C_Master_SB+0x100>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02d      	beq.n	8004310 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685a      	ldr	r2, [r3, #4]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042c2:	605a      	str	r2, [r3, #4]
}
 80042c4:	e024      	b.n	8004310 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10e      	bne.n	80042ec <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	11db      	asrs	r3, r3, #7
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0306 	and.w	r3, r3, #6
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f063 030f 	orn	r3, r3, #15
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]
}
 80042ea:	e011      	b.n	8004310 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d10d      	bne.n	8004310 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	11db      	asrs	r3, r3, #7
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	f003 0306 	and.w	r3, r3, #6
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f063 030e 	orn	r3, r3, #14
 8004308:	b2da      	uxtb	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	611a      	str	r2, [r3, #16]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	b2da      	uxtb	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004334:	2b00      	cmp	r3, #0
 8004336:	d004      	beq.n	8004342 <I2C_Master_ADD10+0x26>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800433c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d108      	bne.n	8004354 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00c      	beq.n	8004364 <I2C_Master_ADD10+0x48>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004350:	2b00      	cmp	r3, #0
 8004352:	d007      	beq.n	8004364 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004362:	605a      	str	r2, [r3, #4]
  }
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004370:	b480      	push	{r7}
 8004372:	b091      	sub	sp, #68	; 0x44
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800437e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004386:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b22      	cmp	r3, #34	; 0x22
 8004398:	f040 8169 	bne.w	800466e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d10f      	bne.n	80043c4 <I2C_Master_ADDR+0x54>
 80043a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043a8:	2b40      	cmp	r3, #64	; 0x40
 80043aa:	d10b      	bne.n	80043c4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ac:	2300      	movs	r3, #0
 80043ae:	633b      	str	r3, [r7, #48]	; 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	695b      	ldr	r3, [r3, #20]
 80043b6:	633b      	str	r3, [r7, #48]	; 0x30
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	633b      	str	r3, [r7, #48]	; 0x30
 80043c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c2:	e160      	b.n	8004686 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11d      	bne.n	8004408 <I2C_Master_ADDR+0x98>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043d4:	d118      	bne.n	8004408 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d6:	2300      	movs	r3, #0
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043fa:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004400:	1c5a      	adds	r2, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	651a      	str	r2, [r3, #80]	; 0x50
 8004406:	e13e      	b.n	8004686 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	2b00      	cmp	r3, #0
 8004410:	d113      	bne.n	800443a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004412:	2300      	movs	r3, #0
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004436:	601a      	str	r2, [r3, #0]
 8004438:	e115      	b.n	8004666 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	f040 808a 	bne.w	800455a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004448:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800444c:	d137      	bne.n	80044be <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004468:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800446c:	d113      	bne.n	8004496 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800447c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800447e:	2300      	movs	r3, #0
 8004480:	627b      	str	r3, [r7, #36]	; 0x24
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
 8004492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004494:	e0e7      	b.n	8004666 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004496:	2300      	movs	r3, #0
 8004498:	623b      	str	r3, [r7, #32]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	623b      	str	r3, [r7, #32]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	623b      	str	r3, [r7, #32]
 80044aa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ba:	601a      	str	r2, [r3, #0]
 80044bc:	e0d3      	b.n	8004666 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d02e      	beq.n	8004522 <I2C_Master_ADDR+0x1b2>
 80044c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c6:	2b20      	cmp	r3, #32
 80044c8:	d02b      	beq.n	8004522 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044cc:	2b12      	cmp	r3, #18
 80044ce:	d102      	bne.n	80044d6 <I2C_Master_ADDR+0x166>
 80044d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d125      	bne.n	8004522 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	2b04      	cmp	r3, #4
 80044da:	d00e      	beq.n	80044fa <I2C_Master_ADDR+0x18a>
 80044dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d00b      	beq.n	80044fa <I2C_Master_ADDR+0x18a>
 80044e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d008      	beq.n	80044fa <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681a      	ldr	r2, [r3, #0]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f6:	601a      	str	r2, [r3, #0]
 80044f8:	e007      	b.n	800450a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004508:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800450a:	2300      	movs	r3, #0
 800450c:	61fb      	str	r3, [r7, #28]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	e0a1      	b.n	8004666 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004532:	2300      	movs	r3, #0
 8004534:	61bb      	str	r3, [r7, #24]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	61bb      	str	r3, [r7, #24]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	e085      	b.n	8004666 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800455e:	b29b      	uxth	r3, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d14d      	bne.n	8004600 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004566:	2b04      	cmp	r3, #4
 8004568:	d016      	beq.n	8004598 <I2C_Master_ADDR+0x228>
 800456a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456c:	2b02      	cmp	r3, #2
 800456e:	d013      	beq.n	8004598 <I2C_Master_ADDR+0x228>
 8004570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004572:	2b10      	cmp	r3, #16
 8004574:	d010      	beq.n	8004598 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004584:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e007      	b.n	80045a8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045a6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045b6:	d117      	bne.n	80045e8 <I2C_Master_ADDR+0x278>
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045be:	d00b      	beq.n	80045d8 <I2C_Master_ADDR+0x268>
 80045c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d008      	beq.n	80045d8 <I2C_Master_ADDR+0x268>
 80045c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d005      	beq.n	80045d8 <I2C_Master_ADDR+0x268>
 80045cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d002      	beq.n	80045d8 <I2C_Master_ADDR+0x268>
 80045d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d4:	2b20      	cmp	r3, #32
 80045d6:	d107      	bne.n	80045e8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045e6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695b      	ldr	r3, [r3, #20]
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	e032      	b.n	8004666 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800460e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800461a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800461e:	d117      	bne.n	8004650 <I2C_Master_ADDR+0x2e0>
 8004620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004622:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004626:	d00b      	beq.n	8004640 <I2C_Master_ADDR+0x2d0>
 8004628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800462a:	2b01      	cmp	r3, #1
 800462c:	d008      	beq.n	8004640 <I2C_Master_ADDR+0x2d0>
 800462e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004630:	2b08      	cmp	r3, #8
 8004632:	d005      	beq.n	8004640 <I2C_Master_ADDR+0x2d0>
 8004634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004636:	2b10      	cmp	r3, #16
 8004638:	d002      	beq.n	8004640 <I2C_Master_ADDR+0x2d0>
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	2b20      	cmp	r3, #32
 800463e:	d107      	bne.n	8004650 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800464e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004650:	2300      	movs	r3, #0
 8004652:	613b      	str	r3, [r7, #16]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	613b      	str	r3, [r7, #16]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800466c:	e00b      	b.n	8004686 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
}
 8004684:	e7ff      	b.n	8004686 <I2C_Master_ADDR+0x316>
 8004686:	bf00      	nop
 8004688:	3744      	adds	r7, #68	; 0x44
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004692:	b580      	push	{r7, lr}
 8004694:	b084      	sub	sp, #16
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02b      	beq.n	8004704 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	1c5a      	adds	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d114      	bne.n	8004704 <I2C_SlaveTransmit_TXE+0x72>
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b29      	cmp	r3, #41	; 0x29
 80046de:	d111      	bne.n	8004704 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046ee:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2221      	movs	r2, #33	; 0x21
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2228      	movs	r2, #40	; 0x28
 80046fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7fd ffc8 	bl	8002694 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004704:	bf00      	nop
 8004706:	3710      	adds	r7, #16
 8004708:	46bd      	mov	sp, r7
 800470a:	bd80      	pop	{r7, pc}

0800470c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d011      	beq.n	8004742 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004722:	781a      	ldrb	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	1c5a      	adds	r2, r3, #1
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004738:	b29b      	uxth	r3, r3
 800473a:	3b01      	subs	r3, #1
 800473c:	b29a      	uxth	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b084      	sub	sp, #16
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d02c      	beq.n	80047c2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004772:	b2d2      	uxtb	r2, r2
 8004774:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004784:	b29b      	uxth	r3, r3
 8004786:	3b01      	subs	r3, #1
 8004788:	b29a      	uxth	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004792:	b29b      	uxth	r3, r3
 8004794:	2b00      	cmp	r3, #0
 8004796:	d114      	bne.n	80047c2 <I2C_SlaveReceive_RXNE+0x74>
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	2b2a      	cmp	r3, #42	; 0x2a
 800479c:	d111      	bne.n	80047c2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ac:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2222      	movs	r2, #34	; 0x22
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2228      	movs	r2, #40	; 0x28
 80047b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff f974 	bl	8003aaa <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d012      	beq.n	8004802 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691a      	ldr	r2, [r3, #16]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	b2d2      	uxtb	r2, r2
 80047e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004802:	bf00      	nop
 8004804:	370c      	adds	r7, #12
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004818:	2300      	movs	r3, #0
 800481a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004822:	b2db      	uxtb	r3, r3
 8004824:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004828:	2b28      	cmp	r3, #40	; 0x28
 800482a:	d125      	bne.n	8004878 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800483a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004846:	2301      	movs	r3, #1
 8004848:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	81bb      	strh	r3, [r7, #12]
 800485a:	e002      	b.n	8004862 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	699b      	ldr	r3, [r3, #24]
 8004860:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800486a:	89ba      	ldrh	r2, [r7, #12]
 800486c:	7bfb      	ldrb	r3, [r7, #15]
 800486e:	4619      	mov	r1, r3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff f924 	bl	8003abe <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004876:	e00e      	b.n	8004896 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004878:	2300      	movs	r3, #0
 800487a:	60bb      	str	r3, [r7, #8]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	60bb      	str	r3, [r7, #8]
 800488c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004896:	bf00      	nop
 8004898:	3710      	adds	r7, #16
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ae:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	685a      	ldr	r2, [r3, #4]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048be:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80048c0:	2300      	movs	r3, #0
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	60bb      	str	r3, [r7, #8]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ec:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048fc:	d172      	bne.n	80049e4 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	2b22      	cmp	r3, #34	; 0x22
 8004902:	d002      	beq.n	800490a <I2C_Slave_STOPF+0x6a>
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b2a      	cmp	r3, #42	; 0x2a
 8004908:	d135      	bne.n	8004976 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	b29a      	uxth	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d005      	beq.n	800492e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004926:	f043 0204 	orr.w	r2, r3, #4
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800493c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe fba5 	bl	8003092 <HAL_DMA_GetState>
 8004948:	4603      	mov	r3, r0
 800494a:	2b01      	cmp	r3, #1
 800494c:	d049      	beq.n	80049e2 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004952:	4a69      	ldr	r2, [pc, #420]	; (8004af8 <I2C_Slave_STOPF+0x258>)
 8004954:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe fb77 	bl	800304e <HAL_DMA_Abort_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d03d      	beq.n	80049e2 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800496a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004974:	e035      	b.n	80049e2 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	b29a      	uxth	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f043 0204 	orr.w	r2, r3, #4
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe fb6f 	bl	8003092 <HAL_DMA_GetState>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d014      	beq.n	80049e4 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049be:	4a4e      	ldr	r2, [pc, #312]	; (8004af8 <I2C_Slave_STOPF+0x258>)
 80049c0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fe fb41 	bl	800304e <HAL_DMA_Abort_IT>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d008      	beq.n	80049e4 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049dc:	4610      	mov	r0, r2
 80049de:	4798      	blx	r3
 80049e0:	e000      	b.n	80049e4 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049e2:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d03e      	beq.n	8004a6c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	695b      	ldr	r3, [r3, #20]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d112      	bne.n	8004a22 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	695b      	ldr	r3, [r3, #20]
 8004a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2c:	2b40      	cmp	r3, #64	; 0x40
 8004a2e:	d112      	bne.n	8004a56 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d005      	beq.n	8004a6c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a64:	f043 0204 	orr.w	r2, r3, #4
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d003      	beq.n	8004a7c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8b7 	bl	8004be8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a7a:	e039      	b.n	8004af0 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	2b2a      	cmp	r3, #42	; 0x2a
 8004a80:	d109      	bne.n	8004a96 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2228      	movs	r2, #40	; 0x28
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f7ff f80a 	bl	8003aaa <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	2b28      	cmp	r3, #40	; 0x28
 8004aa0:	d111      	bne.n	8004ac6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a15      	ldr	r2, [pc, #84]	; (8004afc <I2C_Slave_STOPF+0x25c>)
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2220      	movs	r2, #32
 8004ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7ff f80b 	bl	8003ada <HAL_I2C_ListenCpltCallback>
}
 8004ac4:	e014      	b.n	8004af0 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	2b22      	cmp	r3, #34	; 0x22
 8004acc:	d002      	beq.n	8004ad4 <I2C_Slave_STOPF+0x234>
 8004ace:	7bfb      	ldrb	r3, [r7, #15]
 8004ad0:	2b22      	cmp	r3, #34	; 0x22
 8004ad2:	d10d      	bne.n	8004af0 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fe ffdd 	bl	8003aaa <HAL_I2C_SlaveRxCpltCallback>
}
 8004af0:	bf00      	nop
 8004af2:	3710      	adds	r7, #16
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	08004e4d 	.word	0x08004e4d
 8004afc:	ffff0000 	.word	0xffff0000

08004b00 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b14:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d002      	beq.n	8004b22 <I2C_Slave_AF+0x22>
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	2b20      	cmp	r3, #32
 8004b20:	d129      	bne.n	8004b76 <I2C_Slave_AF+0x76>
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b28      	cmp	r3, #40	; 0x28
 8004b26:	d126      	bne.n	8004b76 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a2e      	ldr	r2, [pc, #184]	; (8004be4 <I2C_Slave_AF+0xe4>)
 8004b2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b3c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b46:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b56:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7fe ffb3 	bl	8003ada <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004b74:	e031      	b.n	8004bda <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
 8004b78:	2b21      	cmp	r3, #33	; 0x21
 8004b7a:	d129      	bne.n	8004bd0 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a19      	ldr	r2, [pc, #100]	; (8004be4 <I2C_Slave_AF+0xe4>)
 8004b80:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2221      	movs	r2, #33	; 0x21
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ba6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bb0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fe fd56 	bl	8003674 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f7fd fd63 	bl	8002694 <HAL_I2C_SlaveTxCpltCallback>
}
 8004bce:	e004      	b.n	8004bda <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd8:	615a      	str	r2, [r3, #20]
}
 8004bda:	bf00      	nop
 8004bdc:	3710      	adds	r7, #16
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	ffff0000 	.word	0xffff0000

08004be8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfe:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c00:	7bbb      	ldrb	r3, [r7, #14]
 8004c02:	2b10      	cmp	r3, #16
 8004c04:	d002      	beq.n	8004c0c <I2C_ITError+0x24>
 8004c06:	7bbb      	ldrb	r3, [r7, #14]
 8004c08:	2b40      	cmp	r3, #64	; 0x40
 8004c0a:	d10a      	bne.n	8004c22 <I2C_ITError+0x3a>
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	2b22      	cmp	r3, #34	; 0x22
 8004c10:	d107      	bne.n	8004c22 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c20:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c28:	2b28      	cmp	r3, #40	; 0x28
 8004c2a:	d107      	bne.n	8004c3c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2228      	movs	r2, #40	; 0x28
 8004c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c3a:	e015      	b.n	8004c68 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c4a:	d00a      	beq.n	8004c62 <I2C_ITError+0x7a>
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	2b60      	cmp	r3, #96	; 0x60
 8004c50:	d007      	beq.n	8004c62 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2220      	movs	r2, #32
 8004c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c76:	d162      	bne.n	8004d3e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685a      	ldr	r2, [r3, #4]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c86:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d020      	beq.n	8004cd8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	4a6a      	ldr	r2, [pc, #424]	; (8004e44 <I2C_ITError+0x25c>)
 8004c9c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe f9d3 	bl	800304e <HAL_DMA_Abort_IT>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8089 	beq.w	8004dc2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f022 0201 	bic.w	r2, r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cd2:	4610      	mov	r0, r2
 8004cd4:	4798      	blx	r3
 8004cd6:	e074      	b.n	8004dc2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	4a59      	ldr	r2, [pc, #356]	; (8004e44 <I2C_ITError+0x25c>)
 8004cde:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7fe f9b2 	bl	800304e <HAL_DMA_Abort_IT>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d068      	beq.n	8004dc2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d10b      	bne.n	8004d16 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	b2d2      	uxtb	r2, r2
 8004d0a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0201 	bic.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d38:	4610      	mov	r0, r2
 8004d3a:	4798      	blx	r3
 8004d3c:	e041      	b.n	8004dc2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b60      	cmp	r3, #96	; 0x60
 8004d48:	d125      	bne.n	8004d96 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d10b      	bne.n	8004d7e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	691a      	ldr	r2, [r3, #16]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d70:	b2d2      	uxtb	r2, r2
 8004d72:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d78:	1c5a      	adds	r2, r3, #1
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fe fec1 	bl	8003b16 <HAL_I2C_AbortCpltCallback>
 8004d94:	e015      	b.n	8004dc2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da0:	2b40      	cmp	r3, #64	; 0x40
 8004da2:	d10b      	bne.n	8004dbc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	b2d2      	uxtb	r2, r2
 8004db0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7fd fc7b 	bl	80026b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10e      	bne.n	8004df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d109      	bne.n	8004df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d104      	bne.n	8004df0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004dfe:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e06:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	f003 0304 	and.w	r3, r3, #4
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d113      	bne.n	8004e3c <I2C_ITError+0x254>
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b28      	cmp	r3, #40	; 0x28
 8004e18:	d110      	bne.n	8004e3c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <I2C_ITError+0x260>)
 8004e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f7fe fe4f 	bl	8003ada <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e3c:	bf00      	nop
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	08004e4d 	.word	0x08004e4d
 8004e48:	ffff0000 	.word	0xffff0000

08004e4c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e54:	2300      	movs	r3, #0
 8004e56:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e5c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e64:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e66:	4b4b      	ldr	r3, [pc, #300]	; (8004f94 <I2C_DMAAbort+0x148>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	08db      	lsrs	r3, r3, #3
 8004e6c:	4a4a      	ldr	r2, [pc, #296]	; (8004f98 <I2C_DMAAbort+0x14c>)
 8004e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e72:	0a1a      	lsrs	r2, r3, #8
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	00da      	lsls	r2, r3, #3
 8004e7c:	1ad3      	subs	r3, r2, r3
 8004e7e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f043 0220 	orr.w	r2, r3, #32
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004e92:	e00a      	b.n	8004eaa <I2C_DMAAbort+0x5e>
    }
    count--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3b01      	subs	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ea4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea8:	d0ea      	beq.n	8004e80 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	2200      	movs	r2, #0
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eec:	2200      	movs	r2, #0
 8004eee:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d003      	beq.n	8004f00 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	2200      	movs	r2, #0
 8004efe:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0201 	bic.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b60      	cmp	r3, #96	; 0x60
 8004f1a:	d10e      	bne.n	8004f3a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2220      	movs	r2, #32
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f32:	6978      	ldr	r0, [r7, #20]
 8004f34:	f7fe fdef 	bl	8003b16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f38:	e027      	b.n	8004f8a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f3a:	7cfb      	ldrb	r3, [r7, #19]
 8004f3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f40:	2b28      	cmp	r3, #40	; 0x28
 8004f42:	d117      	bne.n	8004f74 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	2228      	movs	r2, #40	; 0x28
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f72:	e007      	b.n	8004f84 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f84:	6978      	ldr	r0, [r7, #20]
 8004f86:	f7fd fb97 	bl	80026b8 <HAL_I2C_ErrorCallback>
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	20000078 	.word	0x20000078
 8004f98:	14f8b589 	.word	0x14f8b589

08004f9c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	08db      	lsrs	r3, r3, #3
 8004fae:	4a13      	ldr	r2, [pc, #76]	; (8004ffc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	0a1a      	lsrs	r2, r3, #8
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d107      	bne.n	8004fda <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fce:	f043 0220 	orr.w	r2, r3, #32
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e008      	b.n	8004fec <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fe8:	d0e9      	beq.n	8004fbe <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	20000078 	.word	0x20000078
 8004ffc:	14f8b589 	.word	0x14f8b589

08005000 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005010:	d103      	bne.n	800501a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005018:	e007      	b.n	800502a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005022:	d102      	bne.n	800502a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2208      	movs	r2, #8
 8005028:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800502a:	bf00      	nop
 800502c:	370c      	adds	r7, #12
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
	...

08005038 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e267      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0301 	and.w	r3, r3, #1
 8005052:	2b00      	cmp	r3, #0
 8005054:	d075      	beq.n	8005142 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005056:	4b88      	ldr	r3, [pc, #544]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f003 030c 	and.w	r3, r3, #12
 800505e:	2b04      	cmp	r3, #4
 8005060:	d00c      	beq.n	800507c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005062:	4b85      	ldr	r3, [pc, #532]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800506a:	2b08      	cmp	r3, #8
 800506c:	d112      	bne.n	8005094 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800506e:	4b82      	ldr	r3, [pc, #520]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005076:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800507a:	d10b      	bne.n	8005094 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	4b7e      	ldr	r3, [pc, #504]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d05b      	beq.n	8005140 <HAL_RCC_OscConfig+0x108>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d157      	bne.n	8005140 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e242      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800509c:	d106      	bne.n	80050ac <HAL_RCC_OscConfig+0x74>
 800509e:	4b76      	ldr	r3, [pc, #472]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a75      	ldr	r2, [pc, #468]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e01d      	b.n	80050e8 <HAL_RCC_OscConfig+0xb0>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050b4:	d10c      	bne.n	80050d0 <HAL_RCC_OscConfig+0x98>
 80050b6:	4b70      	ldr	r3, [pc, #448]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a6f      	ldr	r2, [pc, #444]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	4b6d      	ldr	r3, [pc, #436]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a6c      	ldr	r2, [pc, #432]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050cc:	6013      	str	r3, [r2, #0]
 80050ce:	e00b      	b.n	80050e8 <HAL_RCC_OscConfig+0xb0>
 80050d0:	4b69      	ldr	r3, [pc, #420]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a68      	ldr	r2, [pc, #416]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	4b66      	ldr	r3, [pc, #408]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a65      	ldr	r2, [pc, #404]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80050e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d013      	beq.n	8005118 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050f0:	f7fd fdfc 	bl	8002cec <HAL_GetTick>
 80050f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050f6:	e008      	b.n	800510a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80050f8:	f7fd fdf8 	bl	8002cec <HAL_GetTick>
 80050fc:	4602      	mov	r2, r0
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	1ad3      	subs	r3, r2, r3
 8005102:	2b64      	cmp	r3, #100	; 0x64
 8005104:	d901      	bls.n	800510a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005106:	2303      	movs	r3, #3
 8005108:	e207      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510a:	4b5b      	ldr	r3, [pc, #364]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005112:	2b00      	cmp	r3, #0
 8005114:	d0f0      	beq.n	80050f8 <HAL_RCC_OscConfig+0xc0>
 8005116:	e014      	b.n	8005142 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005118:	f7fd fde8 	bl	8002cec <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005120:	f7fd fde4 	bl	8002cec <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b64      	cmp	r3, #100	; 0x64
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e1f3      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005132:	4b51      	ldr	r3, [pc, #324]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f0      	bne.n	8005120 <HAL_RCC_OscConfig+0xe8>
 800513e:	e000      	b.n	8005142 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0302 	and.w	r3, r3, #2
 800514a:	2b00      	cmp	r3, #0
 800514c:	d063      	beq.n	8005216 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800514e:	4b4a      	ldr	r3, [pc, #296]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 030c 	and.w	r3, r3, #12
 8005156:	2b00      	cmp	r3, #0
 8005158:	d00b      	beq.n	8005172 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800515a:	4b47      	ldr	r3, [pc, #284]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005162:	2b08      	cmp	r3, #8
 8005164:	d11c      	bne.n	80051a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005166:	4b44      	ldr	r3, [pc, #272]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d116      	bne.n	80051a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005172:	4b41      	ldr	r3, [pc, #260]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d005      	beq.n	800518a <HAL_RCC_OscConfig+0x152>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d001      	beq.n	800518a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e1c7      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800518a:	4b3b      	ldr	r3, [pc, #236]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	00db      	lsls	r3, r3, #3
 8005198:	4937      	ldr	r1, [pc, #220]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800519a:	4313      	orrs	r3, r2
 800519c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800519e:	e03a      	b.n	8005216 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d020      	beq.n	80051ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051a8:	4b34      	ldr	r3, [pc, #208]	; (800527c <HAL_RCC_OscConfig+0x244>)
 80051aa:	2201      	movs	r2, #1
 80051ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ae:	f7fd fd9d 	bl	8002cec <HAL_GetTick>
 80051b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051b4:	e008      	b.n	80051c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051b6:	f7fd fd99 	bl	8002cec <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e1a8      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051c8:	4b2b      	ldr	r3, [pc, #172]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0f0      	beq.n	80051b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051d4:	4b28      	ldr	r3, [pc, #160]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	691b      	ldr	r3, [r3, #16]
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	4925      	ldr	r1, [pc, #148]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051ea:	4b24      	ldr	r3, [pc, #144]	; (800527c <HAL_RCC_OscConfig+0x244>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd fd7c 	bl	8002cec <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f8:	f7fd fd78 	bl	8002cec <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e187      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520a:	4b1b      	ldr	r3, [pc, #108]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0308 	and.w	r3, r3, #8
 800521e:	2b00      	cmp	r3, #0
 8005220:	d036      	beq.n	8005290 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d016      	beq.n	8005258 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800522a:	4b15      	ldr	r3, [pc, #84]	; (8005280 <HAL_RCC_OscConfig+0x248>)
 800522c:	2201      	movs	r2, #1
 800522e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005230:	f7fd fd5c 	bl	8002cec <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005238:	f7fd fd58 	bl	8002cec <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e167      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524a:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <HAL_RCC_OscConfig+0x240>)
 800524c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d0f0      	beq.n	8005238 <HAL_RCC_OscConfig+0x200>
 8005256:	e01b      	b.n	8005290 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005258:	4b09      	ldr	r3, [pc, #36]	; (8005280 <HAL_RCC_OscConfig+0x248>)
 800525a:	2200      	movs	r2, #0
 800525c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800525e:	f7fd fd45 	bl	8002cec <HAL_GetTick>
 8005262:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005264:	e00e      	b.n	8005284 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005266:	f7fd fd41 	bl	8002cec <HAL_GetTick>
 800526a:	4602      	mov	r2, r0
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	2b02      	cmp	r3, #2
 8005272:	d907      	bls.n	8005284 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e150      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
 8005278:	40023800 	.word	0x40023800
 800527c:	42470000 	.word	0x42470000
 8005280:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005284:	4b88      	ldr	r3, [pc, #544]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005286:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d1ea      	bne.n	8005266 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	f000 8097 	beq.w	80053cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052a2:	4b81      	ldr	r3, [pc, #516]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10f      	bne.n	80052ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	2300      	movs	r3, #0
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	4b7d      	ldr	r3, [pc, #500]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b6:	4a7c      	ldr	r2, [pc, #496]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052bc:	6413      	str	r3, [r2, #64]	; 0x40
 80052be:	4b7a      	ldr	r3, [pc, #488]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c6:	60bb      	str	r3, [r7, #8]
 80052c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052ca:	2301      	movs	r3, #1
 80052cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ce:	4b77      	ldr	r3, [pc, #476]	; (80054ac <HAL_RCC_OscConfig+0x474>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d118      	bne.n	800530c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052da:	4b74      	ldr	r3, [pc, #464]	; (80054ac <HAL_RCC_OscConfig+0x474>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a73      	ldr	r2, [pc, #460]	; (80054ac <HAL_RCC_OscConfig+0x474>)
 80052e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052e6:	f7fd fd01 	bl	8002cec <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ee:	f7fd fcfd 	bl	8002cec <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e10c      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005300:	4b6a      	ldr	r3, [pc, #424]	; (80054ac <HAL_RCC_OscConfig+0x474>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d106      	bne.n	8005322 <HAL_RCC_OscConfig+0x2ea>
 8005314:	4b64      	ldr	r3, [pc, #400]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005318:	4a63      	ldr	r2, [pc, #396]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800531a:	f043 0301 	orr.w	r3, r3, #1
 800531e:	6713      	str	r3, [r2, #112]	; 0x70
 8005320:	e01c      	b.n	800535c <HAL_RCC_OscConfig+0x324>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	2b05      	cmp	r3, #5
 8005328:	d10c      	bne.n	8005344 <HAL_RCC_OscConfig+0x30c>
 800532a:	4b5f      	ldr	r3, [pc, #380]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	4a5e      	ldr	r2, [pc, #376]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005330:	f043 0304 	orr.w	r3, r3, #4
 8005334:	6713      	str	r3, [r2, #112]	; 0x70
 8005336:	4b5c      	ldr	r3, [pc, #368]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800533a:	4a5b      	ldr	r2, [pc, #364]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800533c:	f043 0301 	orr.w	r3, r3, #1
 8005340:	6713      	str	r3, [r2, #112]	; 0x70
 8005342:	e00b      	b.n	800535c <HAL_RCC_OscConfig+0x324>
 8005344:	4b58      	ldr	r3, [pc, #352]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	4a57      	ldr	r2, [pc, #348]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800534a:	f023 0301 	bic.w	r3, r3, #1
 800534e:	6713      	str	r3, [r2, #112]	; 0x70
 8005350:	4b55      	ldr	r3, [pc, #340]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005354:	4a54      	ldr	r2, [pc, #336]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005356:	f023 0304 	bic.w	r3, r3, #4
 800535a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	689b      	ldr	r3, [r3, #8]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d015      	beq.n	8005390 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005364:	f7fd fcc2 	bl	8002cec <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800536a:	e00a      	b.n	8005382 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800536c:	f7fd fcbe 	bl	8002cec <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	f241 3288 	movw	r2, #5000	; 0x1388
 800537a:	4293      	cmp	r3, r2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e0cb      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005382:	4b49      	ldr	r3, [pc, #292]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0ee      	beq.n	800536c <HAL_RCC_OscConfig+0x334>
 800538e:	e014      	b.n	80053ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005390:	f7fd fcac 	bl	8002cec <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005396:	e00a      	b.n	80053ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005398:	f7fd fca8 	bl	8002cec <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e0b5      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053ae:	4b3e      	ldr	r3, [pc, #248]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1ee      	bne.n	8005398 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d105      	bne.n	80053cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053c0:	4b39      	ldr	r3, [pc, #228]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	4a38      	ldr	r2, [pc, #224]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	699b      	ldr	r3, [r3, #24]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 80a1 	beq.w	8005518 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053d6:	4b34      	ldr	r3, [pc, #208]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	f003 030c 	and.w	r3, r3, #12
 80053de:	2b08      	cmp	r3, #8
 80053e0:	d05c      	beq.n	800549c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d141      	bne.n	800546e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ea:	4b31      	ldr	r3, [pc, #196]	; (80054b0 <HAL_RCC_OscConfig+0x478>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053f0:	f7fd fc7c 	bl	8002cec <HAL_GetTick>
 80053f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f6:	e008      	b.n	800540a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f8:	f7fd fc78 	bl	8002cec <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d901      	bls.n	800540a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e087      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800540a:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1f0      	bne.n	80053f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	431a      	orrs	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542c:	085b      	lsrs	r3, r3, #1
 800542e:	3b01      	subs	r3, #1
 8005430:	041b      	lsls	r3, r3, #16
 8005432:	431a      	orrs	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	061b      	lsls	r3, r3, #24
 800543a:	491b      	ldr	r1, [pc, #108]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005440:	4b1b      	ldr	r3, [pc, #108]	; (80054b0 <HAL_RCC_OscConfig+0x478>)
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005446:	f7fd fc51 	bl	8002cec <HAL_GetTick>
 800544a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800544c:	e008      	b.n	8005460 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800544e:	f7fd fc4d 	bl	8002cec <HAL_GetTick>
 8005452:	4602      	mov	r2, r0
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	1ad3      	subs	r3, r2, r3
 8005458:	2b02      	cmp	r3, #2
 800545a:	d901      	bls.n	8005460 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e05c      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005460:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005468:	2b00      	cmp	r3, #0
 800546a:	d0f0      	beq.n	800544e <HAL_RCC_OscConfig+0x416>
 800546c:	e054      	b.n	8005518 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546e:	4b10      	ldr	r3, [pc, #64]	; (80054b0 <HAL_RCC_OscConfig+0x478>)
 8005470:	2200      	movs	r2, #0
 8005472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fd fc3a 	bl	8002cec <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547c:	f7fd fc36 	bl	8002cec <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b02      	cmp	r3, #2
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e045      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_OscConfig+0x470>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x444>
 800549a:	e03d      	b.n	8005518 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d107      	bne.n	80054b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e038      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
 80054a8:	40023800 	.word	0x40023800
 80054ac:	40007000 	.word	0x40007000
 80054b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054b4:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <HAL_RCC_OscConfig+0x4ec>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d028      	beq.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d121      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054da:	429a      	cmp	r2, r3
 80054dc:	d11a      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054e4:	4013      	ands	r3, r2
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d111      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054fa:	085b      	lsrs	r3, r3, #1
 80054fc:	3b01      	subs	r3, #1
 80054fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005500:	429a      	cmp	r2, r3
 8005502:	d107      	bne.n	8005514 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005510:	429a      	cmp	r2, r3
 8005512:	d001      	beq.n	8005518 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e000      	b.n	800551a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3718      	adds	r7, #24
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40023800 	.word	0x40023800

08005528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e0cc      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800553c:	4b68      	ldr	r3, [pc, #416]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0307 	and.w	r3, r3, #7
 8005544:	683a      	ldr	r2, [r7, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d90c      	bls.n	8005564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800554a:	4b65      	ldr	r3, [pc, #404]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005552:	4b63      	ldr	r3, [pc, #396]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	429a      	cmp	r2, r3
 800555e:	d001      	beq.n	8005564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0b8      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d020      	beq.n	80055b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0304 	and.w	r3, r3, #4
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800557c:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	4a58      	ldr	r2, [pc, #352]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4a52      	ldr	r2, [pc, #328]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800559e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055a0:	4b50      	ldr	r3, [pc, #320]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	494d      	ldr	r1, [pc, #308]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d044      	beq.n	8005648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d107      	bne.n	80055d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c6:	4b47      	ldr	r3, [pc, #284]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d119      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e07f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d003      	beq.n	80055e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d107      	bne.n	80055f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055e6:	4b3f      	ldr	r3, [pc, #252]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d109      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e06f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055f6:	4b3b      	ldr	r3, [pc, #236]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0302 	and.w	r3, r3, #2
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e067      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005606:	4b37      	ldr	r3, [pc, #220]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f023 0203 	bic.w	r2, r3, #3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	4934      	ldr	r1, [pc, #208]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005614:	4313      	orrs	r3, r2
 8005616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005618:	f7fd fb68 	bl	8002cec <HAL_GetTick>
 800561c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800561e:	e00a      	b.n	8005636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005620:	f7fd fb64 	bl	8002cec <HAL_GetTick>
 8005624:	4602      	mov	r2, r0
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	f241 3288 	movw	r2, #5000	; 0x1388
 800562e:	4293      	cmp	r3, r2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e04f      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	4b2b      	ldr	r3, [pc, #172]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f003 020c 	and.w	r2, r3, #12
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	429a      	cmp	r2, r3
 8005646:	d1eb      	bne.n	8005620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005648:	4b25      	ldr	r3, [pc, #148]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	429a      	cmp	r2, r3
 8005654:	d20c      	bcs.n	8005670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005656:	4b22      	ldr	r3, [pc, #136]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	b2d2      	uxtb	r2, r2
 800565c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0307 	and.w	r3, r3, #7
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d001      	beq.n	8005670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e032      	b.n	80056d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800567c:	4b19      	ldr	r3, [pc, #100]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	4916      	ldr	r1, [pc, #88]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800568a:	4313      	orrs	r3, r2
 800568c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d009      	beq.n	80056ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800569a:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	490e      	ldr	r1, [pc, #56]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ae:	f000 f821 	bl	80056f4 <HAL_RCC_GetSysClockFreq>
 80056b2:	4602      	mov	r2, r0
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	091b      	lsrs	r3, r3, #4
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	490a      	ldr	r1, [pc, #40]	; (80056e8 <HAL_RCC_ClockConfig+0x1c0>)
 80056c0:	5ccb      	ldrb	r3, [r1, r3]
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	4a09      	ldr	r2, [pc, #36]	; (80056ec <HAL_RCC_ClockConfig+0x1c4>)
 80056c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <HAL_RCC_ClockConfig+0x1c8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fd fac8 	bl	8002c64 <HAL_InitTick>

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40023c00 	.word	0x40023c00
 80056e4:	40023800 	.word	0x40023800
 80056e8:	0800aebc 	.word	0x0800aebc
 80056ec:	20000078 	.word	0x20000078
 80056f0:	2000007c 	.word	0x2000007c

080056f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056f8:	b090      	sub	sp, #64	; 0x40
 80056fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	637b      	str	r3, [r7, #52]	; 0x34
 8005700:	2300      	movs	r3, #0
 8005702:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005704:	2300      	movs	r3, #0
 8005706:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005708:	2300      	movs	r3, #0
 800570a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800570c:	4b59      	ldr	r3, [pc, #356]	; (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f003 030c 	and.w	r3, r3, #12
 8005714:	2b08      	cmp	r3, #8
 8005716:	d00d      	beq.n	8005734 <HAL_RCC_GetSysClockFreq+0x40>
 8005718:	2b08      	cmp	r3, #8
 800571a:	f200 80a1 	bhi.w	8005860 <HAL_RCC_GetSysClockFreq+0x16c>
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <HAL_RCC_GetSysClockFreq+0x34>
 8005722:	2b04      	cmp	r3, #4
 8005724:	d003      	beq.n	800572e <HAL_RCC_GetSysClockFreq+0x3a>
 8005726:	e09b      	b.n	8005860 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005728:	4b53      	ldr	r3, [pc, #332]	; (8005878 <HAL_RCC_GetSysClockFreq+0x184>)
 800572a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800572c:	e09b      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800572e:	4b53      	ldr	r3, [pc, #332]	; (800587c <HAL_RCC_GetSysClockFreq+0x188>)
 8005730:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005732:	e098      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005734:	4b4f      	ldr	r3, [pc, #316]	; (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800573c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800573e:	4b4d      	ldr	r3, [pc, #308]	; (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d028      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800574a:	4b4a      	ldr	r3, [pc, #296]	; (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	099b      	lsrs	r3, r3, #6
 8005750:	2200      	movs	r2, #0
 8005752:	623b      	str	r3, [r7, #32]
 8005754:	627a      	str	r2, [r7, #36]	; 0x24
 8005756:	6a3b      	ldr	r3, [r7, #32]
 8005758:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800575c:	2100      	movs	r1, #0
 800575e:	4b47      	ldr	r3, [pc, #284]	; (800587c <HAL_RCC_GetSysClockFreq+0x188>)
 8005760:	fb03 f201 	mul.w	r2, r3, r1
 8005764:	2300      	movs	r3, #0
 8005766:	fb00 f303 	mul.w	r3, r0, r3
 800576a:	4413      	add	r3, r2
 800576c:	4a43      	ldr	r2, [pc, #268]	; (800587c <HAL_RCC_GetSysClockFreq+0x188>)
 800576e:	fba0 1202 	umull	r1, r2, r0, r2
 8005772:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005774:	460a      	mov	r2, r1
 8005776:	62ba      	str	r2, [r7, #40]	; 0x28
 8005778:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800577a:	4413      	add	r3, r2
 800577c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800577e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005780:	2200      	movs	r2, #0
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	61fa      	str	r2, [r7, #28]
 8005786:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800578a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800578e:	f7fb fa63 	bl	8000c58 <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4613      	mov	r3, r2
 8005798:	63fb      	str	r3, [r7, #60]	; 0x3c
 800579a:	e053      	b.n	8005844 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800579c:	4b35      	ldr	r3, [pc, #212]	; (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	099b      	lsrs	r3, r3, #6
 80057a2:	2200      	movs	r2, #0
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	617a      	str	r2, [r7, #20]
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057ae:	f04f 0b00 	mov.w	fp, #0
 80057b2:	4652      	mov	r2, sl
 80057b4:	465b      	mov	r3, fp
 80057b6:	f04f 0000 	mov.w	r0, #0
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	0159      	lsls	r1, r3, #5
 80057c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057c4:	0150      	lsls	r0, r2, #5
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	ebb2 080a 	subs.w	r8, r2, sl
 80057ce:	eb63 090b 	sbc.w	r9, r3, fp
 80057d2:	f04f 0200 	mov.w	r2, #0
 80057d6:	f04f 0300 	mov.w	r3, #0
 80057da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80057de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80057e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80057e6:	ebb2 0408 	subs.w	r4, r2, r8
 80057ea:	eb63 0509 	sbc.w	r5, r3, r9
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	f04f 0300 	mov.w	r3, #0
 80057f6:	00eb      	lsls	r3, r5, #3
 80057f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057fc:	00e2      	lsls	r2, r4, #3
 80057fe:	4614      	mov	r4, r2
 8005800:	461d      	mov	r5, r3
 8005802:	eb14 030a 	adds.w	r3, r4, sl
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	eb45 030b 	adc.w	r3, r5, fp
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	f04f 0200 	mov.w	r2, #0
 8005812:	f04f 0300 	mov.w	r3, #0
 8005816:	e9d7 4500 	ldrd	r4, r5, [r7]
 800581a:	4629      	mov	r1, r5
 800581c:	028b      	lsls	r3, r1, #10
 800581e:	4621      	mov	r1, r4
 8005820:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005824:	4621      	mov	r1, r4
 8005826:	028a      	lsls	r2, r1, #10
 8005828:	4610      	mov	r0, r2
 800582a:	4619      	mov	r1, r3
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	2200      	movs	r2, #0
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	60fa      	str	r2, [r7, #12]
 8005834:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005838:	f7fb fa0e 	bl	8000c58 <__aeabi_uldivmod>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4613      	mov	r3, r2
 8005842:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <HAL_RCC_GetSysClockFreq+0x180>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	0c1b      	lsrs	r3, r3, #16
 800584a:	f003 0303 	and.w	r3, r3, #3
 800584e:	3301      	adds	r3, #1
 8005850:	005b      	lsls	r3, r3, #1
 8005852:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005858:	fbb2 f3f3 	udiv	r3, r2, r3
 800585c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800585e:	e002      	b.n	8005866 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <HAL_RCC_GetSysClockFreq+0x184>)
 8005862:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005864:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005868:	4618      	mov	r0, r3
 800586a:	3740      	adds	r7, #64	; 0x40
 800586c:	46bd      	mov	sp, r7
 800586e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005872:	bf00      	nop
 8005874:	40023800 	.word	0x40023800
 8005878:	00f42400 	.word	0x00f42400
 800587c:	017d7840 	.word	0x017d7840

08005880 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005884:	4b03      	ldr	r3, [pc, #12]	; (8005894 <HAL_RCC_GetHCLKFreq+0x14>)
 8005886:	681b      	ldr	r3, [r3, #0]
}
 8005888:	4618      	mov	r0, r3
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	20000078 	.word	0x20000078

08005898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800589c:	f7ff fff0 	bl	8005880 <HAL_RCC_GetHCLKFreq>
 80058a0:	4602      	mov	r2, r0
 80058a2:	4b05      	ldr	r3, [pc, #20]	; (80058b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	0a9b      	lsrs	r3, r3, #10
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	4903      	ldr	r1, [pc, #12]	; (80058bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80058ae:	5ccb      	ldrb	r3, [r1, r3]
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40023800 	.word	0x40023800
 80058bc:	0800aecc 	.word	0x0800aecc

080058c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058c4:	f7ff ffdc 	bl	8005880 <HAL_RCC_GetHCLKFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	0b5b      	lsrs	r3, r3, #13
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	4903      	ldr	r1, [pc, #12]	; (80058e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058d6:	5ccb      	ldrb	r3, [r1, r3]
 80058d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058dc:	4618      	mov	r0, r3
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	40023800 	.word	0x40023800
 80058e4:	0800aecc 	.word	0x0800aecc

080058e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d101      	bne.n	80058fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e041      	b.n	800597e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005900:	b2db      	uxtb	r3, r3
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc ff86 	bl	8002820 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2202      	movs	r2, #2
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681a      	ldr	r2, [r3, #0]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3304      	adds	r3, #4
 8005924:	4619      	mov	r1, r3
 8005926:	4610      	mov	r0, r2
 8005928:	f000 fa0c 	bl	8005d44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3708      	adds	r7, #8
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}

08005986 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f003 0302 	and.w	r3, r3, #2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d020      	beq.n	80059ea <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f003 0302 	and.w	r3, r3, #2
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d01b      	beq.n	80059ea <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f06f 0202 	mvn.w	r2, #2
 80059ba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f999 	bl	8005d08 <HAL_TIM_IC_CaptureCallback>
 80059d6:	e005      	b.n	80059e4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f98b 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f99c 	bl	8005d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d020      	beq.n	8005a36 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d01b      	beq.n	8005a36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f06f 0204 	mvn.w	r2, #4
 8005a06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f973 	bl	8005d08 <HAL_TIM_IC_CaptureCallback>
 8005a22:	e005      	b.n	8005a30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f965 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 f976 	bl	8005d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d020      	beq.n	8005a82 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d01b      	beq.n	8005a82 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f06f 0208 	mvn.w	r2, #8
 8005a52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2204      	movs	r2, #4
 8005a58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f94d 	bl	8005d08 <HAL_TIM_IC_CaptureCallback>
 8005a6e:	e005      	b.n	8005a7c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f93f 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 f950 	bl	8005d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f003 0310 	and.w	r3, r3, #16
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d020      	beq.n	8005ace <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f003 0310 	and.w	r3, r3, #16
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d01b      	beq.n	8005ace <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f06f 0210 	mvn.w	r2, #16
 8005a9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2208      	movs	r2, #8
 8005aa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	69db      	ldr	r3, [r3, #28]
 8005aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f927 	bl	8005d08 <HAL_TIM_IC_CaptureCallback>
 8005aba:	e005      	b.n	8005ac8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f919 	bl	8005cf4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f92a 	bl	8005d1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d00c      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f003 0301 	and.w	r3, r3, #1
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d007      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f06f 0201 	mvn.w	r2, #1
 8005aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f7fc fdf3 	bl	80026d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d00c      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	f000 fab5 	bl	8006080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00c      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d007      	beq.n	8005b3a <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f8fb 	bl	8005d30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00c      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 0320 	and.w	r3, r3, #32
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d007      	beq.n	8005b5e <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f06f 0220 	mvn.w	r2, #32
 8005b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 fa87 	bl	800606c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b5e:	bf00      	nop
 8005b60:	3710      	adds	r7, #16
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
 8005b6e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b70:	2300      	movs	r3, #0
 8005b72:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d101      	bne.n	8005b82 <HAL_TIM_ConfigClockSource+0x1c>
 8005b7e:	2302      	movs	r3, #2
 8005b80:	e0b4      	b.n	8005cec <HAL_TIM_ConfigClockSource+0x186>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2202      	movs	r2, #2
 8005b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ba0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ba8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68ba      	ldr	r2, [r7, #8]
 8005bb0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bba:	d03e      	beq.n	8005c3a <HAL_TIM_ConfigClockSource+0xd4>
 8005bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bc0:	f200 8087 	bhi.w	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
 8005bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bc8:	f000 8086 	beq.w	8005cd8 <HAL_TIM_ConfigClockSource+0x172>
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d87f      	bhi.n	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
 8005bd2:	2b70      	cmp	r3, #112	; 0x70
 8005bd4:	d01a      	beq.n	8005c0c <HAL_TIM_ConfigClockSource+0xa6>
 8005bd6:	2b70      	cmp	r3, #112	; 0x70
 8005bd8:	d87b      	bhi.n	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
 8005bda:	2b60      	cmp	r3, #96	; 0x60
 8005bdc:	d050      	beq.n	8005c80 <HAL_TIM_ConfigClockSource+0x11a>
 8005bde:	2b60      	cmp	r3, #96	; 0x60
 8005be0:	d877      	bhi.n	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
 8005be2:	2b50      	cmp	r3, #80	; 0x50
 8005be4:	d03c      	beq.n	8005c60 <HAL_TIM_ConfigClockSource+0xfa>
 8005be6:	2b50      	cmp	r3, #80	; 0x50
 8005be8:	d873      	bhi.n	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
 8005bea:	2b40      	cmp	r3, #64	; 0x40
 8005bec:	d058      	beq.n	8005ca0 <HAL_TIM_ConfigClockSource+0x13a>
 8005bee:	2b40      	cmp	r3, #64	; 0x40
 8005bf0:	d86f      	bhi.n	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
 8005bf2:	2b30      	cmp	r3, #48	; 0x30
 8005bf4:	d064      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0x15a>
 8005bf6:	2b30      	cmp	r3, #48	; 0x30
 8005bf8:	d86b      	bhi.n	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
 8005bfa:	2b20      	cmp	r3, #32
 8005bfc:	d060      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0x15a>
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d867      	bhi.n	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d05c      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0x15a>
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d05a      	beq.n	8005cc0 <HAL_TIM_ConfigClockSource+0x15a>
 8005c0a:	e062      	b.n	8005cd2 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c1c:	f000 f998 	bl	8005f50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c2e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	609a      	str	r2, [r3, #8]
      break;
 8005c38:	e04f      	b.n	8005cda <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c4a:	f000 f981 	bl	8005f50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c5c:	609a      	str	r2, [r3, #8]
      break;
 8005c5e:	e03c      	b.n	8005cda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f000 f8f5 	bl	8005e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	2150      	movs	r1, #80	; 0x50
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f000 f94e 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005c7e:	e02c      	b.n	8005cda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f000 f914 	bl	8005eba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	2160      	movs	r1, #96	; 0x60
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 f93e 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005c9e:	e01c      	b.n	8005cda <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cac:	461a      	mov	r2, r3
 8005cae:	f000 f8d5 	bl	8005e5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2140      	movs	r1, #64	; 0x40
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f000 f92e 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005cbe:	e00c      	b.n	8005cda <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	4610      	mov	r0, r2
 8005ccc:	f000 f925 	bl	8005f1a <TIM_ITRx_SetConfig>
      break;
 8005cd0:	e003      	b.n	8005cda <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd6:	e000      	b.n	8005cda <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005cd8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3710      	adds	r7, #16
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a3a      	ldr	r2, [pc, #232]	; (8005e40 <TIM_Base_SetConfig+0xfc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00f      	beq.n	8005d7c <TIM_Base_SetConfig+0x38>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d62:	d00b      	beq.n	8005d7c <TIM_Base_SetConfig+0x38>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a37      	ldr	r2, [pc, #220]	; (8005e44 <TIM_Base_SetConfig+0x100>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d007      	beq.n	8005d7c <TIM_Base_SetConfig+0x38>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a36      	ldr	r2, [pc, #216]	; (8005e48 <TIM_Base_SetConfig+0x104>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d003      	beq.n	8005d7c <TIM_Base_SetConfig+0x38>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	4a35      	ldr	r2, [pc, #212]	; (8005e4c <TIM_Base_SetConfig+0x108>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d108      	bne.n	8005d8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a2b      	ldr	r2, [pc, #172]	; (8005e40 <TIM_Base_SetConfig+0xfc>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d01b      	beq.n	8005dce <TIM_Base_SetConfig+0x8a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9c:	d017      	beq.n	8005dce <TIM_Base_SetConfig+0x8a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a28      	ldr	r2, [pc, #160]	; (8005e44 <TIM_Base_SetConfig+0x100>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <TIM_Base_SetConfig+0x8a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a27      	ldr	r2, [pc, #156]	; (8005e48 <TIM_Base_SetConfig+0x104>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00f      	beq.n	8005dce <TIM_Base_SetConfig+0x8a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a26      	ldr	r2, [pc, #152]	; (8005e4c <TIM_Base_SetConfig+0x108>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00b      	beq.n	8005dce <TIM_Base_SetConfig+0x8a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a25      	ldr	r2, [pc, #148]	; (8005e50 <TIM_Base_SetConfig+0x10c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <TIM_Base_SetConfig+0x8a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a24      	ldr	r2, [pc, #144]	; (8005e54 <TIM_Base_SetConfig+0x110>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_Base_SetConfig+0x8a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a23      	ldr	r2, [pc, #140]	; (8005e58 <TIM_Base_SetConfig+0x114>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d108      	bne.n	8005de0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a0e      	ldr	r2, [pc, #56]	; (8005e40 <TIM_Base_SetConfig+0xfc>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d103      	bne.n	8005e14 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	691a      	ldr	r2, [r3, #16]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d105      	bne.n	8005e32 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f023 0201 	bic.w	r2, r3, #1
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	611a      	str	r2, [r3, #16]
  }
}
 8005e32:	bf00      	nop
 8005e34:	3714      	adds	r7, #20
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40010000 	.word	0x40010000
 8005e44:	40000400 	.word	0x40000400
 8005e48:	40000800 	.word	0x40000800
 8005e4c:	40000c00 	.word	0x40000c00
 8005e50:	40014000 	.word	0x40014000
 8005e54:	40014400 	.word	0x40014400
 8005e58:	40014800 	.word	0x40014800

08005e5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1b      	ldr	r3, [r3, #32]
 8005e72:	f023 0201 	bic.w	r2, r3, #1
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	011b      	lsls	r3, r3, #4
 8005e8c:	693a      	ldr	r2, [r7, #16]
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	f023 030a 	bic.w	r3, r3, #10
 8005e98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	693a      	ldr	r2, [r7, #16]
 8005ea6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	621a      	str	r2, [r3, #32]
}
 8005eae:	bf00      	nop
 8005eb0:	371c      	adds	r7, #28
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb8:	4770      	bx	lr

08005eba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005eba:	b480      	push	{r7}
 8005ebc:	b087      	sub	sp, #28
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	60f8      	str	r0, [r7, #12]
 8005ec2:	60b9      	str	r1, [r7, #8]
 8005ec4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a1b      	ldr	r3, [r3, #32]
 8005eca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	f023 0210 	bic.w	r2, r3, #16
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ee4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	031b      	lsls	r3, r3, #12
 8005eea:	693a      	ldr	r2, [r7, #16]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ef6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	011b      	lsls	r3, r3, #4
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	4313      	orrs	r3, r2
 8005f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	621a      	str	r2, [r3, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	371c      	adds	r7, #28
 8005f12:	46bd      	mov	sp, r7
 8005f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f18:	4770      	bx	lr

08005f1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f1a:	b480      	push	{r7}
 8005f1c:	b085      	sub	sp, #20
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
 8005f22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f32:	683a      	ldr	r2, [r7, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4313      	orrs	r3, r2
 8005f38:	f043 0307 	orr.w	r3, r3, #7
 8005f3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	609a      	str	r2, [r3, #8]
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005f6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	021a      	lsls	r2, r3, #8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	431a      	orrs	r2, r3
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	697a      	ldr	r2, [r7, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	609a      	str	r2, [r3, #8]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e050      	b.n	800604a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1c      	ldr	r2, [pc, #112]	; (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d018      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff4:	d013      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a18      	ldr	r2, [pc, #96]	; (800605c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d00e      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a16      	ldr	r2, [pc, #88]	; (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d009      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a15      	ldr	r2, [pc, #84]	; (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d004      	beq.n	800601e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a13      	ldr	r2, [pc, #76]	; (8006068 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d10c      	bne.n	8006038 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	4313      	orrs	r3, r2
 800602e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40010000 	.word	0x40010000
 800605c:	40000400 	.word	0x40000400
 8006060:	40000800 	.word	0x40000800
 8006064:	40000c00 	.word	0x40000c00
 8006068:	40014000 	.word	0x40014000

0800606c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e042      	b.n	800612c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7fc fbd6 	bl	800286c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2224      	movs	r2, #36	; 0x24
 80060c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68da      	ldr	r2, [r3, #12]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f000 fd69 	bl	8006bb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695a      	ldr	r2, [r3, #20]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800610c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2220      	movs	r2, #32
 8006120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800612a:	2300      	movs	r3, #0
}
 800612c:	4618      	mov	r0, r3
 800612e:	3708      	adds	r7, #8
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08a      	sub	sp, #40	; 0x28
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006144:	2300      	movs	r3, #0
 8006146:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800614e:	b2db      	uxtb	r3, r3
 8006150:	2b20      	cmp	r3, #32
 8006152:	d175      	bne.n	8006240 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_UART_Transmit+0x2c>
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e06e      	b.n	8006242 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2200      	movs	r2, #0
 8006168:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2221      	movs	r2, #33	; 0x21
 800616e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006172:	f7fc fdbb 	bl	8002cec <HAL_GetTick>
 8006176:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	88fa      	ldrh	r2, [r7, #6]
 800617c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	88fa      	ldrh	r2, [r7, #6]
 8006182:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618c:	d108      	bne.n	80061a0 <HAL_UART_Transmit+0x6c>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d104      	bne.n	80061a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	61bb      	str	r3, [r7, #24]
 800619e:	e003      	b.n	80061a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a4:	2300      	movs	r3, #0
 80061a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061a8:	e02e      	b.n	8006208 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	9300      	str	r3, [sp, #0]
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	2200      	movs	r2, #0
 80061b2:	2180      	movs	r1, #128	; 0x80
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fb05 	bl	80067c4 <UART_WaitOnFlagUntilTimeout>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d005      	beq.n	80061cc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e03a      	b.n	8006242 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	881b      	ldrh	r3, [r3, #0]
 80061d6:	461a      	mov	r2, r3
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	3302      	adds	r3, #2
 80061e6:	61bb      	str	r3, [r7, #24]
 80061e8:	e007      	b.n	80061fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	781a      	ldrb	r2, [r3, #0]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	3301      	adds	r3, #1
 80061f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29a      	uxth	r2, r3
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800620c:	b29b      	uxth	r3, r3
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1cb      	bne.n	80061aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	9300      	str	r3, [sp, #0]
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2200      	movs	r2, #0
 800621a:	2140      	movs	r1, #64	; 0x40
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f000 fad1 	bl	80067c4 <UART_WaitOnFlagUntilTimeout>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	d005      	beq.n	8006234 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2220      	movs	r2, #32
 800622c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e006      	b.n	8006242 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800623c:	2300      	movs	r3, #0
 800623e:	e000      	b.n	8006242 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006240:	2302      	movs	r3, #2
  }
}
 8006242:	4618      	mov	r0, r3
 8006244:	3720      	adds	r7, #32
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b0ba      	sub	sp, #232	; 0xe8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006272:	2300      	movs	r3, #0
 8006274:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006278:	2300      	movs	r3, #0
 800627a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800627e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800628a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10f      	bne.n	80062b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <HAL_UART_IRQHandler+0x66>
 800629e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 fbc2 	bl	8006a34 <UART_Receive_IT>
      return;
 80062b0:	e25b      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f000 80de 	beq.w	8006478 <HAL_UART_IRQHandler+0x22c>
 80062bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d106      	bne.n	80062d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80062c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062cc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	f000 80d1 	beq.w	8006478 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00b      	beq.n	80062fa <HAL_UART_IRQHandler+0xae>
 80062e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d005      	beq.n	80062fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f2:	f043 0201 	orr.w	r2, r3, #1
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80062fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062fe:	f003 0304 	and.w	r3, r3, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00b      	beq.n	800631e <HAL_UART_IRQHandler+0xd2>
 8006306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006316:	f043 0202 	orr.w	r2, r3, #2
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800631e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d00b      	beq.n	8006342 <HAL_UART_IRQHandler+0xf6>
 800632a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d005      	beq.n	8006342 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633a:	f043 0204 	orr.w	r2, r3, #4
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006346:	f003 0308 	and.w	r3, r3, #8
 800634a:	2b00      	cmp	r3, #0
 800634c:	d011      	beq.n	8006372 <HAL_UART_IRQHandler+0x126>
 800634e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006352:	f003 0320 	and.w	r3, r3, #32
 8006356:	2b00      	cmp	r3, #0
 8006358:	d105      	bne.n	8006366 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800635a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b00      	cmp	r3, #0
 8006364:	d005      	beq.n	8006372 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f043 0208 	orr.w	r2, r3, #8
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006376:	2b00      	cmp	r3, #0
 8006378:	f000 81f2 	beq.w	8006760 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800637c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006380:	f003 0320 	and.w	r3, r3, #32
 8006384:	2b00      	cmp	r3, #0
 8006386:	d008      	beq.n	800639a <HAL_UART_IRQHandler+0x14e>
 8006388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800638c:	f003 0320 	and.w	r3, r3, #32
 8006390:	2b00      	cmp	r3, #0
 8006392:	d002      	beq.n	800639a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f000 fb4d 	bl	8006a34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b40      	cmp	r3, #64	; 0x40
 80063a6:	bf0c      	ite	eq
 80063a8:	2301      	moveq	r3, #1
 80063aa:	2300      	movne	r3, #0
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b6:	f003 0308 	and.w	r3, r3, #8
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d103      	bne.n	80063c6 <HAL_UART_IRQHandler+0x17a>
 80063be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d04f      	beq.n	8006466 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 fa55 	bl	8006876 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b40      	cmp	r3, #64	; 0x40
 80063d8:	d141      	bne.n	800645e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3314      	adds	r3, #20
 80063e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80063e8:	e853 3f00 	ldrex	r3, [r3]
 80063ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80063f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80063f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3314      	adds	r3, #20
 8006402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006406:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800640a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006416:	e841 2300 	strex	r3, r2, [r1]
 800641a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800641e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1d9      	bne.n	80063da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800642a:	2b00      	cmp	r3, #0
 800642c:	d013      	beq.n	8006456 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006432:	4a7e      	ldr	r2, [pc, #504]	; (800662c <HAL_UART_IRQHandler+0x3e0>)
 8006434:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800643a:	4618      	mov	r0, r3
 800643c:	f7fc fe07 	bl	800304e <HAL_DMA_Abort_IT>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d016      	beq.n	8006474 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006450:	4610      	mov	r0, r2
 8006452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006454:	e00e      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f99e 	bl	8006798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800645c:	e00a      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f99a 	bl	8006798 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006464:	e006      	b.n	8006474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f996 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006472:	e175      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006474:	bf00      	nop
    return;
 8006476:	e173      	b.n	8006760 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800647c:	2b01      	cmp	r3, #1
 800647e:	f040 814f 	bne.w	8006720 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	f000 8148 	beq.w	8006720 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006494:	f003 0310 	and.w	r3, r3, #16
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8141 	beq.w	8006720 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800649e:	2300      	movs	r3, #0
 80064a0:	60bb      	str	r3, [r7, #8]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	60bb      	str	r3, [r7, #8]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064be:	2b40      	cmp	r3, #64	; 0x40
 80064c0:	f040 80b6 	bne.w	8006630 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80064d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f000 8145 	beq.w	8006764 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80064de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064e2:	429a      	cmp	r2, r3
 80064e4:	f080 813e 	bcs.w	8006764 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80064ee:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064f4:	69db      	ldr	r3, [r3, #28]
 80064f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064fa:	f000 8088 	beq.w	800660e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800650c:	e853 3f00 	ldrex	r3, [r3]
 8006510:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006514:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006518:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800651c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	330c      	adds	r3, #12
 8006526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800652a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800652e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006536:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800653a:	e841 2300 	strex	r3, r2, [r1]
 800653e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006542:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1d9      	bne.n	80064fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	3314      	adds	r3, #20
 8006550:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006554:	e853 3f00 	ldrex	r3, [r3]
 8006558:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800655a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800655c:	f023 0301 	bic.w	r3, r3, #1
 8006560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3314      	adds	r3, #20
 800656a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800656e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006572:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006576:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800657a:	e841 2300 	strex	r3, r2, [r1]
 800657e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1e1      	bne.n	800654a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3314      	adds	r3, #20
 800658c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006596:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	3314      	adds	r3, #20
 80065a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80065aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80065ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80065b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80065b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e3      	bne.n	8006586 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2220      	movs	r2, #32
 80065c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	330c      	adds	r3, #12
 80065d2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065d6:	e853 3f00 	ldrex	r3, [r3]
 80065da:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065de:	f023 0310 	bic.w	r3, r3, #16
 80065e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	330c      	adds	r3, #12
 80065ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80065f0:	65ba      	str	r2, [r7, #88]	; 0x58
 80065f2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e3      	bne.n	80065cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006608:	4618      	mov	r0, r3
 800660a:	f7fc fcb0 	bl	8002f6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800661c:	b29b      	uxth	r3, r3
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	b29b      	uxth	r3, r3
 8006622:	4619      	mov	r1, r3
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f8c1 	bl	80067ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800662a:	e09b      	b.n	8006764 <HAL_UART_IRQHandler+0x518>
 800662c:	0800693d 	.word	0x0800693d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006638:	b29b      	uxth	r3, r3
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006644:	b29b      	uxth	r3, r3
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 808e 	beq.w	8006768 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800664c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8089 	beq.w	8006768 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	330c      	adds	r3, #12
 800665c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	e853 3f00 	ldrex	r3, [r3]
 8006664:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006668:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800666c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800667a:	647a      	str	r2, [r7, #68]	; 0x44
 800667c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006680:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006682:	e841 2300 	strex	r3, r2, [r1]
 8006686:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800668a:	2b00      	cmp	r3, #0
 800668c:	d1e3      	bne.n	8006656 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3314      	adds	r3, #20
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	e853 3f00 	ldrex	r3, [r3]
 800669c:	623b      	str	r3, [r7, #32]
   return(result);
 800669e:	6a3b      	ldr	r3, [r7, #32]
 80066a0:	f023 0301 	bic.w	r3, r3, #1
 80066a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	3314      	adds	r3, #20
 80066ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80066b2:	633a      	str	r2, [r7, #48]	; 0x30
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ba:	e841 2300 	strex	r3, r2, [r1]
 80066be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1e3      	bne.n	800668e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2200      	movs	r2, #0
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	330c      	adds	r3, #12
 80066da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f023 0310 	bic.w	r3, r3, #16
 80066ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	330c      	adds	r3, #12
 80066f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80066f8:	61fa      	str	r2, [r7, #28]
 80066fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	69b9      	ldr	r1, [r7, #24]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	617b      	str	r3, [r7, #20]
   return(result);
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e3      	bne.n	80066d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2202      	movs	r2, #2
 8006710:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006712:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 f847 	bl	80067ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800671e:	e023      	b.n	8006768 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006728:	2b00      	cmp	r3, #0
 800672a:	d009      	beq.n	8006740 <HAL_UART_IRQHandler+0x4f4>
 800672c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 f913 	bl	8006964 <UART_Transmit_IT>
    return;
 800673e:	e014      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00e      	beq.n	800676a <HAL_UART_IRQHandler+0x51e>
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d008      	beq.n	800676a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f953 	bl	8006a04 <UART_EndTransmit_IT>
    return;
 800675e:	e004      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
    return;
 8006760:	bf00      	nop
 8006762:	e002      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
      return;
 8006764:	bf00      	nop
 8006766:	e000      	b.n	800676a <HAL_UART_IRQHandler+0x51e>
      return;
 8006768:	bf00      	nop
  }
}
 800676a:	37e8      	adds	r7, #232	; 0xe8
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067a0:	bf00      	nop
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	460b      	mov	r3, r1
 80067b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067b8:	bf00      	nop
 80067ba:	370c      	adds	r7, #12
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr

080067c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b086      	sub	sp, #24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	603b      	str	r3, [r7, #0]
 80067d0:	4613      	mov	r3, r2
 80067d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067d4:	e03b      	b.n	800684e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067dc:	d037      	beq.n	800684e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067de:	f7fc fa85 	bl	8002cec <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	6a3a      	ldr	r2, [r7, #32]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d302      	bcc.n	80067f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d101      	bne.n	80067f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e03a      	b.n	800686e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d023      	beq.n	800684e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d020      	beq.n	800684e <UART_WaitOnFlagUntilTimeout+0x8a>
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d01d      	beq.n	800684e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b08      	cmp	r3, #8
 800681e:	d116      	bne.n	800684e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006820:	2300      	movs	r3, #0
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	617b      	str	r3, [r7, #20]
 8006834:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 f81d 	bl	8006876 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2208      	movs	r2, #8
 8006840:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e00f      	b.n	800686e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4013      	ands	r3, r2
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	429a      	cmp	r2, r3
 800685c:	bf0c      	ite	eq
 800685e:	2301      	moveq	r3, #1
 8006860:	2300      	movne	r3, #0
 8006862:	b2db      	uxtb	r3, r3
 8006864:	461a      	mov	r2, r3
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	429a      	cmp	r2, r3
 800686a:	d0b4      	beq.n	80067d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006876:	b480      	push	{r7}
 8006878:	b095      	sub	sp, #84	; 0x54
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	330c      	adds	r3, #12
 8006884:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006894:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	330c      	adds	r3, #12
 800689c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800689e:	643a      	str	r2, [r7, #64]	; 0x40
 80068a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e5      	bne.n	800687e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	3314      	adds	r3, #20
 80068b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	e853 3f00 	ldrex	r3, [r3]
 80068c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e5      	bne.n	80068b2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d119      	bne.n	8006922 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	330c      	adds	r3, #12
 80068f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	f023 0310 	bic.w	r3, r3, #16
 8006904:	647b      	str	r3, [r7, #68]	; 0x44
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800690e:	61ba      	str	r2, [r7, #24]
 8006910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	6979      	ldr	r1, [r7, #20]
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	613b      	str	r3, [r7, #16]
   return(result);
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e5      	bne.n	80068ee <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006930:	bf00      	nop
 8006932:	3754      	adds	r7, #84	; 0x54
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b084      	sub	sp, #16
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff ff1e 	bl	8006798 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006964:	b480      	push	{r7}
 8006966:	b085      	sub	sp, #20
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b21      	cmp	r3, #33	; 0x21
 8006976:	d13e      	bne.n	80069f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006980:	d114      	bne.n	80069ac <UART_Transmit_IT+0x48>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	691b      	ldr	r3, [r3, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d110      	bne.n	80069ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a1b      	ldr	r3, [r3, #32]
 800698e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	881b      	ldrh	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800699e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	1c9a      	adds	r2, r3, #2
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	621a      	str	r2, [r3, #32]
 80069aa:	e008      	b.n	80069be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	1c59      	adds	r1, r3, #1
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6211      	str	r1, [r2, #32]
 80069b6:	781a      	ldrb	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	3b01      	subs	r3, #1
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	4619      	mov	r1, r3
 80069cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10f      	bne.n	80069f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80069e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80069f2:	2300      	movs	r3, #0
 80069f4:	e000      	b.n	80069f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80069f6:	2302      	movs	r3, #2
  }
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3714      	adds	r7, #20
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2220      	movs	r2, #32
 8006a20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f7ff fea3 	bl	8006770 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a2a:	2300      	movs	r3, #0
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	; 0x30
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b22      	cmp	r3, #34	; 0x22
 8006a46:	f040 80ae 	bne.w	8006ba6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a52:	d117      	bne.n	8006a84 <UART_Receive_IT+0x50>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d113      	bne.n	8006a84 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	1c9a      	adds	r2, r3, #2
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	629a      	str	r2, [r3, #40]	; 0x28
 8006a82:	e026      	b.n	8006ad2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a88:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a96:	d007      	beq.n	8006aa8 <UART_Receive_IT+0x74>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d10a      	bne.n	8006ab6 <UART_Receive_IT+0x82>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d106      	bne.n	8006ab6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	e008      	b.n	8006ac8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac2:	b2da      	uxtb	r2, r3
 8006ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ac6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	1c5a      	adds	r2, r3, #1
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d15d      	bne.n	8006ba2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68da      	ldr	r2, [r3, #12]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	f022 0220 	bic.w	r2, r2, #32
 8006af4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68da      	ldr	r2, [r3, #12]
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	695a      	ldr	r2, [r3, #20]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f022 0201 	bic.w	r2, r2, #1
 8006b14:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d135      	bne.n	8006b98 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	330c      	adds	r3, #12
 8006b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	e853 3f00 	ldrex	r3, [r3]
 8006b40:	613b      	str	r3, [r7, #16]
   return(result);
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	f023 0310 	bic.w	r3, r3, #16
 8006b48:	627b      	str	r3, [r7, #36]	; 0x24
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	330c      	adds	r3, #12
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	623a      	str	r2, [r7, #32]
 8006b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b56:	69f9      	ldr	r1, [r7, #28]
 8006b58:	6a3a      	ldr	r2, [r7, #32]
 8006b5a:	e841 2300 	strex	r3, r2, [r1]
 8006b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d1e5      	bne.n	8006b32 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0310 	and.w	r3, r3, #16
 8006b70:	2b10      	cmp	r3, #16
 8006b72:	d10a      	bne.n	8006b8a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006b74:	2300      	movs	r3, #0
 8006b76:	60fb      	str	r3, [r7, #12]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff fe0b 	bl	80067ac <HAL_UARTEx_RxEventCallback>
 8006b96:	e002      	b.n	8006b9e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f7ff fdf3 	bl	8006784 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e002      	b.n	8006ba8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e000      	b.n	8006ba8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006ba6:	2302      	movs	r3, #2
  }
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3730      	adds	r7, #48	; 0x30
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}

08006bb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb4:	b0c0      	sub	sp, #256	; 0x100
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bcc:	68d9      	ldr	r1, [r3, #12]
 8006bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	ea40 0301 	orr.w	r3, r0, r1
 8006bd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bde:	689a      	ldr	r2, [r3, #8]
 8006be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006be4:	691b      	ldr	r3, [r3, #16]
 8006be6:	431a      	orrs	r2, r3
 8006be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	431a      	orrs	r2, r3
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf4:	69db      	ldr	r3, [r3, #28]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006c08:	f021 010c 	bic.w	r1, r1, #12
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c16:	430b      	orrs	r3, r1
 8006c18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c2a:	6999      	ldr	r1, [r3, #24]
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	ea40 0301 	orr.w	r3, r0, r1
 8006c36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	4b8f      	ldr	r3, [pc, #572]	; (8006e7c <UART_SetConfig+0x2cc>)
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d005      	beq.n	8006c50 <UART_SetConfig+0xa0>
 8006c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	4b8d      	ldr	r3, [pc, #564]	; (8006e80 <UART_SetConfig+0x2d0>)
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d104      	bne.n	8006c5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c50:	f7fe fe36 	bl	80058c0 <HAL_RCC_GetPCLK2Freq>
 8006c54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006c58:	e003      	b.n	8006c62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c5a:	f7fe fe1d 	bl	8005898 <HAL_RCC_GetPCLK1Freq>
 8006c5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c66:	69db      	ldr	r3, [r3, #28]
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6c:	f040 810c 	bne.w	8006e88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c74:	2200      	movs	r2, #0
 8006c76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c82:	4622      	mov	r2, r4
 8006c84:	462b      	mov	r3, r5
 8006c86:	1891      	adds	r1, r2, r2
 8006c88:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c8a:	415b      	adcs	r3, r3
 8006c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c92:	4621      	mov	r1, r4
 8006c94:	eb12 0801 	adds.w	r8, r2, r1
 8006c98:	4629      	mov	r1, r5
 8006c9a:	eb43 0901 	adc.w	r9, r3, r1
 8006c9e:	f04f 0200 	mov.w	r2, #0
 8006ca2:	f04f 0300 	mov.w	r3, #0
 8006ca6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006caa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cb2:	4690      	mov	r8, r2
 8006cb4:	4699      	mov	r9, r3
 8006cb6:	4623      	mov	r3, r4
 8006cb8:	eb18 0303 	adds.w	r3, r8, r3
 8006cbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006cc0:	462b      	mov	r3, r5
 8006cc2:	eb49 0303 	adc.w	r3, r9, r3
 8006cc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006cd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006cda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006cde:	460b      	mov	r3, r1
 8006ce0:	18db      	adds	r3, r3, r3
 8006ce2:	653b      	str	r3, [r7, #80]	; 0x50
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	eb42 0303 	adc.w	r3, r2, r3
 8006cea:	657b      	str	r3, [r7, #84]	; 0x54
 8006cec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006cf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006cf4:	f7f9 ffb0 	bl	8000c58 <__aeabi_uldivmod>
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	460b      	mov	r3, r1
 8006cfc:	4b61      	ldr	r3, [pc, #388]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006cfe:	fba3 2302 	umull	r2, r3, r3, r2
 8006d02:	095b      	lsrs	r3, r3, #5
 8006d04:	011c      	lsls	r4, r3, #4
 8006d06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006d10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006d14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006d18:	4642      	mov	r2, r8
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	1891      	adds	r1, r2, r2
 8006d1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006d20:	415b      	adcs	r3, r3
 8006d22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006d28:	4641      	mov	r1, r8
 8006d2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006d2e:	4649      	mov	r1, r9
 8006d30:	eb43 0b01 	adc.w	fp, r3, r1
 8006d34:	f04f 0200 	mov.w	r2, #0
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d48:	4692      	mov	sl, r2
 8006d4a:	469b      	mov	fp, r3
 8006d4c:	4643      	mov	r3, r8
 8006d4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006d52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006d56:	464b      	mov	r3, r9
 8006d58:	eb4b 0303 	adc.w	r3, fp, r3
 8006d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d74:	460b      	mov	r3, r1
 8006d76:	18db      	adds	r3, r3, r3
 8006d78:	643b      	str	r3, [r7, #64]	; 0x40
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	eb42 0303 	adc.w	r3, r2, r3
 8006d80:	647b      	str	r3, [r7, #68]	; 0x44
 8006d82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d8a:	f7f9 ff65 	bl	8000c58 <__aeabi_uldivmod>
 8006d8e:	4602      	mov	r2, r0
 8006d90:	460b      	mov	r3, r1
 8006d92:	4611      	mov	r1, r2
 8006d94:	4b3b      	ldr	r3, [pc, #236]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006d96:	fba3 2301 	umull	r2, r3, r3, r1
 8006d9a:	095b      	lsrs	r3, r3, #5
 8006d9c:	2264      	movs	r2, #100	; 0x64
 8006d9e:	fb02 f303 	mul.w	r3, r2, r3
 8006da2:	1acb      	subs	r3, r1, r3
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006daa:	4b36      	ldr	r3, [pc, #216]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006dac:	fba3 2302 	umull	r2, r3, r3, r2
 8006db0:	095b      	lsrs	r3, r3, #5
 8006db2:	005b      	lsls	r3, r3, #1
 8006db4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006db8:	441c      	add	r4, r3
 8006dba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006dc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006dc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006dcc:	4642      	mov	r2, r8
 8006dce:	464b      	mov	r3, r9
 8006dd0:	1891      	adds	r1, r2, r2
 8006dd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006dd4:	415b      	adcs	r3, r3
 8006dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ddc:	4641      	mov	r1, r8
 8006dde:	1851      	adds	r1, r2, r1
 8006de0:	6339      	str	r1, [r7, #48]	; 0x30
 8006de2:	4649      	mov	r1, r9
 8006de4:	414b      	adcs	r3, r1
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
 8006de8:	f04f 0200 	mov.w	r2, #0
 8006dec:	f04f 0300 	mov.w	r3, #0
 8006df0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006df4:	4659      	mov	r1, fp
 8006df6:	00cb      	lsls	r3, r1, #3
 8006df8:	4651      	mov	r1, sl
 8006dfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dfe:	4651      	mov	r1, sl
 8006e00:	00ca      	lsls	r2, r1, #3
 8006e02:	4610      	mov	r0, r2
 8006e04:	4619      	mov	r1, r3
 8006e06:	4603      	mov	r3, r0
 8006e08:	4642      	mov	r2, r8
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e10:	464b      	mov	r3, r9
 8006e12:	460a      	mov	r2, r1
 8006e14:	eb42 0303 	adc.w	r3, r2, r3
 8006e18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006e28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006e2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006e30:	460b      	mov	r3, r1
 8006e32:	18db      	adds	r3, r3, r3
 8006e34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e36:	4613      	mov	r3, r2
 8006e38:	eb42 0303 	adc.w	r3, r2, r3
 8006e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006e46:	f7f9 ff07 	bl	8000c58 <__aeabi_uldivmod>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	4b0d      	ldr	r3, [pc, #52]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006e50:	fba3 1302 	umull	r1, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	2164      	movs	r1, #100	; 0x64
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	00db      	lsls	r3, r3, #3
 8006e60:	3332      	adds	r3, #50	; 0x32
 8006e62:	4a08      	ldr	r2, [pc, #32]	; (8006e84 <UART_SetConfig+0x2d4>)
 8006e64:	fba2 2303 	umull	r2, r3, r2, r3
 8006e68:	095b      	lsrs	r3, r3, #5
 8006e6a:	f003 0207 	and.w	r2, r3, #7
 8006e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4422      	add	r2, r4
 8006e76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e78:	e106      	b.n	8007088 <UART_SetConfig+0x4d8>
 8006e7a:	bf00      	nop
 8006e7c:	40011000 	.word	0x40011000
 8006e80:	40011400 	.word	0x40011400
 8006e84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e9a:	4642      	mov	r2, r8
 8006e9c:	464b      	mov	r3, r9
 8006e9e:	1891      	adds	r1, r2, r2
 8006ea0:	6239      	str	r1, [r7, #32]
 8006ea2:	415b      	adcs	r3, r3
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ea6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eaa:	4641      	mov	r1, r8
 8006eac:	1854      	adds	r4, r2, r1
 8006eae:	4649      	mov	r1, r9
 8006eb0:	eb43 0501 	adc.w	r5, r3, r1
 8006eb4:	f04f 0200 	mov.w	r2, #0
 8006eb8:	f04f 0300 	mov.w	r3, #0
 8006ebc:	00eb      	lsls	r3, r5, #3
 8006ebe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ec2:	00e2      	lsls	r2, r4, #3
 8006ec4:	4614      	mov	r4, r2
 8006ec6:	461d      	mov	r5, r3
 8006ec8:	4643      	mov	r3, r8
 8006eca:	18e3      	adds	r3, r4, r3
 8006ecc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	eb45 0303 	adc.w	r3, r5, r3
 8006ed6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ee6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006eea:	f04f 0200 	mov.w	r2, #0
 8006eee:	f04f 0300 	mov.w	r3, #0
 8006ef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006ef6:	4629      	mov	r1, r5
 8006ef8:	008b      	lsls	r3, r1, #2
 8006efa:	4621      	mov	r1, r4
 8006efc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f00:	4621      	mov	r1, r4
 8006f02:	008a      	lsls	r2, r1, #2
 8006f04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006f08:	f7f9 fea6 	bl	8000c58 <__aeabi_uldivmod>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	460b      	mov	r3, r1
 8006f10:	4b60      	ldr	r3, [pc, #384]	; (8007094 <UART_SetConfig+0x4e4>)
 8006f12:	fba3 2302 	umull	r2, r3, r3, r2
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	011c      	lsls	r4, r3, #4
 8006f1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006f24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006f28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006f2c:	4642      	mov	r2, r8
 8006f2e:	464b      	mov	r3, r9
 8006f30:	1891      	adds	r1, r2, r2
 8006f32:	61b9      	str	r1, [r7, #24]
 8006f34:	415b      	adcs	r3, r3
 8006f36:	61fb      	str	r3, [r7, #28]
 8006f38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f3c:	4641      	mov	r1, r8
 8006f3e:	1851      	adds	r1, r2, r1
 8006f40:	6139      	str	r1, [r7, #16]
 8006f42:	4649      	mov	r1, r9
 8006f44:	414b      	adcs	r3, r1
 8006f46:	617b      	str	r3, [r7, #20]
 8006f48:	f04f 0200 	mov.w	r2, #0
 8006f4c:	f04f 0300 	mov.w	r3, #0
 8006f50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f54:	4659      	mov	r1, fp
 8006f56:	00cb      	lsls	r3, r1, #3
 8006f58:	4651      	mov	r1, sl
 8006f5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f5e:	4651      	mov	r1, sl
 8006f60:	00ca      	lsls	r2, r1, #3
 8006f62:	4610      	mov	r0, r2
 8006f64:	4619      	mov	r1, r3
 8006f66:	4603      	mov	r3, r0
 8006f68:	4642      	mov	r2, r8
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f70:	464b      	mov	r3, r9
 8006f72:	460a      	mov	r2, r1
 8006f74:	eb42 0303 	adc.w	r3, r2, r3
 8006f78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f88:	f04f 0200 	mov.w	r2, #0
 8006f8c:	f04f 0300 	mov.w	r3, #0
 8006f90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f94:	4649      	mov	r1, r9
 8006f96:	008b      	lsls	r3, r1, #2
 8006f98:	4641      	mov	r1, r8
 8006f9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	008a      	lsls	r2, r1, #2
 8006fa2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006fa6:	f7f9 fe57 	bl	8000c58 <__aeabi_uldivmod>
 8006faa:	4602      	mov	r2, r0
 8006fac:	460b      	mov	r3, r1
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4b38      	ldr	r3, [pc, #224]	; (8007094 <UART_SetConfig+0x4e4>)
 8006fb2:	fba3 2301 	umull	r2, r3, r3, r1
 8006fb6:	095b      	lsrs	r3, r3, #5
 8006fb8:	2264      	movs	r2, #100	; 0x64
 8006fba:	fb02 f303 	mul.w	r3, r2, r3
 8006fbe:	1acb      	subs	r3, r1, r3
 8006fc0:	011b      	lsls	r3, r3, #4
 8006fc2:	3332      	adds	r3, #50	; 0x32
 8006fc4:	4a33      	ldr	r2, [pc, #204]	; (8007094 <UART_SetConfig+0x4e4>)
 8006fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fca:	095b      	lsrs	r3, r3, #5
 8006fcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fd0:	441c      	add	r4, r3
 8006fd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	673b      	str	r3, [r7, #112]	; 0x70
 8006fda:	677a      	str	r2, [r7, #116]	; 0x74
 8006fdc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006fe0:	4642      	mov	r2, r8
 8006fe2:	464b      	mov	r3, r9
 8006fe4:	1891      	adds	r1, r2, r2
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	415b      	adcs	r3, r3
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ff0:	4641      	mov	r1, r8
 8006ff2:	1851      	adds	r1, r2, r1
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	4649      	mov	r1, r9
 8006ff8:	414b      	adcs	r3, r1
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	f04f 0200 	mov.w	r2, #0
 8007000:	f04f 0300 	mov.w	r3, #0
 8007004:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007008:	4659      	mov	r1, fp
 800700a:	00cb      	lsls	r3, r1, #3
 800700c:	4651      	mov	r1, sl
 800700e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007012:	4651      	mov	r1, sl
 8007014:	00ca      	lsls	r2, r1, #3
 8007016:	4610      	mov	r0, r2
 8007018:	4619      	mov	r1, r3
 800701a:	4603      	mov	r3, r0
 800701c:	4642      	mov	r2, r8
 800701e:	189b      	adds	r3, r3, r2
 8007020:	66bb      	str	r3, [r7, #104]	; 0x68
 8007022:	464b      	mov	r3, r9
 8007024:	460a      	mov	r2, r1
 8007026:	eb42 0303 	adc.w	r3, r2, r3
 800702a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	663b      	str	r3, [r7, #96]	; 0x60
 8007036:	667a      	str	r2, [r7, #100]	; 0x64
 8007038:	f04f 0200 	mov.w	r2, #0
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007044:	4649      	mov	r1, r9
 8007046:	008b      	lsls	r3, r1, #2
 8007048:	4641      	mov	r1, r8
 800704a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800704e:	4641      	mov	r1, r8
 8007050:	008a      	lsls	r2, r1, #2
 8007052:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007056:	f7f9 fdff 	bl	8000c58 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <UART_SetConfig+0x4e4>)
 8007060:	fba3 1302 	umull	r1, r3, r3, r2
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	2164      	movs	r1, #100	; 0x64
 8007068:	fb01 f303 	mul.w	r3, r1, r3
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	3332      	adds	r3, #50	; 0x32
 8007072:	4a08      	ldr	r2, [pc, #32]	; (8007094 <UART_SetConfig+0x4e4>)
 8007074:	fba2 2303 	umull	r2, r3, r2, r3
 8007078:	095b      	lsrs	r3, r3, #5
 800707a:	f003 020f 	and.w	r2, r3, #15
 800707e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4422      	add	r2, r4
 8007086:	609a      	str	r2, [r3, #8]
}
 8007088:	bf00      	nop
 800708a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800708e:	46bd      	mov	sp, r7
 8007090:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007094:	51eb851f 	.word	0x51eb851f

08007098 <atoi>:
 8007098:	220a      	movs	r2, #10
 800709a:	2100      	movs	r1, #0
 800709c:	f000 b882 	b.w	80071a4 <strtol>

080070a0 <_strtol_l.constprop.0>:
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070a6:	d001      	beq.n	80070ac <_strtol_l.constprop.0+0xc>
 80070a8:	2b24      	cmp	r3, #36	; 0x24
 80070aa:	d906      	bls.n	80070ba <_strtol_l.constprop.0+0x1a>
 80070ac:	f000 fe9a 	bl	8007de4 <__errno>
 80070b0:	2316      	movs	r3, #22
 80070b2:	6003      	str	r3, [r0, #0]
 80070b4:	2000      	movs	r0, #0
 80070b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80071a0 <_strtol_l.constprop.0+0x100>
 80070be:	460d      	mov	r5, r1
 80070c0:	462e      	mov	r6, r5
 80070c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80070ca:	f017 0708 	ands.w	r7, r7, #8
 80070ce:	d1f7      	bne.n	80070c0 <_strtol_l.constprop.0+0x20>
 80070d0:	2c2d      	cmp	r4, #45	; 0x2d
 80070d2:	d132      	bne.n	800713a <_strtol_l.constprop.0+0x9a>
 80070d4:	782c      	ldrb	r4, [r5, #0]
 80070d6:	2701      	movs	r7, #1
 80070d8:	1cb5      	adds	r5, r6, #2
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d05b      	beq.n	8007196 <_strtol_l.constprop.0+0xf6>
 80070de:	2b10      	cmp	r3, #16
 80070e0:	d109      	bne.n	80070f6 <_strtol_l.constprop.0+0x56>
 80070e2:	2c30      	cmp	r4, #48	; 0x30
 80070e4:	d107      	bne.n	80070f6 <_strtol_l.constprop.0+0x56>
 80070e6:	782c      	ldrb	r4, [r5, #0]
 80070e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80070ec:	2c58      	cmp	r4, #88	; 0x58
 80070ee:	d14d      	bne.n	800718c <_strtol_l.constprop.0+0xec>
 80070f0:	786c      	ldrb	r4, [r5, #1]
 80070f2:	2310      	movs	r3, #16
 80070f4:	3502      	adds	r5, #2
 80070f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80070fa:	f108 38ff 	add.w	r8, r8, #4294967295
 80070fe:	f04f 0e00 	mov.w	lr, #0
 8007102:	fbb8 f9f3 	udiv	r9, r8, r3
 8007106:	4676      	mov	r6, lr
 8007108:	fb03 8a19 	mls	sl, r3, r9, r8
 800710c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007110:	f1bc 0f09 	cmp.w	ip, #9
 8007114:	d816      	bhi.n	8007144 <_strtol_l.constprop.0+0xa4>
 8007116:	4664      	mov	r4, ip
 8007118:	42a3      	cmp	r3, r4
 800711a:	dd24      	ble.n	8007166 <_strtol_l.constprop.0+0xc6>
 800711c:	f1be 3fff 	cmp.w	lr, #4294967295
 8007120:	d008      	beq.n	8007134 <_strtol_l.constprop.0+0x94>
 8007122:	45b1      	cmp	r9, r6
 8007124:	d31c      	bcc.n	8007160 <_strtol_l.constprop.0+0xc0>
 8007126:	d101      	bne.n	800712c <_strtol_l.constprop.0+0x8c>
 8007128:	45a2      	cmp	sl, r4
 800712a:	db19      	blt.n	8007160 <_strtol_l.constprop.0+0xc0>
 800712c:	fb06 4603 	mla	r6, r6, r3, r4
 8007130:	f04f 0e01 	mov.w	lr, #1
 8007134:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007138:	e7e8      	b.n	800710c <_strtol_l.constprop.0+0x6c>
 800713a:	2c2b      	cmp	r4, #43	; 0x2b
 800713c:	bf04      	itt	eq
 800713e:	782c      	ldrbeq	r4, [r5, #0]
 8007140:	1cb5      	addeq	r5, r6, #2
 8007142:	e7ca      	b.n	80070da <_strtol_l.constprop.0+0x3a>
 8007144:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007148:	f1bc 0f19 	cmp.w	ip, #25
 800714c:	d801      	bhi.n	8007152 <_strtol_l.constprop.0+0xb2>
 800714e:	3c37      	subs	r4, #55	; 0x37
 8007150:	e7e2      	b.n	8007118 <_strtol_l.constprop.0+0x78>
 8007152:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007156:	f1bc 0f19 	cmp.w	ip, #25
 800715a:	d804      	bhi.n	8007166 <_strtol_l.constprop.0+0xc6>
 800715c:	3c57      	subs	r4, #87	; 0x57
 800715e:	e7db      	b.n	8007118 <_strtol_l.constprop.0+0x78>
 8007160:	f04f 3eff 	mov.w	lr, #4294967295
 8007164:	e7e6      	b.n	8007134 <_strtol_l.constprop.0+0x94>
 8007166:	f1be 3fff 	cmp.w	lr, #4294967295
 800716a:	d105      	bne.n	8007178 <_strtol_l.constprop.0+0xd8>
 800716c:	2322      	movs	r3, #34	; 0x22
 800716e:	6003      	str	r3, [r0, #0]
 8007170:	4646      	mov	r6, r8
 8007172:	b942      	cbnz	r2, 8007186 <_strtol_l.constprop.0+0xe6>
 8007174:	4630      	mov	r0, r6
 8007176:	e79e      	b.n	80070b6 <_strtol_l.constprop.0+0x16>
 8007178:	b107      	cbz	r7, 800717c <_strtol_l.constprop.0+0xdc>
 800717a:	4276      	negs	r6, r6
 800717c:	2a00      	cmp	r2, #0
 800717e:	d0f9      	beq.n	8007174 <_strtol_l.constprop.0+0xd4>
 8007180:	f1be 0f00 	cmp.w	lr, #0
 8007184:	d000      	beq.n	8007188 <_strtol_l.constprop.0+0xe8>
 8007186:	1e69      	subs	r1, r5, #1
 8007188:	6011      	str	r1, [r2, #0]
 800718a:	e7f3      	b.n	8007174 <_strtol_l.constprop.0+0xd4>
 800718c:	2430      	movs	r4, #48	; 0x30
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1b1      	bne.n	80070f6 <_strtol_l.constprop.0+0x56>
 8007192:	2308      	movs	r3, #8
 8007194:	e7af      	b.n	80070f6 <_strtol_l.constprop.0+0x56>
 8007196:	2c30      	cmp	r4, #48	; 0x30
 8007198:	d0a5      	beq.n	80070e6 <_strtol_l.constprop.0+0x46>
 800719a:	230a      	movs	r3, #10
 800719c:	e7ab      	b.n	80070f6 <_strtol_l.constprop.0+0x56>
 800719e:	bf00      	nop
 80071a0:	0800aed5 	.word	0x0800aed5

080071a4 <strtol>:
 80071a4:	4613      	mov	r3, r2
 80071a6:	460a      	mov	r2, r1
 80071a8:	4601      	mov	r1, r0
 80071aa:	4802      	ldr	r0, [pc, #8]	; (80071b4 <strtol+0x10>)
 80071ac:	6800      	ldr	r0, [r0, #0]
 80071ae:	f7ff bf77 	b.w	80070a0 <_strtol_l.constprop.0>
 80071b2:	bf00      	nop
 80071b4:	200000dc 	.word	0x200000dc

080071b8 <__cvt>:
 80071b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071bc:	ec55 4b10 	vmov	r4, r5, d0
 80071c0:	2d00      	cmp	r5, #0
 80071c2:	460e      	mov	r6, r1
 80071c4:	4619      	mov	r1, r3
 80071c6:	462b      	mov	r3, r5
 80071c8:	bfbb      	ittet	lt
 80071ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80071ce:	461d      	movlt	r5, r3
 80071d0:	2300      	movge	r3, #0
 80071d2:	232d      	movlt	r3, #45	; 0x2d
 80071d4:	700b      	strb	r3, [r1, #0]
 80071d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80071d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80071dc:	4691      	mov	r9, r2
 80071de:	f023 0820 	bic.w	r8, r3, #32
 80071e2:	bfbc      	itt	lt
 80071e4:	4622      	movlt	r2, r4
 80071e6:	4614      	movlt	r4, r2
 80071e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071ec:	d005      	beq.n	80071fa <__cvt+0x42>
 80071ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80071f2:	d100      	bne.n	80071f6 <__cvt+0x3e>
 80071f4:	3601      	adds	r6, #1
 80071f6:	2102      	movs	r1, #2
 80071f8:	e000      	b.n	80071fc <__cvt+0x44>
 80071fa:	2103      	movs	r1, #3
 80071fc:	ab03      	add	r3, sp, #12
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	ab02      	add	r3, sp, #8
 8007202:	9300      	str	r3, [sp, #0]
 8007204:	ec45 4b10 	vmov	d0, r4, r5
 8007208:	4653      	mov	r3, sl
 800720a:	4632      	mov	r2, r6
 800720c:	f000 fea0 	bl	8007f50 <_dtoa_r>
 8007210:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007214:	4607      	mov	r7, r0
 8007216:	d102      	bne.n	800721e <__cvt+0x66>
 8007218:	f019 0f01 	tst.w	r9, #1
 800721c:	d022      	beq.n	8007264 <__cvt+0xac>
 800721e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007222:	eb07 0906 	add.w	r9, r7, r6
 8007226:	d110      	bne.n	800724a <__cvt+0x92>
 8007228:	783b      	ldrb	r3, [r7, #0]
 800722a:	2b30      	cmp	r3, #48	; 0x30
 800722c:	d10a      	bne.n	8007244 <__cvt+0x8c>
 800722e:	2200      	movs	r2, #0
 8007230:	2300      	movs	r3, #0
 8007232:	4620      	mov	r0, r4
 8007234:	4629      	mov	r1, r5
 8007236:	f7f9 fc4f 	bl	8000ad8 <__aeabi_dcmpeq>
 800723a:	b918      	cbnz	r0, 8007244 <__cvt+0x8c>
 800723c:	f1c6 0601 	rsb	r6, r6, #1
 8007240:	f8ca 6000 	str.w	r6, [sl]
 8007244:	f8da 3000 	ldr.w	r3, [sl]
 8007248:	4499      	add	r9, r3
 800724a:	2200      	movs	r2, #0
 800724c:	2300      	movs	r3, #0
 800724e:	4620      	mov	r0, r4
 8007250:	4629      	mov	r1, r5
 8007252:	f7f9 fc41 	bl	8000ad8 <__aeabi_dcmpeq>
 8007256:	b108      	cbz	r0, 800725c <__cvt+0xa4>
 8007258:	f8cd 900c 	str.w	r9, [sp, #12]
 800725c:	2230      	movs	r2, #48	; 0x30
 800725e:	9b03      	ldr	r3, [sp, #12]
 8007260:	454b      	cmp	r3, r9
 8007262:	d307      	bcc.n	8007274 <__cvt+0xbc>
 8007264:	9b03      	ldr	r3, [sp, #12]
 8007266:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007268:	1bdb      	subs	r3, r3, r7
 800726a:	4638      	mov	r0, r7
 800726c:	6013      	str	r3, [r2, #0]
 800726e:	b004      	add	sp, #16
 8007270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007274:	1c59      	adds	r1, r3, #1
 8007276:	9103      	str	r1, [sp, #12]
 8007278:	701a      	strb	r2, [r3, #0]
 800727a:	e7f0      	b.n	800725e <__cvt+0xa6>

0800727c <__exponent>:
 800727c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800727e:	4603      	mov	r3, r0
 8007280:	2900      	cmp	r1, #0
 8007282:	bfb8      	it	lt
 8007284:	4249      	neglt	r1, r1
 8007286:	f803 2b02 	strb.w	r2, [r3], #2
 800728a:	bfb4      	ite	lt
 800728c:	222d      	movlt	r2, #45	; 0x2d
 800728e:	222b      	movge	r2, #43	; 0x2b
 8007290:	2909      	cmp	r1, #9
 8007292:	7042      	strb	r2, [r0, #1]
 8007294:	dd2a      	ble.n	80072ec <__exponent+0x70>
 8007296:	f10d 0207 	add.w	r2, sp, #7
 800729a:	4617      	mov	r7, r2
 800729c:	260a      	movs	r6, #10
 800729e:	4694      	mov	ip, r2
 80072a0:	fb91 f5f6 	sdiv	r5, r1, r6
 80072a4:	fb06 1415 	mls	r4, r6, r5, r1
 80072a8:	3430      	adds	r4, #48	; 0x30
 80072aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80072ae:	460c      	mov	r4, r1
 80072b0:	2c63      	cmp	r4, #99	; 0x63
 80072b2:	f102 32ff 	add.w	r2, r2, #4294967295
 80072b6:	4629      	mov	r1, r5
 80072b8:	dcf1      	bgt.n	800729e <__exponent+0x22>
 80072ba:	3130      	adds	r1, #48	; 0x30
 80072bc:	f1ac 0402 	sub.w	r4, ip, #2
 80072c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80072c4:	1c41      	adds	r1, r0, #1
 80072c6:	4622      	mov	r2, r4
 80072c8:	42ba      	cmp	r2, r7
 80072ca:	d30a      	bcc.n	80072e2 <__exponent+0x66>
 80072cc:	f10d 0209 	add.w	r2, sp, #9
 80072d0:	eba2 020c 	sub.w	r2, r2, ip
 80072d4:	42bc      	cmp	r4, r7
 80072d6:	bf88      	it	hi
 80072d8:	2200      	movhi	r2, #0
 80072da:	4413      	add	r3, r2
 80072dc:	1a18      	subs	r0, r3, r0
 80072de:	b003      	add	sp, #12
 80072e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80072e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80072ea:	e7ed      	b.n	80072c8 <__exponent+0x4c>
 80072ec:	2330      	movs	r3, #48	; 0x30
 80072ee:	3130      	adds	r1, #48	; 0x30
 80072f0:	7083      	strb	r3, [r0, #2]
 80072f2:	70c1      	strb	r1, [r0, #3]
 80072f4:	1d03      	adds	r3, r0, #4
 80072f6:	e7f1      	b.n	80072dc <__exponent+0x60>

080072f8 <_printf_float>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	ed2d 8b02 	vpush	{d8}
 8007300:	b08d      	sub	sp, #52	; 0x34
 8007302:	460c      	mov	r4, r1
 8007304:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007308:	4616      	mov	r6, r2
 800730a:	461f      	mov	r7, r3
 800730c:	4605      	mov	r5, r0
 800730e:	f000 fd1f 	bl	8007d50 <_localeconv_r>
 8007312:	f8d0 a000 	ldr.w	sl, [r0]
 8007316:	4650      	mov	r0, sl
 8007318:	f7f8 ffb2 	bl	8000280 <strlen>
 800731c:	2300      	movs	r3, #0
 800731e:	930a      	str	r3, [sp, #40]	; 0x28
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	9305      	str	r3, [sp, #20]
 8007324:	f8d8 3000 	ldr.w	r3, [r8]
 8007328:	f894 b018 	ldrb.w	fp, [r4, #24]
 800732c:	3307      	adds	r3, #7
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	f103 0208 	add.w	r2, r3, #8
 8007336:	f8c8 2000 	str.w	r2, [r8]
 800733a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800733e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007342:	9307      	str	r3, [sp, #28]
 8007344:	f8cd 8018 	str.w	r8, [sp, #24]
 8007348:	ee08 0a10 	vmov	s16, r0
 800734c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007354:	4b9e      	ldr	r3, [pc, #632]	; (80075d0 <_printf_float+0x2d8>)
 8007356:	f04f 32ff 	mov.w	r2, #4294967295
 800735a:	f7f9 fbef 	bl	8000b3c <__aeabi_dcmpun>
 800735e:	bb88      	cbnz	r0, 80073c4 <_printf_float+0xcc>
 8007360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007364:	4b9a      	ldr	r3, [pc, #616]	; (80075d0 <_printf_float+0x2d8>)
 8007366:	f04f 32ff 	mov.w	r2, #4294967295
 800736a:	f7f9 fbc9 	bl	8000b00 <__aeabi_dcmple>
 800736e:	bb48      	cbnz	r0, 80073c4 <_printf_float+0xcc>
 8007370:	2200      	movs	r2, #0
 8007372:	2300      	movs	r3, #0
 8007374:	4640      	mov	r0, r8
 8007376:	4649      	mov	r1, r9
 8007378:	f7f9 fbb8 	bl	8000aec <__aeabi_dcmplt>
 800737c:	b110      	cbz	r0, 8007384 <_printf_float+0x8c>
 800737e:	232d      	movs	r3, #45	; 0x2d
 8007380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007384:	4a93      	ldr	r2, [pc, #588]	; (80075d4 <_printf_float+0x2dc>)
 8007386:	4b94      	ldr	r3, [pc, #592]	; (80075d8 <_printf_float+0x2e0>)
 8007388:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800738c:	bf94      	ite	ls
 800738e:	4690      	movls	r8, r2
 8007390:	4698      	movhi	r8, r3
 8007392:	2303      	movs	r3, #3
 8007394:	6123      	str	r3, [r4, #16]
 8007396:	9b05      	ldr	r3, [sp, #20]
 8007398:	f023 0304 	bic.w	r3, r3, #4
 800739c:	6023      	str	r3, [r4, #0]
 800739e:	f04f 0900 	mov.w	r9, #0
 80073a2:	9700      	str	r7, [sp, #0]
 80073a4:	4633      	mov	r3, r6
 80073a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80073a8:	4621      	mov	r1, r4
 80073aa:	4628      	mov	r0, r5
 80073ac:	f000 f9da 	bl	8007764 <_printf_common>
 80073b0:	3001      	adds	r0, #1
 80073b2:	f040 8090 	bne.w	80074d6 <_printf_float+0x1de>
 80073b6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ba:	b00d      	add	sp, #52	; 0x34
 80073bc:	ecbd 8b02 	vpop	{d8}
 80073c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073c4:	4642      	mov	r2, r8
 80073c6:	464b      	mov	r3, r9
 80073c8:	4640      	mov	r0, r8
 80073ca:	4649      	mov	r1, r9
 80073cc:	f7f9 fbb6 	bl	8000b3c <__aeabi_dcmpun>
 80073d0:	b140      	cbz	r0, 80073e4 <_printf_float+0xec>
 80073d2:	464b      	mov	r3, r9
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	bfbc      	itt	lt
 80073d8:	232d      	movlt	r3, #45	; 0x2d
 80073da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80073de:	4a7f      	ldr	r2, [pc, #508]	; (80075dc <_printf_float+0x2e4>)
 80073e0:	4b7f      	ldr	r3, [pc, #508]	; (80075e0 <_printf_float+0x2e8>)
 80073e2:	e7d1      	b.n	8007388 <_printf_float+0x90>
 80073e4:	6863      	ldr	r3, [r4, #4]
 80073e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80073ea:	9206      	str	r2, [sp, #24]
 80073ec:	1c5a      	adds	r2, r3, #1
 80073ee:	d13f      	bne.n	8007470 <_printf_float+0x178>
 80073f0:	2306      	movs	r3, #6
 80073f2:	6063      	str	r3, [r4, #4]
 80073f4:	9b05      	ldr	r3, [sp, #20]
 80073f6:	6861      	ldr	r1, [r4, #4]
 80073f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80073fc:	2300      	movs	r3, #0
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	ab0a      	add	r3, sp, #40	; 0x28
 8007402:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007406:	ab09      	add	r3, sp, #36	; 0x24
 8007408:	ec49 8b10 	vmov	d0, r8, r9
 800740c:	9300      	str	r3, [sp, #0]
 800740e:	6022      	str	r2, [r4, #0]
 8007410:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007414:	4628      	mov	r0, r5
 8007416:	f7ff fecf 	bl	80071b8 <__cvt>
 800741a:	9b06      	ldr	r3, [sp, #24]
 800741c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800741e:	2b47      	cmp	r3, #71	; 0x47
 8007420:	4680      	mov	r8, r0
 8007422:	d108      	bne.n	8007436 <_printf_float+0x13e>
 8007424:	1cc8      	adds	r0, r1, #3
 8007426:	db02      	blt.n	800742e <_printf_float+0x136>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	4299      	cmp	r1, r3
 800742c:	dd41      	ble.n	80074b2 <_printf_float+0x1ba>
 800742e:	f1ab 0302 	sub.w	r3, fp, #2
 8007432:	fa5f fb83 	uxtb.w	fp, r3
 8007436:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800743a:	d820      	bhi.n	800747e <_printf_float+0x186>
 800743c:	3901      	subs	r1, #1
 800743e:	465a      	mov	r2, fp
 8007440:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007444:	9109      	str	r1, [sp, #36]	; 0x24
 8007446:	f7ff ff19 	bl	800727c <__exponent>
 800744a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800744c:	1813      	adds	r3, r2, r0
 800744e:	2a01      	cmp	r2, #1
 8007450:	4681      	mov	r9, r0
 8007452:	6123      	str	r3, [r4, #16]
 8007454:	dc02      	bgt.n	800745c <_printf_float+0x164>
 8007456:	6822      	ldr	r2, [r4, #0]
 8007458:	07d2      	lsls	r2, r2, #31
 800745a:	d501      	bpl.n	8007460 <_printf_float+0x168>
 800745c:	3301      	adds	r3, #1
 800745e:	6123      	str	r3, [r4, #16]
 8007460:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007464:	2b00      	cmp	r3, #0
 8007466:	d09c      	beq.n	80073a2 <_printf_float+0xaa>
 8007468:	232d      	movs	r3, #45	; 0x2d
 800746a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800746e:	e798      	b.n	80073a2 <_printf_float+0xaa>
 8007470:	9a06      	ldr	r2, [sp, #24]
 8007472:	2a47      	cmp	r2, #71	; 0x47
 8007474:	d1be      	bne.n	80073f4 <_printf_float+0xfc>
 8007476:	2b00      	cmp	r3, #0
 8007478:	d1bc      	bne.n	80073f4 <_printf_float+0xfc>
 800747a:	2301      	movs	r3, #1
 800747c:	e7b9      	b.n	80073f2 <_printf_float+0xfa>
 800747e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007482:	d118      	bne.n	80074b6 <_printf_float+0x1be>
 8007484:	2900      	cmp	r1, #0
 8007486:	6863      	ldr	r3, [r4, #4]
 8007488:	dd0b      	ble.n	80074a2 <_printf_float+0x1aa>
 800748a:	6121      	str	r1, [r4, #16]
 800748c:	b913      	cbnz	r3, 8007494 <_printf_float+0x19c>
 800748e:	6822      	ldr	r2, [r4, #0]
 8007490:	07d0      	lsls	r0, r2, #31
 8007492:	d502      	bpl.n	800749a <_printf_float+0x1a2>
 8007494:	3301      	adds	r3, #1
 8007496:	440b      	add	r3, r1
 8007498:	6123      	str	r3, [r4, #16]
 800749a:	65a1      	str	r1, [r4, #88]	; 0x58
 800749c:	f04f 0900 	mov.w	r9, #0
 80074a0:	e7de      	b.n	8007460 <_printf_float+0x168>
 80074a2:	b913      	cbnz	r3, 80074aa <_printf_float+0x1b2>
 80074a4:	6822      	ldr	r2, [r4, #0]
 80074a6:	07d2      	lsls	r2, r2, #31
 80074a8:	d501      	bpl.n	80074ae <_printf_float+0x1b6>
 80074aa:	3302      	adds	r3, #2
 80074ac:	e7f4      	b.n	8007498 <_printf_float+0x1a0>
 80074ae:	2301      	movs	r3, #1
 80074b0:	e7f2      	b.n	8007498 <_printf_float+0x1a0>
 80074b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80074b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074b8:	4299      	cmp	r1, r3
 80074ba:	db05      	blt.n	80074c8 <_printf_float+0x1d0>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	6121      	str	r1, [r4, #16]
 80074c0:	07d8      	lsls	r0, r3, #31
 80074c2:	d5ea      	bpl.n	800749a <_printf_float+0x1a2>
 80074c4:	1c4b      	adds	r3, r1, #1
 80074c6:	e7e7      	b.n	8007498 <_printf_float+0x1a0>
 80074c8:	2900      	cmp	r1, #0
 80074ca:	bfd4      	ite	le
 80074cc:	f1c1 0202 	rsble	r2, r1, #2
 80074d0:	2201      	movgt	r2, #1
 80074d2:	4413      	add	r3, r2
 80074d4:	e7e0      	b.n	8007498 <_printf_float+0x1a0>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	055a      	lsls	r2, r3, #21
 80074da:	d407      	bmi.n	80074ec <_printf_float+0x1f4>
 80074dc:	6923      	ldr	r3, [r4, #16]
 80074de:	4642      	mov	r2, r8
 80074e0:	4631      	mov	r1, r6
 80074e2:	4628      	mov	r0, r5
 80074e4:	47b8      	blx	r7
 80074e6:	3001      	adds	r0, #1
 80074e8:	d12c      	bne.n	8007544 <_printf_float+0x24c>
 80074ea:	e764      	b.n	80073b6 <_printf_float+0xbe>
 80074ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074f0:	f240 80e0 	bls.w	80076b4 <_printf_float+0x3bc>
 80074f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80074f8:	2200      	movs	r2, #0
 80074fa:	2300      	movs	r3, #0
 80074fc:	f7f9 faec 	bl	8000ad8 <__aeabi_dcmpeq>
 8007500:	2800      	cmp	r0, #0
 8007502:	d034      	beq.n	800756e <_printf_float+0x276>
 8007504:	4a37      	ldr	r2, [pc, #220]	; (80075e4 <_printf_float+0x2ec>)
 8007506:	2301      	movs	r3, #1
 8007508:	4631      	mov	r1, r6
 800750a:	4628      	mov	r0, r5
 800750c:	47b8      	blx	r7
 800750e:	3001      	adds	r0, #1
 8007510:	f43f af51 	beq.w	80073b6 <_printf_float+0xbe>
 8007514:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007518:	429a      	cmp	r2, r3
 800751a:	db02      	blt.n	8007522 <_printf_float+0x22a>
 800751c:	6823      	ldr	r3, [r4, #0]
 800751e:	07d8      	lsls	r0, r3, #31
 8007520:	d510      	bpl.n	8007544 <_printf_float+0x24c>
 8007522:	ee18 3a10 	vmov	r3, s16
 8007526:	4652      	mov	r2, sl
 8007528:	4631      	mov	r1, r6
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	f43f af41 	beq.w	80073b6 <_printf_float+0xbe>
 8007534:	f04f 0800 	mov.w	r8, #0
 8007538:	f104 091a 	add.w	r9, r4, #26
 800753c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753e:	3b01      	subs	r3, #1
 8007540:	4543      	cmp	r3, r8
 8007542:	dc09      	bgt.n	8007558 <_printf_float+0x260>
 8007544:	6823      	ldr	r3, [r4, #0]
 8007546:	079b      	lsls	r3, r3, #30
 8007548:	f100 8107 	bmi.w	800775a <_printf_float+0x462>
 800754c:	68e0      	ldr	r0, [r4, #12]
 800754e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007550:	4298      	cmp	r0, r3
 8007552:	bfb8      	it	lt
 8007554:	4618      	movlt	r0, r3
 8007556:	e730      	b.n	80073ba <_printf_float+0xc2>
 8007558:	2301      	movs	r3, #1
 800755a:	464a      	mov	r2, r9
 800755c:	4631      	mov	r1, r6
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f af27 	beq.w	80073b6 <_printf_float+0xbe>
 8007568:	f108 0801 	add.w	r8, r8, #1
 800756c:	e7e6      	b.n	800753c <_printf_float+0x244>
 800756e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007570:	2b00      	cmp	r3, #0
 8007572:	dc39      	bgt.n	80075e8 <_printf_float+0x2f0>
 8007574:	4a1b      	ldr	r2, [pc, #108]	; (80075e4 <_printf_float+0x2ec>)
 8007576:	2301      	movs	r3, #1
 8007578:	4631      	mov	r1, r6
 800757a:	4628      	mov	r0, r5
 800757c:	47b8      	blx	r7
 800757e:	3001      	adds	r0, #1
 8007580:	f43f af19 	beq.w	80073b6 <_printf_float+0xbe>
 8007584:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007588:	4313      	orrs	r3, r2
 800758a:	d102      	bne.n	8007592 <_printf_float+0x29a>
 800758c:	6823      	ldr	r3, [r4, #0]
 800758e:	07d9      	lsls	r1, r3, #31
 8007590:	d5d8      	bpl.n	8007544 <_printf_float+0x24c>
 8007592:	ee18 3a10 	vmov	r3, s16
 8007596:	4652      	mov	r2, sl
 8007598:	4631      	mov	r1, r6
 800759a:	4628      	mov	r0, r5
 800759c:	47b8      	blx	r7
 800759e:	3001      	adds	r0, #1
 80075a0:	f43f af09 	beq.w	80073b6 <_printf_float+0xbe>
 80075a4:	f04f 0900 	mov.w	r9, #0
 80075a8:	f104 0a1a 	add.w	sl, r4, #26
 80075ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ae:	425b      	negs	r3, r3
 80075b0:	454b      	cmp	r3, r9
 80075b2:	dc01      	bgt.n	80075b8 <_printf_float+0x2c0>
 80075b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075b6:	e792      	b.n	80074de <_printf_float+0x1e6>
 80075b8:	2301      	movs	r3, #1
 80075ba:	4652      	mov	r2, sl
 80075bc:	4631      	mov	r1, r6
 80075be:	4628      	mov	r0, r5
 80075c0:	47b8      	blx	r7
 80075c2:	3001      	adds	r0, #1
 80075c4:	f43f aef7 	beq.w	80073b6 <_printf_float+0xbe>
 80075c8:	f109 0901 	add.w	r9, r9, #1
 80075cc:	e7ee      	b.n	80075ac <_printf_float+0x2b4>
 80075ce:	bf00      	nop
 80075d0:	7fefffff 	.word	0x7fefffff
 80075d4:	0800afd5 	.word	0x0800afd5
 80075d8:	0800afd9 	.word	0x0800afd9
 80075dc:	0800afdd 	.word	0x0800afdd
 80075e0:	0800afe1 	.word	0x0800afe1
 80075e4:	0800afe5 	.word	0x0800afe5
 80075e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80075ec:	429a      	cmp	r2, r3
 80075ee:	bfa8      	it	ge
 80075f0:	461a      	movge	r2, r3
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	4691      	mov	r9, r2
 80075f6:	dc37      	bgt.n	8007668 <_printf_float+0x370>
 80075f8:	f04f 0b00 	mov.w	fp, #0
 80075fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007600:	f104 021a 	add.w	r2, r4, #26
 8007604:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007606:	9305      	str	r3, [sp, #20]
 8007608:	eba3 0309 	sub.w	r3, r3, r9
 800760c:	455b      	cmp	r3, fp
 800760e:	dc33      	bgt.n	8007678 <_printf_float+0x380>
 8007610:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007614:	429a      	cmp	r2, r3
 8007616:	db3b      	blt.n	8007690 <_printf_float+0x398>
 8007618:	6823      	ldr	r3, [r4, #0]
 800761a:	07da      	lsls	r2, r3, #31
 800761c:	d438      	bmi.n	8007690 <_printf_float+0x398>
 800761e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007622:	eba2 0903 	sub.w	r9, r2, r3
 8007626:	9b05      	ldr	r3, [sp, #20]
 8007628:	1ad2      	subs	r2, r2, r3
 800762a:	4591      	cmp	r9, r2
 800762c:	bfa8      	it	ge
 800762e:	4691      	movge	r9, r2
 8007630:	f1b9 0f00 	cmp.w	r9, #0
 8007634:	dc35      	bgt.n	80076a2 <_printf_float+0x3aa>
 8007636:	f04f 0800 	mov.w	r8, #0
 800763a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800763e:	f104 0a1a 	add.w	sl, r4, #26
 8007642:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007646:	1a9b      	subs	r3, r3, r2
 8007648:	eba3 0309 	sub.w	r3, r3, r9
 800764c:	4543      	cmp	r3, r8
 800764e:	f77f af79 	ble.w	8007544 <_printf_float+0x24c>
 8007652:	2301      	movs	r3, #1
 8007654:	4652      	mov	r2, sl
 8007656:	4631      	mov	r1, r6
 8007658:	4628      	mov	r0, r5
 800765a:	47b8      	blx	r7
 800765c:	3001      	adds	r0, #1
 800765e:	f43f aeaa 	beq.w	80073b6 <_printf_float+0xbe>
 8007662:	f108 0801 	add.w	r8, r8, #1
 8007666:	e7ec      	b.n	8007642 <_printf_float+0x34a>
 8007668:	4613      	mov	r3, r2
 800766a:	4631      	mov	r1, r6
 800766c:	4642      	mov	r2, r8
 800766e:	4628      	mov	r0, r5
 8007670:	47b8      	blx	r7
 8007672:	3001      	adds	r0, #1
 8007674:	d1c0      	bne.n	80075f8 <_printf_float+0x300>
 8007676:	e69e      	b.n	80073b6 <_printf_float+0xbe>
 8007678:	2301      	movs	r3, #1
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	9205      	str	r2, [sp, #20]
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f ae97 	beq.w	80073b6 <_printf_float+0xbe>
 8007688:	9a05      	ldr	r2, [sp, #20]
 800768a:	f10b 0b01 	add.w	fp, fp, #1
 800768e:	e7b9      	b.n	8007604 <_printf_float+0x30c>
 8007690:	ee18 3a10 	vmov	r3, s16
 8007694:	4652      	mov	r2, sl
 8007696:	4631      	mov	r1, r6
 8007698:	4628      	mov	r0, r5
 800769a:	47b8      	blx	r7
 800769c:	3001      	adds	r0, #1
 800769e:	d1be      	bne.n	800761e <_printf_float+0x326>
 80076a0:	e689      	b.n	80073b6 <_printf_float+0xbe>
 80076a2:	9a05      	ldr	r2, [sp, #20]
 80076a4:	464b      	mov	r3, r9
 80076a6:	4442      	add	r2, r8
 80076a8:	4631      	mov	r1, r6
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b8      	blx	r7
 80076ae:	3001      	adds	r0, #1
 80076b0:	d1c1      	bne.n	8007636 <_printf_float+0x33e>
 80076b2:	e680      	b.n	80073b6 <_printf_float+0xbe>
 80076b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076b6:	2a01      	cmp	r2, #1
 80076b8:	dc01      	bgt.n	80076be <_printf_float+0x3c6>
 80076ba:	07db      	lsls	r3, r3, #31
 80076bc:	d53a      	bpl.n	8007734 <_printf_float+0x43c>
 80076be:	2301      	movs	r3, #1
 80076c0:	4642      	mov	r2, r8
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	f43f ae74 	beq.w	80073b6 <_printf_float+0xbe>
 80076ce:	ee18 3a10 	vmov	r3, s16
 80076d2:	4652      	mov	r2, sl
 80076d4:	4631      	mov	r1, r6
 80076d6:	4628      	mov	r0, r5
 80076d8:	47b8      	blx	r7
 80076da:	3001      	adds	r0, #1
 80076dc:	f43f ae6b 	beq.w	80073b6 <_printf_float+0xbe>
 80076e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80076ec:	f7f9 f9f4 	bl	8000ad8 <__aeabi_dcmpeq>
 80076f0:	b9d8      	cbnz	r0, 800772a <_printf_float+0x432>
 80076f2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80076f6:	f108 0201 	add.w	r2, r8, #1
 80076fa:	4631      	mov	r1, r6
 80076fc:	4628      	mov	r0, r5
 80076fe:	47b8      	blx	r7
 8007700:	3001      	adds	r0, #1
 8007702:	d10e      	bne.n	8007722 <_printf_float+0x42a>
 8007704:	e657      	b.n	80073b6 <_printf_float+0xbe>
 8007706:	2301      	movs	r3, #1
 8007708:	4652      	mov	r2, sl
 800770a:	4631      	mov	r1, r6
 800770c:	4628      	mov	r0, r5
 800770e:	47b8      	blx	r7
 8007710:	3001      	adds	r0, #1
 8007712:	f43f ae50 	beq.w	80073b6 <_printf_float+0xbe>
 8007716:	f108 0801 	add.w	r8, r8, #1
 800771a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800771c:	3b01      	subs	r3, #1
 800771e:	4543      	cmp	r3, r8
 8007720:	dcf1      	bgt.n	8007706 <_printf_float+0x40e>
 8007722:	464b      	mov	r3, r9
 8007724:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007728:	e6da      	b.n	80074e0 <_printf_float+0x1e8>
 800772a:	f04f 0800 	mov.w	r8, #0
 800772e:	f104 0a1a 	add.w	sl, r4, #26
 8007732:	e7f2      	b.n	800771a <_printf_float+0x422>
 8007734:	2301      	movs	r3, #1
 8007736:	4642      	mov	r2, r8
 8007738:	e7df      	b.n	80076fa <_printf_float+0x402>
 800773a:	2301      	movs	r3, #1
 800773c:	464a      	mov	r2, r9
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f ae36 	beq.w	80073b6 <_printf_float+0xbe>
 800774a:	f108 0801 	add.w	r8, r8, #1
 800774e:	68e3      	ldr	r3, [r4, #12]
 8007750:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007752:	1a5b      	subs	r3, r3, r1
 8007754:	4543      	cmp	r3, r8
 8007756:	dcf0      	bgt.n	800773a <_printf_float+0x442>
 8007758:	e6f8      	b.n	800754c <_printf_float+0x254>
 800775a:	f04f 0800 	mov.w	r8, #0
 800775e:	f104 0919 	add.w	r9, r4, #25
 8007762:	e7f4      	b.n	800774e <_printf_float+0x456>

08007764 <_printf_common>:
 8007764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007768:	4616      	mov	r6, r2
 800776a:	4699      	mov	r9, r3
 800776c:	688a      	ldr	r2, [r1, #8]
 800776e:	690b      	ldr	r3, [r1, #16]
 8007770:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007774:	4293      	cmp	r3, r2
 8007776:	bfb8      	it	lt
 8007778:	4613      	movlt	r3, r2
 800777a:	6033      	str	r3, [r6, #0]
 800777c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007780:	4607      	mov	r7, r0
 8007782:	460c      	mov	r4, r1
 8007784:	b10a      	cbz	r2, 800778a <_printf_common+0x26>
 8007786:	3301      	adds	r3, #1
 8007788:	6033      	str	r3, [r6, #0]
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	0699      	lsls	r1, r3, #26
 800778e:	bf42      	ittt	mi
 8007790:	6833      	ldrmi	r3, [r6, #0]
 8007792:	3302      	addmi	r3, #2
 8007794:	6033      	strmi	r3, [r6, #0]
 8007796:	6825      	ldr	r5, [r4, #0]
 8007798:	f015 0506 	ands.w	r5, r5, #6
 800779c:	d106      	bne.n	80077ac <_printf_common+0x48>
 800779e:	f104 0a19 	add.w	sl, r4, #25
 80077a2:	68e3      	ldr	r3, [r4, #12]
 80077a4:	6832      	ldr	r2, [r6, #0]
 80077a6:	1a9b      	subs	r3, r3, r2
 80077a8:	42ab      	cmp	r3, r5
 80077aa:	dc26      	bgt.n	80077fa <_printf_common+0x96>
 80077ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077b0:	1e13      	subs	r3, r2, #0
 80077b2:	6822      	ldr	r2, [r4, #0]
 80077b4:	bf18      	it	ne
 80077b6:	2301      	movne	r3, #1
 80077b8:	0692      	lsls	r2, r2, #26
 80077ba:	d42b      	bmi.n	8007814 <_printf_common+0xb0>
 80077bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077c0:	4649      	mov	r1, r9
 80077c2:	4638      	mov	r0, r7
 80077c4:	47c0      	blx	r8
 80077c6:	3001      	adds	r0, #1
 80077c8:	d01e      	beq.n	8007808 <_printf_common+0xa4>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	6922      	ldr	r2, [r4, #16]
 80077ce:	f003 0306 	and.w	r3, r3, #6
 80077d2:	2b04      	cmp	r3, #4
 80077d4:	bf02      	ittt	eq
 80077d6:	68e5      	ldreq	r5, [r4, #12]
 80077d8:	6833      	ldreq	r3, [r6, #0]
 80077da:	1aed      	subeq	r5, r5, r3
 80077dc:	68a3      	ldr	r3, [r4, #8]
 80077de:	bf0c      	ite	eq
 80077e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077e4:	2500      	movne	r5, #0
 80077e6:	4293      	cmp	r3, r2
 80077e8:	bfc4      	itt	gt
 80077ea:	1a9b      	subgt	r3, r3, r2
 80077ec:	18ed      	addgt	r5, r5, r3
 80077ee:	2600      	movs	r6, #0
 80077f0:	341a      	adds	r4, #26
 80077f2:	42b5      	cmp	r5, r6
 80077f4:	d11a      	bne.n	800782c <_printf_common+0xc8>
 80077f6:	2000      	movs	r0, #0
 80077f8:	e008      	b.n	800780c <_printf_common+0xa8>
 80077fa:	2301      	movs	r3, #1
 80077fc:	4652      	mov	r2, sl
 80077fe:	4649      	mov	r1, r9
 8007800:	4638      	mov	r0, r7
 8007802:	47c0      	blx	r8
 8007804:	3001      	adds	r0, #1
 8007806:	d103      	bne.n	8007810 <_printf_common+0xac>
 8007808:	f04f 30ff 	mov.w	r0, #4294967295
 800780c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007810:	3501      	adds	r5, #1
 8007812:	e7c6      	b.n	80077a2 <_printf_common+0x3e>
 8007814:	18e1      	adds	r1, r4, r3
 8007816:	1c5a      	adds	r2, r3, #1
 8007818:	2030      	movs	r0, #48	; 0x30
 800781a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800781e:	4422      	add	r2, r4
 8007820:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007824:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007828:	3302      	adds	r3, #2
 800782a:	e7c7      	b.n	80077bc <_printf_common+0x58>
 800782c:	2301      	movs	r3, #1
 800782e:	4622      	mov	r2, r4
 8007830:	4649      	mov	r1, r9
 8007832:	4638      	mov	r0, r7
 8007834:	47c0      	blx	r8
 8007836:	3001      	adds	r0, #1
 8007838:	d0e6      	beq.n	8007808 <_printf_common+0xa4>
 800783a:	3601      	adds	r6, #1
 800783c:	e7d9      	b.n	80077f2 <_printf_common+0x8e>
	...

08007840 <_printf_i>:
 8007840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007844:	7e0f      	ldrb	r7, [r1, #24]
 8007846:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007848:	2f78      	cmp	r7, #120	; 0x78
 800784a:	4691      	mov	r9, r2
 800784c:	4680      	mov	r8, r0
 800784e:	460c      	mov	r4, r1
 8007850:	469a      	mov	sl, r3
 8007852:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007856:	d807      	bhi.n	8007868 <_printf_i+0x28>
 8007858:	2f62      	cmp	r7, #98	; 0x62
 800785a:	d80a      	bhi.n	8007872 <_printf_i+0x32>
 800785c:	2f00      	cmp	r7, #0
 800785e:	f000 80d4 	beq.w	8007a0a <_printf_i+0x1ca>
 8007862:	2f58      	cmp	r7, #88	; 0x58
 8007864:	f000 80c0 	beq.w	80079e8 <_printf_i+0x1a8>
 8007868:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800786c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007870:	e03a      	b.n	80078e8 <_printf_i+0xa8>
 8007872:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007876:	2b15      	cmp	r3, #21
 8007878:	d8f6      	bhi.n	8007868 <_printf_i+0x28>
 800787a:	a101      	add	r1, pc, #4	; (adr r1, 8007880 <_printf_i+0x40>)
 800787c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007880:	080078d9 	.word	0x080078d9
 8007884:	080078ed 	.word	0x080078ed
 8007888:	08007869 	.word	0x08007869
 800788c:	08007869 	.word	0x08007869
 8007890:	08007869 	.word	0x08007869
 8007894:	08007869 	.word	0x08007869
 8007898:	080078ed 	.word	0x080078ed
 800789c:	08007869 	.word	0x08007869
 80078a0:	08007869 	.word	0x08007869
 80078a4:	08007869 	.word	0x08007869
 80078a8:	08007869 	.word	0x08007869
 80078ac:	080079f1 	.word	0x080079f1
 80078b0:	08007919 	.word	0x08007919
 80078b4:	080079ab 	.word	0x080079ab
 80078b8:	08007869 	.word	0x08007869
 80078bc:	08007869 	.word	0x08007869
 80078c0:	08007a13 	.word	0x08007a13
 80078c4:	08007869 	.word	0x08007869
 80078c8:	08007919 	.word	0x08007919
 80078cc:	08007869 	.word	0x08007869
 80078d0:	08007869 	.word	0x08007869
 80078d4:	080079b3 	.word	0x080079b3
 80078d8:	682b      	ldr	r3, [r5, #0]
 80078da:	1d1a      	adds	r2, r3, #4
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	602a      	str	r2, [r5, #0]
 80078e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80078e8:	2301      	movs	r3, #1
 80078ea:	e09f      	b.n	8007a2c <_printf_i+0x1ec>
 80078ec:	6820      	ldr	r0, [r4, #0]
 80078ee:	682b      	ldr	r3, [r5, #0]
 80078f0:	0607      	lsls	r7, r0, #24
 80078f2:	f103 0104 	add.w	r1, r3, #4
 80078f6:	6029      	str	r1, [r5, #0]
 80078f8:	d501      	bpl.n	80078fe <_printf_i+0xbe>
 80078fa:	681e      	ldr	r6, [r3, #0]
 80078fc:	e003      	b.n	8007906 <_printf_i+0xc6>
 80078fe:	0646      	lsls	r6, r0, #25
 8007900:	d5fb      	bpl.n	80078fa <_printf_i+0xba>
 8007902:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007906:	2e00      	cmp	r6, #0
 8007908:	da03      	bge.n	8007912 <_printf_i+0xd2>
 800790a:	232d      	movs	r3, #45	; 0x2d
 800790c:	4276      	negs	r6, r6
 800790e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007912:	485a      	ldr	r0, [pc, #360]	; (8007a7c <_printf_i+0x23c>)
 8007914:	230a      	movs	r3, #10
 8007916:	e012      	b.n	800793e <_printf_i+0xfe>
 8007918:	682b      	ldr	r3, [r5, #0]
 800791a:	6820      	ldr	r0, [r4, #0]
 800791c:	1d19      	adds	r1, r3, #4
 800791e:	6029      	str	r1, [r5, #0]
 8007920:	0605      	lsls	r5, r0, #24
 8007922:	d501      	bpl.n	8007928 <_printf_i+0xe8>
 8007924:	681e      	ldr	r6, [r3, #0]
 8007926:	e002      	b.n	800792e <_printf_i+0xee>
 8007928:	0641      	lsls	r1, r0, #25
 800792a:	d5fb      	bpl.n	8007924 <_printf_i+0xe4>
 800792c:	881e      	ldrh	r6, [r3, #0]
 800792e:	4853      	ldr	r0, [pc, #332]	; (8007a7c <_printf_i+0x23c>)
 8007930:	2f6f      	cmp	r7, #111	; 0x6f
 8007932:	bf0c      	ite	eq
 8007934:	2308      	moveq	r3, #8
 8007936:	230a      	movne	r3, #10
 8007938:	2100      	movs	r1, #0
 800793a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800793e:	6865      	ldr	r5, [r4, #4]
 8007940:	60a5      	str	r5, [r4, #8]
 8007942:	2d00      	cmp	r5, #0
 8007944:	bfa2      	ittt	ge
 8007946:	6821      	ldrge	r1, [r4, #0]
 8007948:	f021 0104 	bicge.w	r1, r1, #4
 800794c:	6021      	strge	r1, [r4, #0]
 800794e:	b90e      	cbnz	r6, 8007954 <_printf_i+0x114>
 8007950:	2d00      	cmp	r5, #0
 8007952:	d04b      	beq.n	80079ec <_printf_i+0x1ac>
 8007954:	4615      	mov	r5, r2
 8007956:	fbb6 f1f3 	udiv	r1, r6, r3
 800795a:	fb03 6711 	mls	r7, r3, r1, r6
 800795e:	5dc7      	ldrb	r7, [r0, r7]
 8007960:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007964:	4637      	mov	r7, r6
 8007966:	42bb      	cmp	r3, r7
 8007968:	460e      	mov	r6, r1
 800796a:	d9f4      	bls.n	8007956 <_printf_i+0x116>
 800796c:	2b08      	cmp	r3, #8
 800796e:	d10b      	bne.n	8007988 <_printf_i+0x148>
 8007970:	6823      	ldr	r3, [r4, #0]
 8007972:	07de      	lsls	r6, r3, #31
 8007974:	d508      	bpl.n	8007988 <_printf_i+0x148>
 8007976:	6923      	ldr	r3, [r4, #16]
 8007978:	6861      	ldr	r1, [r4, #4]
 800797a:	4299      	cmp	r1, r3
 800797c:	bfde      	ittt	le
 800797e:	2330      	movle	r3, #48	; 0x30
 8007980:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007984:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007988:	1b52      	subs	r2, r2, r5
 800798a:	6122      	str	r2, [r4, #16]
 800798c:	f8cd a000 	str.w	sl, [sp]
 8007990:	464b      	mov	r3, r9
 8007992:	aa03      	add	r2, sp, #12
 8007994:	4621      	mov	r1, r4
 8007996:	4640      	mov	r0, r8
 8007998:	f7ff fee4 	bl	8007764 <_printf_common>
 800799c:	3001      	adds	r0, #1
 800799e:	d14a      	bne.n	8007a36 <_printf_i+0x1f6>
 80079a0:	f04f 30ff 	mov.w	r0, #4294967295
 80079a4:	b004      	add	sp, #16
 80079a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	f043 0320 	orr.w	r3, r3, #32
 80079b0:	6023      	str	r3, [r4, #0]
 80079b2:	4833      	ldr	r0, [pc, #204]	; (8007a80 <_printf_i+0x240>)
 80079b4:	2778      	movs	r7, #120	; 0x78
 80079b6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80079ba:	6823      	ldr	r3, [r4, #0]
 80079bc:	6829      	ldr	r1, [r5, #0]
 80079be:	061f      	lsls	r7, r3, #24
 80079c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80079c4:	d402      	bmi.n	80079cc <_printf_i+0x18c>
 80079c6:	065f      	lsls	r7, r3, #25
 80079c8:	bf48      	it	mi
 80079ca:	b2b6      	uxthmi	r6, r6
 80079cc:	07df      	lsls	r7, r3, #31
 80079ce:	bf48      	it	mi
 80079d0:	f043 0320 	orrmi.w	r3, r3, #32
 80079d4:	6029      	str	r1, [r5, #0]
 80079d6:	bf48      	it	mi
 80079d8:	6023      	strmi	r3, [r4, #0]
 80079da:	b91e      	cbnz	r6, 80079e4 <_printf_i+0x1a4>
 80079dc:	6823      	ldr	r3, [r4, #0]
 80079de:	f023 0320 	bic.w	r3, r3, #32
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	2310      	movs	r3, #16
 80079e6:	e7a7      	b.n	8007938 <_printf_i+0xf8>
 80079e8:	4824      	ldr	r0, [pc, #144]	; (8007a7c <_printf_i+0x23c>)
 80079ea:	e7e4      	b.n	80079b6 <_printf_i+0x176>
 80079ec:	4615      	mov	r5, r2
 80079ee:	e7bd      	b.n	800796c <_printf_i+0x12c>
 80079f0:	682b      	ldr	r3, [r5, #0]
 80079f2:	6826      	ldr	r6, [r4, #0]
 80079f4:	6961      	ldr	r1, [r4, #20]
 80079f6:	1d18      	adds	r0, r3, #4
 80079f8:	6028      	str	r0, [r5, #0]
 80079fa:	0635      	lsls	r5, r6, #24
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	d501      	bpl.n	8007a04 <_printf_i+0x1c4>
 8007a00:	6019      	str	r1, [r3, #0]
 8007a02:	e002      	b.n	8007a0a <_printf_i+0x1ca>
 8007a04:	0670      	lsls	r0, r6, #25
 8007a06:	d5fb      	bpl.n	8007a00 <_printf_i+0x1c0>
 8007a08:	8019      	strh	r1, [r3, #0]
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	6123      	str	r3, [r4, #16]
 8007a0e:	4615      	mov	r5, r2
 8007a10:	e7bc      	b.n	800798c <_printf_i+0x14c>
 8007a12:	682b      	ldr	r3, [r5, #0]
 8007a14:	1d1a      	adds	r2, r3, #4
 8007a16:	602a      	str	r2, [r5, #0]
 8007a18:	681d      	ldr	r5, [r3, #0]
 8007a1a:	6862      	ldr	r2, [r4, #4]
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	4628      	mov	r0, r5
 8007a20:	f7f8 fbde 	bl	80001e0 <memchr>
 8007a24:	b108      	cbz	r0, 8007a2a <_printf_i+0x1ea>
 8007a26:	1b40      	subs	r0, r0, r5
 8007a28:	6060      	str	r0, [r4, #4]
 8007a2a:	6863      	ldr	r3, [r4, #4]
 8007a2c:	6123      	str	r3, [r4, #16]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a34:	e7aa      	b.n	800798c <_printf_i+0x14c>
 8007a36:	6923      	ldr	r3, [r4, #16]
 8007a38:	462a      	mov	r2, r5
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4640      	mov	r0, r8
 8007a3e:	47d0      	blx	sl
 8007a40:	3001      	adds	r0, #1
 8007a42:	d0ad      	beq.n	80079a0 <_printf_i+0x160>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	079b      	lsls	r3, r3, #30
 8007a48:	d413      	bmi.n	8007a72 <_printf_i+0x232>
 8007a4a:	68e0      	ldr	r0, [r4, #12]
 8007a4c:	9b03      	ldr	r3, [sp, #12]
 8007a4e:	4298      	cmp	r0, r3
 8007a50:	bfb8      	it	lt
 8007a52:	4618      	movlt	r0, r3
 8007a54:	e7a6      	b.n	80079a4 <_printf_i+0x164>
 8007a56:	2301      	movs	r3, #1
 8007a58:	4632      	mov	r2, r6
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	4640      	mov	r0, r8
 8007a5e:	47d0      	blx	sl
 8007a60:	3001      	adds	r0, #1
 8007a62:	d09d      	beq.n	80079a0 <_printf_i+0x160>
 8007a64:	3501      	adds	r5, #1
 8007a66:	68e3      	ldr	r3, [r4, #12]
 8007a68:	9903      	ldr	r1, [sp, #12]
 8007a6a:	1a5b      	subs	r3, r3, r1
 8007a6c:	42ab      	cmp	r3, r5
 8007a6e:	dcf2      	bgt.n	8007a56 <_printf_i+0x216>
 8007a70:	e7eb      	b.n	8007a4a <_printf_i+0x20a>
 8007a72:	2500      	movs	r5, #0
 8007a74:	f104 0619 	add.w	r6, r4, #25
 8007a78:	e7f5      	b.n	8007a66 <_printf_i+0x226>
 8007a7a:	bf00      	nop
 8007a7c:	0800afe7 	.word	0x0800afe7
 8007a80:	0800aff8 	.word	0x0800aff8

08007a84 <std>:
 8007a84:	2300      	movs	r3, #0
 8007a86:	b510      	push	{r4, lr}
 8007a88:	4604      	mov	r4, r0
 8007a8a:	e9c0 3300 	strd	r3, r3, [r0]
 8007a8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a92:	6083      	str	r3, [r0, #8]
 8007a94:	8181      	strh	r1, [r0, #12]
 8007a96:	6643      	str	r3, [r0, #100]	; 0x64
 8007a98:	81c2      	strh	r2, [r0, #14]
 8007a9a:	6183      	str	r3, [r0, #24]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	2208      	movs	r2, #8
 8007aa0:	305c      	adds	r0, #92	; 0x5c
 8007aa2:	f000 f94d 	bl	8007d40 <memset>
 8007aa6:	4b0d      	ldr	r3, [pc, #52]	; (8007adc <std+0x58>)
 8007aa8:	6263      	str	r3, [r4, #36]	; 0x24
 8007aaa:	4b0d      	ldr	r3, [pc, #52]	; (8007ae0 <std+0x5c>)
 8007aac:	62a3      	str	r3, [r4, #40]	; 0x28
 8007aae:	4b0d      	ldr	r3, [pc, #52]	; (8007ae4 <std+0x60>)
 8007ab0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <std+0x64>)
 8007ab4:	6323      	str	r3, [r4, #48]	; 0x30
 8007ab6:	4b0d      	ldr	r3, [pc, #52]	; (8007aec <std+0x68>)
 8007ab8:	6224      	str	r4, [r4, #32]
 8007aba:	429c      	cmp	r4, r3
 8007abc:	d006      	beq.n	8007acc <std+0x48>
 8007abe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007ac2:	4294      	cmp	r4, r2
 8007ac4:	d002      	beq.n	8007acc <std+0x48>
 8007ac6:	33d0      	adds	r3, #208	; 0xd0
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d105      	bne.n	8007ad8 <std+0x54>
 8007acc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ad4:	f000 b9b0 	b.w	8007e38 <__retarget_lock_init_recursive>
 8007ad8:	bd10      	pop	{r4, pc}
 8007ada:	bf00      	nop
 8007adc:	08007c49 	.word	0x08007c49
 8007ae0:	08007c6b 	.word	0x08007c6b
 8007ae4:	08007ca3 	.word	0x08007ca3
 8007ae8:	08007cc7 	.word	0x08007cc7
 8007aec:	20000ad0 	.word	0x20000ad0

08007af0 <stdio_exit_handler>:
 8007af0:	4a02      	ldr	r2, [pc, #8]	; (8007afc <stdio_exit_handler+0xc>)
 8007af2:	4903      	ldr	r1, [pc, #12]	; (8007b00 <stdio_exit_handler+0x10>)
 8007af4:	4803      	ldr	r0, [pc, #12]	; (8007b04 <stdio_exit_handler+0x14>)
 8007af6:	f000 b869 	b.w	8007bcc <_fwalk_sglue>
 8007afa:	bf00      	nop
 8007afc:	20000084 	.word	0x20000084
 8007b00:	080097e9 	.word	0x080097e9
 8007b04:	20000090 	.word	0x20000090

08007b08 <cleanup_stdio>:
 8007b08:	6841      	ldr	r1, [r0, #4]
 8007b0a:	4b0c      	ldr	r3, [pc, #48]	; (8007b3c <cleanup_stdio+0x34>)
 8007b0c:	4299      	cmp	r1, r3
 8007b0e:	b510      	push	{r4, lr}
 8007b10:	4604      	mov	r4, r0
 8007b12:	d001      	beq.n	8007b18 <cleanup_stdio+0x10>
 8007b14:	f001 fe68 	bl	80097e8 <_fflush_r>
 8007b18:	68a1      	ldr	r1, [r4, #8]
 8007b1a:	4b09      	ldr	r3, [pc, #36]	; (8007b40 <cleanup_stdio+0x38>)
 8007b1c:	4299      	cmp	r1, r3
 8007b1e:	d002      	beq.n	8007b26 <cleanup_stdio+0x1e>
 8007b20:	4620      	mov	r0, r4
 8007b22:	f001 fe61 	bl	80097e8 <_fflush_r>
 8007b26:	68e1      	ldr	r1, [r4, #12]
 8007b28:	4b06      	ldr	r3, [pc, #24]	; (8007b44 <cleanup_stdio+0x3c>)
 8007b2a:	4299      	cmp	r1, r3
 8007b2c:	d004      	beq.n	8007b38 <cleanup_stdio+0x30>
 8007b2e:	4620      	mov	r0, r4
 8007b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b34:	f001 be58 	b.w	80097e8 <_fflush_r>
 8007b38:	bd10      	pop	{r4, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20000ad0 	.word	0x20000ad0
 8007b40:	20000b38 	.word	0x20000b38
 8007b44:	20000ba0 	.word	0x20000ba0

08007b48 <global_stdio_init.part.0>:
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	4b0b      	ldr	r3, [pc, #44]	; (8007b78 <global_stdio_init.part.0+0x30>)
 8007b4c:	4c0b      	ldr	r4, [pc, #44]	; (8007b7c <global_stdio_init.part.0+0x34>)
 8007b4e:	4a0c      	ldr	r2, [pc, #48]	; (8007b80 <global_stdio_init.part.0+0x38>)
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	4620      	mov	r0, r4
 8007b54:	2200      	movs	r2, #0
 8007b56:	2104      	movs	r1, #4
 8007b58:	f7ff ff94 	bl	8007a84 <std>
 8007b5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007b60:	2201      	movs	r2, #1
 8007b62:	2109      	movs	r1, #9
 8007b64:	f7ff ff8e 	bl	8007a84 <std>
 8007b68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007b6c:	2202      	movs	r2, #2
 8007b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b72:	2112      	movs	r1, #18
 8007b74:	f7ff bf86 	b.w	8007a84 <std>
 8007b78:	20000c08 	.word	0x20000c08
 8007b7c:	20000ad0 	.word	0x20000ad0
 8007b80:	08007af1 	.word	0x08007af1

08007b84 <__sfp_lock_acquire>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <__sfp_lock_acquire+0x8>)
 8007b86:	f000 b958 	b.w	8007e3a <__retarget_lock_acquire_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	20000c11 	.word	0x20000c11

08007b90 <__sfp_lock_release>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <__sfp_lock_release+0x8>)
 8007b92:	f000 b953 	b.w	8007e3c <__retarget_lock_release_recursive>
 8007b96:	bf00      	nop
 8007b98:	20000c11 	.word	0x20000c11

08007b9c <__sinit>:
 8007b9c:	b510      	push	{r4, lr}
 8007b9e:	4604      	mov	r4, r0
 8007ba0:	f7ff fff0 	bl	8007b84 <__sfp_lock_acquire>
 8007ba4:	6a23      	ldr	r3, [r4, #32]
 8007ba6:	b11b      	cbz	r3, 8007bb0 <__sinit+0x14>
 8007ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bac:	f7ff bff0 	b.w	8007b90 <__sfp_lock_release>
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <__sinit+0x28>)
 8007bb2:	6223      	str	r3, [r4, #32]
 8007bb4:	4b04      	ldr	r3, [pc, #16]	; (8007bc8 <__sinit+0x2c>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1f5      	bne.n	8007ba8 <__sinit+0xc>
 8007bbc:	f7ff ffc4 	bl	8007b48 <global_stdio_init.part.0>
 8007bc0:	e7f2      	b.n	8007ba8 <__sinit+0xc>
 8007bc2:	bf00      	nop
 8007bc4:	08007b09 	.word	0x08007b09
 8007bc8:	20000c08 	.word	0x20000c08

08007bcc <_fwalk_sglue>:
 8007bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bd0:	4607      	mov	r7, r0
 8007bd2:	4688      	mov	r8, r1
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	2600      	movs	r6, #0
 8007bd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bdc:	f1b9 0901 	subs.w	r9, r9, #1
 8007be0:	d505      	bpl.n	8007bee <_fwalk_sglue+0x22>
 8007be2:	6824      	ldr	r4, [r4, #0]
 8007be4:	2c00      	cmp	r4, #0
 8007be6:	d1f7      	bne.n	8007bd8 <_fwalk_sglue+0xc>
 8007be8:	4630      	mov	r0, r6
 8007bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bee:	89ab      	ldrh	r3, [r5, #12]
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d907      	bls.n	8007c04 <_fwalk_sglue+0x38>
 8007bf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	d003      	beq.n	8007c04 <_fwalk_sglue+0x38>
 8007bfc:	4629      	mov	r1, r5
 8007bfe:	4638      	mov	r0, r7
 8007c00:	47c0      	blx	r8
 8007c02:	4306      	orrs	r6, r0
 8007c04:	3568      	adds	r5, #104	; 0x68
 8007c06:	e7e9      	b.n	8007bdc <_fwalk_sglue+0x10>

08007c08 <siprintf>:
 8007c08:	b40e      	push	{r1, r2, r3}
 8007c0a:	b500      	push	{lr}
 8007c0c:	b09c      	sub	sp, #112	; 0x70
 8007c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8007c10:	9002      	str	r0, [sp, #8]
 8007c12:	9006      	str	r0, [sp, #24]
 8007c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c18:	4809      	ldr	r0, [pc, #36]	; (8007c40 <siprintf+0x38>)
 8007c1a:	9107      	str	r1, [sp, #28]
 8007c1c:	9104      	str	r1, [sp, #16]
 8007c1e:	4909      	ldr	r1, [pc, #36]	; (8007c44 <siprintf+0x3c>)
 8007c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c24:	9105      	str	r1, [sp, #20]
 8007c26:	6800      	ldr	r0, [r0, #0]
 8007c28:	9301      	str	r3, [sp, #4]
 8007c2a:	a902      	add	r1, sp, #8
 8007c2c:	f001 fc58 	bl	80094e0 <_svfiprintf_r>
 8007c30:	9b02      	ldr	r3, [sp, #8]
 8007c32:	2200      	movs	r2, #0
 8007c34:	701a      	strb	r2, [r3, #0]
 8007c36:	b01c      	add	sp, #112	; 0x70
 8007c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c3c:	b003      	add	sp, #12
 8007c3e:	4770      	bx	lr
 8007c40:	200000dc 	.word	0x200000dc
 8007c44:	ffff0208 	.word	0xffff0208

08007c48 <__sread>:
 8007c48:	b510      	push	{r4, lr}
 8007c4a:	460c      	mov	r4, r1
 8007c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c50:	f000 f8a4 	bl	8007d9c <_read_r>
 8007c54:	2800      	cmp	r0, #0
 8007c56:	bfab      	itete	ge
 8007c58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8007c5c:	181b      	addge	r3, r3, r0
 8007c5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c62:	bfac      	ite	ge
 8007c64:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c66:	81a3      	strhlt	r3, [r4, #12]
 8007c68:	bd10      	pop	{r4, pc}

08007c6a <__swrite>:
 8007c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6e:	461f      	mov	r7, r3
 8007c70:	898b      	ldrh	r3, [r1, #12]
 8007c72:	05db      	lsls	r3, r3, #23
 8007c74:	4605      	mov	r5, r0
 8007c76:	460c      	mov	r4, r1
 8007c78:	4616      	mov	r6, r2
 8007c7a:	d505      	bpl.n	8007c88 <__swrite+0x1e>
 8007c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c80:	2302      	movs	r3, #2
 8007c82:	2200      	movs	r2, #0
 8007c84:	f000 f878 	bl	8007d78 <_lseek_r>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c92:	81a3      	strh	r3, [r4, #12]
 8007c94:	4632      	mov	r2, r6
 8007c96:	463b      	mov	r3, r7
 8007c98:	4628      	mov	r0, r5
 8007c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c9e:	f000 b88f 	b.w	8007dc0 <_write_r>

08007ca2 <__sseek>:
 8007ca2:	b510      	push	{r4, lr}
 8007ca4:	460c      	mov	r4, r1
 8007ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007caa:	f000 f865 	bl	8007d78 <_lseek_r>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	89a3      	ldrh	r3, [r4, #12]
 8007cb2:	bf15      	itete	ne
 8007cb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8007cb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007cba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007cbe:	81a3      	strheq	r3, [r4, #12]
 8007cc0:	bf18      	it	ne
 8007cc2:	81a3      	strhne	r3, [r4, #12]
 8007cc4:	bd10      	pop	{r4, pc}

08007cc6 <__sclose>:
 8007cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cca:	f000 b845 	b.w	8007d58 <_close_r>

08007cce <_vsniprintf_r>:
 8007cce:	b530      	push	{r4, r5, lr}
 8007cd0:	4614      	mov	r4, r2
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	b09b      	sub	sp, #108	; 0x6c
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	461a      	mov	r2, r3
 8007cda:	da05      	bge.n	8007ce8 <_vsniprintf_r+0x1a>
 8007cdc:	238b      	movs	r3, #139	; 0x8b
 8007cde:	6003      	str	r3, [r0, #0]
 8007ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce4:	b01b      	add	sp, #108	; 0x6c
 8007ce6:	bd30      	pop	{r4, r5, pc}
 8007ce8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007cec:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007cf0:	bf14      	ite	ne
 8007cf2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007cf6:	4623      	moveq	r3, r4
 8007cf8:	9302      	str	r3, [sp, #8]
 8007cfa:	9305      	str	r3, [sp, #20]
 8007cfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d00:	9100      	str	r1, [sp, #0]
 8007d02:	9104      	str	r1, [sp, #16]
 8007d04:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007d08:	4669      	mov	r1, sp
 8007d0a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007d0c:	f001 fbe8 	bl	80094e0 <_svfiprintf_r>
 8007d10:	1c43      	adds	r3, r0, #1
 8007d12:	bfbc      	itt	lt
 8007d14:	238b      	movlt	r3, #139	; 0x8b
 8007d16:	602b      	strlt	r3, [r5, #0]
 8007d18:	2c00      	cmp	r4, #0
 8007d1a:	d0e3      	beq.n	8007ce4 <_vsniprintf_r+0x16>
 8007d1c:	9b00      	ldr	r3, [sp, #0]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	701a      	strb	r2, [r3, #0]
 8007d22:	e7df      	b.n	8007ce4 <_vsniprintf_r+0x16>

08007d24 <vsniprintf>:
 8007d24:	b507      	push	{r0, r1, r2, lr}
 8007d26:	9300      	str	r3, [sp, #0]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	460a      	mov	r2, r1
 8007d2c:	4601      	mov	r1, r0
 8007d2e:	4803      	ldr	r0, [pc, #12]	; (8007d3c <vsniprintf+0x18>)
 8007d30:	6800      	ldr	r0, [r0, #0]
 8007d32:	f7ff ffcc 	bl	8007cce <_vsniprintf_r>
 8007d36:	b003      	add	sp, #12
 8007d38:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d3c:	200000dc 	.word	0x200000dc

08007d40 <memset>:
 8007d40:	4402      	add	r2, r0
 8007d42:	4603      	mov	r3, r0
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d100      	bne.n	8007d4a <memset+0xa>
 8007d48:	4770      	bx	lr
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	e7f9      	b.n	8007d44 <memset+0x4>

08007d50 <_localeconv_r>:
 8007d50:	4800      	ldr	r0, [pc, #0]	; (8007d54 <_localeconv_r+0x4>)
 8007d52:	4770      	bx	lr
 8007d54:	200001d0 	.word	0x200001d0

08007d58 <_close_r>:
 8007d58:	b538      	push	{r3, r4, r5, lr}
 8007d5a:	4d06      	ldr	r5, [pc, #24]	; (8007d74 <_close_r+0x1c>)
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	4604      	mov	r4, r0
 8007d60:	4608      	mov	r0, r1
 8007d62:	602b      	str	r3, [r5, #0]
 8007d64:	f7fa feb5 	bl	8002ad2 <_close>
 8007d68:	1c43      	adds	r3, r0, #1
 8007d6a:	d102      	bne.n	8007d72 <_close_r+0x1a>
 8007d6c:	682b      	ldr	r3, [r5, #0]
 8007d6e:	b103      	cbz	r3, 8007d72 <_close_r+0x1a>
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	20000c0c 	.word	0x20000c0c

08007d78 <_lseek_r>:
 8007d78:	b538      	push	{r3, r4, r5, lr}
 8007d7a:	4d07      	ldr	r5, [pc, #28]	; (8007d98 <_lseek_r+0x20>)
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	4608      	mov	r0, r1
 8007d80:	4611      	mov	r1, r2
 8007d82:	2200      	movs	r2, #0
 8007d84:	602a      	str	r2, [r5, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f7fa feca 	bl	8002b20 <_lseek>
 8007d8c:	1c43      	adds	r3, r0, #1
 8007d8e:	d102      	bne.n	8007d96 <_lseek_r+0x1e>
 8007d90:	682b      	ldr	r3, [r5, #0]
 8007d92:	b103      	cbz	r3, 8007d96 <_lseek_r+0x1e>
 8007d94:	6023      	str	r3, [r4, #0]
 8007d96:	bd38      	pop	{r3, r4, r5, pc}
 8007d98:	20000c0c 	.word	0x20000c0c

08007d9c <_read_r>:
 8007d9c:	b538      	push	{r3, r4, r5, lr}
 8007d9e:	4d07      	ldr	r5, [pc, #28]	; (8007dbc <_read_r+0x20>)
 8007da0:	4604      	mov	r4, r0
 8007da2:	4608      	mov	r0, r1
 8007da4:	4611      	mov	r1, r2
 8007da6:	2200      	movs	r2, #0
 8007da8:	602a      	str	r2, [r5, #0]
 8007daa:	461a      	mov	r2, r3
 8007dac:	f7fa fe58 	bl	8002a60 <_read>
 8007db0:	1c43      	adds	r3, r0, #1
 8007db2:	d102      	bne.n	8007dba <_read_r+0x1e>
 8007db4:	682b      	ldr	r3, [r5, #0]
 8007db6:	b103      	cbz	r3, 8007dba <_read_r+0x1e>
 8007db8:	6023      	str	r3, [r4, #0]
 8007dba:	bd38      	pop	{r3, r4, r5, pc}
 8007dbc:	20000c0c 	.word	0x20000c0c

08007dc0 <_write_r>:
 8007dc0:	b538      	push	{r3, r4, r5, lr}
 8007dc2:	4d07      	ldr	r5, [pc, #28]	; (8007de0 <_write_r+0x20>)
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	4608      	mov	r0, r1
 8007dc8:	4611      	mov	r1, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	602a      	str	r2, [r5, #0]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	f7fa fe63 	bl	8002a9a <_write>
 8007dd4:	1c43      	adds	r3, r0, #1
 8007dd6:	d102      	bne.n	8007dde <_write_r+0x1e>
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	b103      	cbz	r3, 8007dde <_write_r+0x1e>
 8007ddc:	6023      	str	r3, [r4, #0]
 8007dde:	bd38      	pop	{r3, r4, r5, pc}
 8007de0:	20000c0c 	.word	0x20000c0c

08007de4 <__errno>:
 8007de4:	4b01      	ldr	r3, [pc, #4]	; (8007dec <__errno+0x8>)
 8007de6:	6818      	ldr	r0, [r3, #0]
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	200000dc 	.word	0x200000dc

08007df0 <__libc_init_array>:
 8007df0:	b570      	push	{r4, r5, r6, lr}
 8007df2:	4d0d      	ldr	r5, [pc, #52]	; (8007e28 <__libc_init_array+0x38>)
 8007df4:	4c0d      	ldr	r4, [pc, #52]	; (8007e2c <__libc_init_array+0x3c>)
 8007df6:	1b64      	subs	r4, r4, r5
 8007df8:	10a4      	asrs	r4, r4, #2
 8007dfa:	2600      	movs	r6, #0
 8007dfc:	42a6      	cmp	r6, r4
 8007dfe:	d109      	bne.n	8007e14 <__libc_init_array+0x24>
 8007e00:	4d0b      	ldr	r5, [pc, #44]	; (8007e30 <__libc_init_array+0x40>)
 8007e02:	4c0c      	ldr	r4, [pc, #48]	; (8007e34 <__libc_init_array+0x44>)
 8007e04:	f002 ffcc 	bl	800ada0 <_init>
 8007e08:	1b64      	subs	r4, r4, r5
 8007e0a:	10a4      	asrs	r4, r4, #2
 8007e0c:	2600      	movs	r6, #0
 8007e0e:	42a6      	cmp	r6, r4
 8007e10:	d105      	bne.n	8007e1e <__libc_init_array+0x2e>
 8007e12:	bd70      	pop	{r4, r5, r6, pc}
 8007e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e18:	4798      	blx	r3
 8007e1a:	3601      	adds	r6, #1
 8007e1c:	e7ee      	b.n	8007dfc <__libc_init_array+0xc>
 8007e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e22:	4798      	blx	r3
 8007e24:	3601      	adds	r6, #1
 8007e26:	e7f2      	b.n	8007e0e <__libc_init_array+0x1e>
 8007e28:	0800b280 	.word	0x0800b280
 8007e2c:	0800b280 	.word	0x0800b280
 8007e30:	0800b280 	.word	0x0800b280
 8007e34:	0800b284 	.word	0x0800b284

08007e38 <__retarget_lock_init_recursive>:
 8007e38:	4770      	bx	lr

08007e3a <__retarget_lock_acquire_recursive>:
 8007e3a:	4770      	bx	lr

08007e3c <__retarget_lock_release_recursive>:
 8007e3c:	4770      	bx	lr

08007e3e <quorem>:
 8007e3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e42:	6903      	ldr	r3, [r0, #16]
 8007e44:	690c      	ldr	r4, [r1, #16]
 8007e46:	42a3      	cmp	r3, r4
 8007e48:	4607      	mov	r7, r0
 8007e4a:	db7e      	blt.n	8007f4a <quorem+0x10c>
 8007e4c:	3c01      	subs	r4, #1
 8007e4e:	f101 0814 	add.w	r8, r1, #20
 8007e52:	f100 0514 	add.w	r5, r0, #20
 8007e56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e5a:	9301      	str	r3, [sp, #4]
 8007e5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e64:	3301      	adds	r3, #1
 8007e66:	429a      	cmp	r2, r3
 8007e68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e70:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e74:	d331      	bcc.n	8007eda <quorem+0x9c>
 8007e76:	f04f 0e00 	mov.w	lr, #0
 8007e7a:	4640      	mov	r0, r8
 8007e7c:	46ac      	mov	ip, r5
 8007e7e:	46f2      	mov	sl, lr
 8007e80:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e84:	b293      	uxth	r3, r2
 8007e86:	fb06 e303 	mla	r3, r6, r3, lr
 8007e8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e8e:	0c1a      	lsrs	r2, r3, #16
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	ebaa 0303 	sub.w	r3, sl, r3
 8007e96:	f8dc a000 	ldr.w	sl, [ip]
 8007e9a:	fa13 f38a 	uxtah	r3, r3, sl
 8007e9e:	fb06 220e 	mla	r2, r6, lr, r2
 8007ea2:	9300      	str	r3, [sp, #0]
 8007ea4:	9b00      	ldr	r3, [sp, #0]
 8007ea6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007eaa:	b292      	uxth	r2, r2
 8007eac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007eb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8007eb8:	4581      	cmp	r9, r0
 8007eba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ebe:	f84c 3b04 	str.w	r3, [ip], #4
 8007ec2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007ec6:	d2db      	bcs.n	8007e80 <quorem+0x42>
 8007ec8:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ecc:	b92b      	cbnz	r3, 8007eda <quorem+0x9c>
 8007ece:	9b01      	ldr	r3, [sp, #4]
 8007ed0:	3b04      	subs	r3, #4
 8007ed2:	429d      	cmp	r5, r3
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	d32c      	bcc.n	8007f32 <quorem+0xf4>
 8007ed8:	613c      	str	r4, [r7, #16]
 8007eda:	4638      	mov	r0, r7
 8007edc:	f001 f9a6 	bl	800922c <__mcmp>
 8007ee0:	2800      	cmp	r0, #0
 8007ee2:	db22      	blt.n	8007f2a <quorem+0xec>
 8007ee4:	3601      	adds	r6, #1
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	2000      	movs	r0, #0
 8007eea:	f858 2b04 	ldr.w	r2, [r8], #4
 8007eee:	f8d1 c000 	ldr.w	ip, [r1]
 8007ef2:	b293      	uxth	r3, r2
 8007ef4:	1ac3      	subs	r3, r0, r3
 8007ef6:	0c12      	lsrs	r2, r2, #16
 8007ef8:	fa13 f38c 	uxtah	r3, r3, ip
 8007efc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007f00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007f0a:	45c1      	cmp	r9, r8
 8007f0c:	f841 3b04 	str.w	r3, [r1], #4
 8007f10:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007f14:	d2e9      	bcs.n	8007eea <quorem+0xac>
 8007f16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007f1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007f1e:	b922      	cbnz	r2, 8007f2a <quorem+0xec>
 8007f20:	3b04      	subs	r3, #4
 8007f22:	429d      	cmp	r5, r3
 8007f24:	461a      	mov	r2, r3
 8007f26:	d30a      	bcc.n	8007f3e <quorem+0x100>
 8007f28:	613c      	str	r4, [r7, #16]
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	b003      	add	sp, #12
 8007f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	3b04      	subs	r3, #4
 8007f36:	2a00      	cmp	r2, #0
 8007f38:	d1ce      	bne.n	8007ed8 <quorem+0x9a>
 8007f3a:	3c01      	subs	r4, #1
 8007f3c:	e7c9      	b.n	8007ed2 <quorem+0x94>
 8007f3e:	6812      	ldr	r2, [r2, #0]
 8007f40:	3b04      	subs	r3, #4
 8007f42:	2a00      	cmp	r2, #0
 8007f44:	d1f0      	bne.n	8007f28 <quorem+0xea>
 8007f46:	3c01      	subs	r4, #1
 8007f48:	e7eb      	b.n	8007f22 <quorem+0xe4>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	e7ee      	b.n	8007f2c <quorem+0xee>
	...

08007f50 <_dtoa_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	ed2d 8b04 	vpush	{d8-d9}
 8007f58:	69c5      	ldr	r5, [r0, #28]
 8007f5a:	b093      	sub	sp, #76	; 0x4c
 8007f5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007f60:	ec57 6b10 	vmov	r6, r7, d0
 8007f64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007f68:	9107      	str	r1, [sp, #28]
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	920a      	str	r2, [sp, #40]	; 0x28
 8007f6e:	930d      	str	r3, [sp, #52]	; 0x34
 8007f70:	b975      	cbnz	r5, 8007f90 <_dtoa_r+0x40>
 8007f72:	2010      	movs	r0, #16
 8007f74:	f000 fe2a 	bl	8008bcc <malloc>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	61e0      	str	r0, [r4, #28]
 8007f7c:	b920      	cbnz	r0, 8007f88 <_dtoa_r+0x38>
 8007f7e:	4bae      	ldr	r3, [pc, #696]	; (8008238 <_dtoa_r+0x2e8>)
 8007f80:	21ef      	movs	r1, #239	; 0xef
 8007f82:	48ae      	ldr	r0, [pc, #696]	; (800823c <_dtoa_r+0x2ec>)
 8007f84:	f001 fc90 	bl	80098a8 <__assert_func>
 8007f88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007f8c:	6005      	str	r5, [r0, #0]
 8007f8e:	60c5      	str	r5, [r0, #12]
 8007f90:	69e3      	ldr	r3, [r4, #28]
 8007f92:	6819      	ldr	r1, [r3, #0]
 8007f94:	b151      	cbz	r1, 8007fac <_dtoa_r+0x5c>
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	604a      	str	r2, [r1, #4]
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	4093      	lsls	r3, r2
 8007f9e:	608b      	str	r3, [r1, #8]
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f000 ff07 	bl	8008db4 <_Bfree>
 8007fa6:	69e3      	ldr	r3, [r4, #28]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
 8007fac:	1e3b      	subs	r3, r7, #0
 8007fae:	bfbb      	ittet	lt
 8007fb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007fb4:	9303      	strlt	r3, [sp, #12]
 8007fb6:	2300      	movge	r3, #0
 8007fb8:	2201      	movlt	r2, #1
 8007fba:	bfac      	ite	ge
 8007fbc:	f8c8 3000 	strge.w	r3, [r8]
 8007fc0:	f8c8 2000 	strlt.w	r2, [r8]
 8007fc4:	4b9e      	ldr	r3, [pc, #632]	; (8008240 <_dtoa_r+0x2f0>)
 8007fc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007fca:	ea33 0308 	bics.w	r3, r3, r8
 8007fce:	d11b      	bne.n	8008008 <_dtoa_r+0xb8>
 8007fd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007fd2:	f242 730f 	movw	r3, #9999	; 0x270f
 8007fd6:	6013      	str	r3, [r2, #0]
 8007fd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007fdc:	4333      	orrs	r3, r6
 8007fde:	f000 8593 	beq.w	8008b08 <_dtoa_r+0xbb8>
 8007fe2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007fe4:	b963      	cbnz	r3, 8008000 <_dtoa_r+0xb0>
 8007fe6:	4b97      	ldr	r3, [pc, #604]	; (8008244 <_dtoa_r+0x2f4>)
 8007fe8:	e027      	b.n	800803a <_dtoa_r+0xea>
 8007fea:	4b97      	ldr	r3, [pc, #604]	; (8008248 <_dtoa_r+0x2f8>)
 8007fec:	9300      	str	r3, [sp, #0]
 8007fee:	3308      	adds	r3, #8
 8007ff0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ff2:	6013      	str	r3, [r2, #0]
 8007ff4:	9800      	ldr	r0, [sp, #0]
 8007ff6:	b013      	add	sp, #76	; 0x4c
 8007ff8:	ecbd 8b04 	vpop	{d8-d9}
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	4b90      	ldr	r3, [pc, #576]	; (8008244 <_dtoa_r+0x2f4>)
 8008002:	9300      	str	r3, [sp, #0]
 8008004:	3303      	adds	r3, #3
 8008006:	e7f3      	b.n	8007ff0 <_dtoa_r+0xa0>
 8008008:	ed9d 7b02 	vldr	d7, [sp, #8]
 800800c:	2200      	movs	r2, #0
 800800e:	ec51 0b17 	vmov	r0, r1, d7
 8008012:	eeb0 8a47 	vmov.f32	s16, s14
 8008016:	eef0 8a67 	vmov.f32	s17, s15
 800801a:	2300      	movs	r3, #0
 800801c:	f7f8 fd5c 	bl	8000ad8 <__aeabi_dcmpeq>
 8008020:	4681      	mov	r9, r0
 8008022:	b160      	cbz	r0, 800803e <_dtoa_r+0xee>
 8008024:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008026:	2301      	movs	r3, #1
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800802c:	2b00      	cmp	r3, #0
 800802e:	f000 8568 	beq.w	8008b02 <_dtoa_r+0xbb2>
 8008032:	4b86      	ldr	r3, [pc, #536]	; (800824c <_dtoa_r+0x2fc>)
 8008034:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	3b01      	subs	r3, #1
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	e7da      	b.n	8007ff4 <_dtoa_r+0xa4>
 800803e:	aa10      	add	r2, sp, #64	; 0x40
 8008040:	a911      	add	r1, sp, #68	; 0x44
 8008042:	4620      	mov	r0, r4
 8008044:	eeb0 0a48 	vmov.f32	s0, s16
 8008048:	eef0 0a68 	vmov.f32	s1, s17
 800804c:	f001 f994 	bl	8009378 <__d2b>
 8008050:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008054:	4682      	mov	sl, r0
 8008056:	2d00      	cmp	r5, #0
 8008058:	d07f      	beq.n	800815a <_dtoa_r+0x20a>
 800805a:	ee18 3a90 	vmov	r3, s17
 800805e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008062:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008066:	ec51 0b18 	vmov	r0, r1, d8
 800806a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800806e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008072:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008076:	4619      	mov	r1, r3
 8008078:	2200      	movs	r2, #0
 800807a:	4b75      	ldr	r3, [pc, #468]	; (8008250 <_dtoa_r+0x300>)
 800807c:	f7f8 f90c 	bl	8000298 <__aeabi_dsub>
 8008080:	a367      	add	r3, pc, #412	; (adr r3, 8008220 <_dtoa_r+0x2d0>)
 8008082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008086:	f7f8 fabf 	bl	8000608 <__aeabi_dmul>
 800808a:	a367      	add	r3, pc, #412	; (adr r3, 8008228 <_dtoa_r+0x2d8>)
 800808c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008090:	f7f8 f904 	bl	800029c <__adddf3>
 8008094:	4606      	mov	r6, r0
 8008096:	4628      	mov	r0, r5
 8008098:	460f      	mov	r7, r1
 800809a:	f7f8 fa4b 	bl	8000534 <__aeabi_i2d>
 800809e:	a364      	add	r3, pc, #400	; (adr r3, 8008230 <_dtoa_r+0x2e0>)
 80080a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080a4:	f7f8 fab0 	bl	8000608 <__aeabi_dmul>
 80080a8:	4602      	mov	r2, r0
 80080aa:	460b      	mov	r3, r1
 80080ac:	4630      	mov	r0, r6
 80080ae:	4639      	mov	r1, r7
 80080b0:	f7f8 f8f4 	bl	800029c <__adddf3>
 80080b4:	4606      	mov	r6, r0
 80080b6:	460f      	mov	r7, r1
 80080b8:	f7f8 fd56 	bl	8000b68 <__aeabi_d2iz>
 80080bc:	2200      	movs	r2, #0
 80080be:	4683      	mov	fp, r0
 80080c0:	2300      	movs	r3, #0
 80080c2:	4630      	mov	r0, r6
 80080c4:	4639      	mov	r1, r7
 80080c6:	f7f8 fd11 	bl	8000aec <__aeabi_dcmplt>
 80080ca:	b148      	cbz	r0, 80080e0 <_dtoa_r+0x190>
 80080cc:	4658      	mov	r0, fp
 80080ce:	f7f8 fa31 	bl	8000534 <__aeabi_i2d>
 80080d2:	4632      	mov	r2, r6
 80080d4:	463b      	mov	r3, r7
 80080d6:	f7f8 fcff 	bl	8000ad8 <__aeabi_dcmpeq>
 80080da:	b908      	cbnz	r0, 80080e0 <_dtoa_r+0x190>
 80080dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80080e0:	f1bb 0f16 	cmp.w	fp, #22
 80080e4:	d857      	bhi.n	8008196 <_dtoa_r+0x246>
 80080e6:	4b5b      	ldr	r3, [pc, #364]	; (8008254 <_dtoa_r+0x304>)
 80080e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80080ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f0:	ec51 0b18 	vmov	r0, r1, d8
 80080f4:	f7f8 fcfa 	bl	8000aec <__aeabi_dcmplt>
 80080f8:	2800      	cmp	r0, #0
 80080fa:	d04e      	beq.n	800819a <_dtoa_r+0x24a>
 80080fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008100:	2300      	movs	r3, #0
 8008102:	930c      	str	r3, [sp, #48]	; 0x30
 8008104:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008106:	1b5b      	subs	r3, r3, r5
 8008108:	1e5a      	subs	r2, r3, #1
 800810a:	bf45      	ittet	mi
 800810c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008110:	9305      	strmi	r3, [sp, #20]
 8008112:	2300      	movpl	r3, #0
 8008114:	2300      	movmi	r3, #0
 8008116:	9206      	str	r2, [sp, #24]
 8008118:	bf54      	ite	pl
 800811a:	9305      	strpl	r3, [sp, #20]
 800811c:	9306      	strmi	r3, [sp, #24]
 800811e:	f1bb 0f00 	cmp.w	fp, #0
 8008122:	db3c      	blt.n	800819e <_dtoa_r+0x24e>
 8008124:	9b06      	ldr	r3, [sp, #24]
 8008126:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800812a:	445b      	add	r3, fp
 800812c:	9306      	str	r3, [sp, #24]
 800812e:	2300      	movs	r3, #0
 8008130:	9308      	str	r3, [sp, #32]
 8008132:	9b07      	ldr	r3, [sp, #28]
 8008134:	2b09      	cmp	r3, #9
 8008136:	d868      	bhi.n	800820a <_dtoa_r+0x2ba>
 8008138:	2b05      	cmp	r3, #5
 800813a:	bfc4      	itt	gt
 800813c:	3b04      	subgt	r3, #4
 800813e:	9307      	strgt	r3, [sp, #28]
 8008140:	9b07      	ldr	r3, [sp, #28]
 8008142:	f1a3 0302 	sub.w	r3, r3, #2
 8008146:	bfcc      	ite	gt
 8008148:	2500      	movgt	r5, #0
 800814a:	2501      	movle	r5, #1
 800814c:	2b03      	cmp	r3, #3
 800814e:	f200 8085 	bhi.w	800825c <_dtoa_r+0x30c>
 8008152:	e8df f003 	tbb	[pc, r3]
 8008156:	3b2e      	.short	0x3b2e
 8008158:	5839      	.short	0x5839
 800815a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800815e:	441d      	add	r5, r3
 8008160:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008164:	2b20      	cmp	r3, #32
 8008166:	bfc1      	itttt	gt
 8008168:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800816c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008170:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008174:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008178:	bfd6      	itet	le
 800817a:	f1c3 0320 	rsble	r3, r3, #32
 800817e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008182:	fa06 f003 	lslle.w	r0, r6, r3
 8008186:	f7f8 f9c5 	bl	8000514 <__aeabi_ui2d>
 800818a:	2201      	movs	r2, #1
 800818c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008190:	3d01      	subs	r5, #1
 8008192:	920e      	str	r2, [sp, #56]	; 0x38
 8008194:	e76f      	b.n	8008076 <_dtoa_r+0x126>
 8008196:	2301      	movs	r3, #1
 8008198:	e7b3      	b.n	8008102 <_dtoa_r+0x1b2>
 800819a:	900c      	str	r0, [sp, #48]	; 0x30
 800819c:	e7b2      	b.n	8008104 <_dtoa_r+0x1b4>
 800819e:	9b05      	ldr	r3, [sp, #20]
 80081a0:	eba3 030b 	sub.w	r3, r3, fp
 80081a4:	9305      	str	r3, [sp, #20]
 80081a6:	f1cb 0300 	rsb	r3, fp, #0
 80081aa:	9308      	str	r3, [sp, #32]
 80081ac:	2300      	movs	r3, #0
 80081ae:	930b      	str	r3, [sp, #44]	; 0x2c
 80081b0:	e7bf      	b.n	8008132 <_dtoa_r+0x1e2>
 80081b2:	2300      	movs	r3, #0
 80081b4:	9309      	str	r3, [sp, #36]	; 0x24
 80081b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	dc52      	bgt.n	8008262 <_dtoa_r+0x312>
 80081bc:	2301      	movs	r3, #1
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	461a      	mov	r2, r3
 80081c4:	920a      	str	r2, [sp, #40]	; 0x28
 80081c6:	e00b      	b.n	80081e0 <_dtoa_r+0x290>
 80081c8:	2301      	movs	r3, #1
 80081ca:	e7f3      	b.n	80081b4 <_dtoa_r+0x264>
 80081cc:	2300      	movs	r3, #0
 80081ce:	9309      	str	r3, [sp, #36]	; 0x24
 80081d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d2:	445b      	add	r3, fp
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	3301      	adds	r3, #1
 80081d8:	2b01      	cmp	r3, #1
 80081da:	9304      	str	r3, [sp, #16]
 80081dc:	bfb8      	it	lt
 80081de:	2301      	movlt	r3, #1
 80081e0:	69e0      	ldr	r0, [r4, #28]
 80081e2:	2100      	movs	r1, #0
 80081e4:	2204      	movs	r2, #4
 80081e6:	f102 0614 	add.w	r6, r2, #20
 80081ea:	429e      	cmp	r6, r3
 80081ec:	d93d      	bls.n	800826a <_dtoa_r+0x31a>
 80081ee:	6041      	str	r1, [r0, #4]
 80081f0:	4620      	mov	r0, r4
 80081f2:	f000 fd9f 	bl	8008d34 <_Balloc>
 80081f6:	9000      	str	r0, [sp, #0]
 80081f8:	2800      	cmp	r0, #0
 80081fa:	d139      	bne.n	8008270 <_dtoa_r+0x320>
 80081fc:	4b16      	ldr	r3, [pc, #88]	; (8008258 <_dtoa_r+0x308>)
 80081fe:	4602      	mov	r2, r0
 8008200:	f240 11af 	movw	r1, #431	; 0x1af
 8008204:	e6bd      	b.n	8007f82 <_dtoa_r+0x32>
 8008206:	2301      	movs	r3, #1
 8008208:	e7e1      	b.n	80081ce <_dtoa_r+0x27e>
 800820a:	2501      	movs	r5, #1
 800820c:	2300      	movs	r3, #0
 800820e:	9307      	str	r3, [sp, #28]
 8008210:	9509      	str	r5, [sp, #36]	; 0x24
 8008212:	f04f 33ff 	mov.w	r3, #4294967295
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	9304      	str	r3, [sp, #16]
 800821a:	2200      	movs	r2, #0
 800821c:	2312      	movs	r3, #18
 800821e:	e7d1      	b.n	80081c4 <_dtoa_r+0x274>
 8008220:	636f4361 	.word	0x636f4361
 8008224:	3fd287a7 	.word	0x3fd287a7
 8008228:	8b60c8b3 	.word	0x8b60c8b3
 800822c:	3fc68a28 	.word	0x3fc68a28
 8008230:	509f79fb 	.word	0x509f79fb
 8008234:	3fd34413 	.word	0x3fd34413
 8008238:	0800b016 	.word	0x0800b016
 800823c:	0800b02d 	.word	0x0800b02d
 8008240:	7ff00000 	.word	0x7ff00000
 8008244:	0800b012 	.word	0x0800b012
 8008248:	0800b009 	.word	0x0800b009
 800824c:	0800afe6 	.word	0x0800afe6
 8008250:	3ff80000 	.word	0x3ff80000
 8008254:	0800b118 	.word	0x0800b118
 8008258:	0800b085 	.word	0x0800b085
 800825c:	2301      	movs	r3, #1
 800825e:	9309      	str	r3, [sp, #36]	; 0x24
 8008260:	e7d7      	b.n	8008212 <_dtoa_r+0x2c2>
 8008262:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008264:	9301      	str	r3, [sp, #4]
 8008266:	9304      	str	r3, [sp, #16]
 8008268:	e7ba      	b.n	80081e0 <_dtoa_r+0x290>
 800826a:	3101      	adds	r1, #1
 800826c:	0052      	lsls	r2, r2, #1
 800826e:	e7ba      	b.n	80081e6 <_dtoa_r+0x296>
 8008270:	69e3      	ldr	r3, [r4, #28]
 8008272:	9a00      	ldr	r2, [sp, #0]
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	9b04      	ldr	r3, [sp, #16]
 8008278:	2b0e      	cmp	r3, #14
 800827a:	f200 80a8 	bhi.w	80083ce <_dtoa_r+0x47e>
 800827e:	2d00      	cmp	r5, #0
 8008280:	f000 80a5 	beq.w	80083ce <_dtoa_r+0x47e>
 8008284:	f1bb 0f00 	cmp.w	fp, #0
 8008288:	dd38      	ble.n	80082fc <_dtoa_r+0x3ac>
 800828a:	4bc0      	ldr	r3, [pc, #768]	; (800858c <_dtoa_r+0x63c>)
 800828c:	f00b 020f 	and.w	r2, fp, #15
 8008290:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008294:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008298:	e9d3 6700 	ldrd	r6, r7, [r3]
 800829c:	ea4f 182b 	mov.w	r8, fp, asr #4
 80082a0:	d019      	beq.n	80082d6 <_dtoa_r+0x386>
 80082a2:	4bbb      	ldr	r3, [pc, #748]	; (8008590 <_dtoa_r+0x640>)
 80082a4:	ec51 0b18 	vmov	r0, r1, d8
 80082a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80082ac:	f7f8 fad6 	bl	800085c <__aeabi_ddiv>
 80082b0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082b4:	f008 080f 	and.w	r8, r8, #15
 80082b8:	2503      	movs	r5, #3
 80082ba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008590 <_dtoa_r+0x640>
 80082be:	f1b8 0f00 	cmp.w	r8, #0
 80082c2:	d10a      	bne.n	80082da <_dtoa_r+0x38a>
 80082c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082c8:	4632      	mov	r2, r6
 80082ca:	463b      	mov	r3, r7
 80082cc:	f7f8 fac6 	bl	800085c <__aeabi_ddiv>
 80082d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082d4:	e02b      	b.n	800832e <_dtoa_r+0x3de>
 80082d6:	2502      	movs	r5, #2
 80082d8:	e7ef      	b.n	80082ba <_dtoa_r+0x36a>
 80082da:	f018 0f01 	tst.w	r8, #1
 80082de:	d008      	beq.n	80082f2 <_dtoa_r+0x3a2>
 80082e0:	4630      	mov	r0, r6
 80082e2:	4639      	mov	r1, r7
 80082e4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80082e8:	f7f8 f98e 	bl	8000608 <__aeabi_dmul>
 80082ec:	3501      	adds	r5, #1
 80082ee:	4606      	mov	r6, r0
 80082f0:	460f      	mov	r7, r1
 80082f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80082f6:	f109 0908 	add.w	r9, r9, #8
 80082fa:	e7e0      	b.n	80082be <_dtoa_r+0x36e>
 80082fc:	f000 809f 	beq.w	800843e <_dtoa_r+0x4ee>
 8008300:	f1cb 0600 	rsb	r6, fp, #0
 8008304:	4ba1      	ldr	r3, [pc, #644]	; (800858c <_dtoa_r+0x63c>)
 8008306:	4fa2      	ldr	r7, [pc, #648]	; (8008590 <_dtoa_r+0x640>)
 8008308:	f006 020f 	and.w	r2, r6, #15
 800830c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008314:	ec51 0b18 	vmov	r0, r1, d8
 8008318:	f7f8 f976 	bl	8000608 <__aeabi_dmul>
 800831c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008320:	1136      	asrs	r6, r6, #4
 8008322:	2300      	movs	r3, #0
 8008324:	2502      	movs	r5, #2
 8008326:	2e00      	cmp	r6, #0
 8008328:	d17e      	bne.n	8008428 <_dtoa_r+0x4d8>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d1d0      	bne.n	80082d0 <_dtoa_r+0x380>
 800832e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008330:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	f000 8084 	beq.w	8008442 <_dtoa_r+0x4f2>
 800833a:	4b96      	ldr	r3, [pc, #600]	; (8008594 <_dtoa_r+0x644>)
 800833c:	2200      	movs	r2, #0
 800833e:	4640      	mov	r0, r8
 8008340:	4649      	mov	r1, r9
 8008342:	f7f8 fbd3 	bl	8000aec <__aeabi_dcmplt>
 8008346:	2800      	cmp	r0, #0
 8008348:	d07b      	beq.n	8008442 <_dtoa_r+0x4f2>
 800834a:	9b04      	ldr	r3, [sp, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d078      	beq.n	8008442 <_dtoa_r+0x4f2>
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	dd39      	ble.n	80083ca <_dtoa_r+0x47a>
 8008356:	4b90      	ldr	r3, [pc, #576]	; (8008598 <_dtoa_r+0x648>)
 8008358:	2200      	movs	r2, #0
 800835a:	4640      	mov	r0, r8
 800835c:	4649      	mov	r1, r9
 800835e:	f7f8 f953 	bl	8000608 <__aeabi_dmul>
 8008362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008366:	9e01      	ldr	r6, [sp, #4]
 8008368:	f10b 37ff 	add.w	r7, fp, #4294967295
 800836c:	3501      	adds	r5, #1
 800836e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008372:	4628      	mov	r0, r5
 8008374:	f7f8 f8de 	bl	8000534 <__aeabi_i2d>
 8008378:	4642      	mov	r2, r8
 800837a:	464b      	mov	r3, r9
 800837c:	f7f8 f944 	bl	8000608 <__aeabi_dmul>
 8008380:	4b86      	ldr	r3, [pc, #536]	; (800859c <_dtoa_r+0x64c>)
 8008382:	2200      	movs	r2, #0
 8008384:	f7f7 ff8a 	bl	800029c <__adddf3>
 8008388:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800838c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008390:	9303      	str	r3, [sp, #12]
 8008392:	2e00      	cmp	r6, #0
 8008394:	d158      	bne.n	8008448 <_dtoa_r+0x4f8>
 8008396:	4b82      	ldr	r3, [pc, #520]	; (80085a0 <_dtoa_r+0x650>)
 8008398:	2200      	movs	r2, #0
 800839a:	4640      	mov	r0, r8
 800839c:	4649      	mov	r1, r9
 800839e:	f7f7 ff7b 	bl	8000298 <__aeabi_dsub>
 80083a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80083a6:	4680      	mov	r8, r0
 80083a8:	4689      	mov	r9, r1
 80083aa:	f7f8 fbbd 	bl	8000b28 <__aeabi_dcmpgt>
 80083ae:	2800      	cmp	r0, #0
 80083b0:	f040 8296 	bne.w	80088e0 <_dtoa_r+0x990>
 80083b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80083b8:	4640      	mov	r0, r8
 80083ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083be:	4649      	mov	r1, r9
 80083c0:	f7f8 fb94 	bl	8000aec <__aeabi_dcmplt>
 80083c4:	2800      	cmp	r0, #0
 80083c6:	f040 8289 	bne.w	80088dc <_dtoa_r+0x98c>
 80083ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80083ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	f2c0 814e 	blt.w	8008672 <_dtoa_r+0x722>
 80083d6:	f1bb 0f0e 	cmp.w	fp, #14
 80083da:	f300 814a 	bgt.w	8008672 <_dtoa_r+0x722>
 80083de:	4b6b      	ldr	r3, [pc, #428]	; (800858c <_dtoa_r+0x63c>)
 80083e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80083e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f280 80dc 	bge.w	80085a8 <_dtoa_r+0x658>
 80083f0:	9b04      	ldr	r3, [sp, #16]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f300 80d8 	bgt.w	80085a8 <_dtoa_r+0x658>
 80083f8:	f040 826f 	bne.w	80088da <_dtoa_r+0x98a>
 80083fc:	4b68      	ldr	r3, [pc, #416]	; (80085a0 <_dtoa_r+0x650>)
 80083fe:	2200      	movs	r2, #0
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 f900 	bl	8000608 <__aeabi_dmul>
 8008408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800840c:	f7f8 fb82 	bl	8000b14 <__aeabi_dcmpge>
 8008410:	9e04      	ldr	r6, [sp, #16]
 8008412:	4637      	mov	r7, r6
 8008414:	2800      	cmp	r0, #0
 8008416:	f040 8245 	bne.w	80088a4 <_dtoa_r+0x954>
 800841a:	9d00      	ldr	r5, [sp, #0]
 800841c:	2331      	movs	r3, #49	; 0x31
 800841e:	f805 3b01 	strb.w	r3, [r5], #1
 8008422:	f10b 0b01 	add.w	fp, fp, #1
 8008426:	e241      	b.n	80088ac <_dtoa_r+0x95c>
 8008428:	07f2      	lsls	r2, r6, #31
 800842a:	d505      	bpl.n	8008438 <_dtoa_r+0x4e8>
 800842c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008430:	f7f8 f8ea 	bl	8000608 <__aeabi_dmul>
 8008434:	3501      	adds	r5, #1
 8008436:	2301      	movs	r3, #1
 8008438:	1076      	asrs	r6, r6, #1
 800843a:	3708      	adds	r7, #8
 800843c:	e773      	b.n	8008326 <_dtoa_r+0x3d6>
 800843e:	2502      	movs	r5, #2
 8008440:	e775      	b.n	800832e <_dtoa_r+0x3de>
 8008442:	9e04      	ldr	r6, [sp, #16]
 8008444:	465f      	mov	r7, fp
 8008446:	e792      	b.n	800836e <_dtoa_r+0x41e>
 8008448:	9900      	ldr	r1, [sp, #0]
 800844a:	4b50      	ldr	r3, [pc, #320]	; (800858c <_dtoa_r+0x63c>)
 800844c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008450:	4431      	add	r1, r6
 8008452:	9102      	str	r1, [sp, #8]
 8008454:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008456:	eeb0 9a47 	vmov.f32	s18, s14
 800845a:	eef0 9a67 	vmov.f32	s19, s15
 800845e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008462:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008466:	2900      	cmp	r1, #0
 8008468:	d044      	beq.n	80084f4 <_dtoa_r+0x5a4>
 800846a:	494e      	ldr	r1, [pc, #312]	; (80085a4 <_dtoa_r+0x654>)
 800846c:	2000      	movs	r0, #0
 800846e:	f7f8 f9f5 	bl	800085c <__aeabi_ddiv>
 8008472:	ec53 2b19 	vmov	r2, r3, d9
 8008476:	f7f7 ff0f 	bl	8000298 <__aeabi_dsub>
 800847a:	9d00      	ldr	r5, [sp, #0]
 800847c:	ec41 0b19 	vmov	d9, r0, r1
 8008480:	4649      	mov	r1, r9
 8008482:	4640      	mov	r0, r8
 8008484:	f7f8 fb70 	bl	8000b68 <__aeabi_d2iz>
 8008488:	4606      	mov	r6, r0
 800848a:	f7f8 f853 	bl	8000534 <__aeabi_i2d>
 800848e:	4602      	mov	r2, r0
 8008490:	460b      	mov	r3, r1
 8008492:	4640      	mov	r0, r8
 8008494:	4649      	mov	r1, r9
 8008496:	f7f7 feff 	bl	8000298 <__aeabi_dsub>
 800849a:	3630      	adds	r6, #48	; 0x30
 800849c:	f805 6b01 	strb.w	r6, [r5], #1
 80084a0:	ec53 2b19 	vmov	r2, r3, d9
 80084a4:	4680      	mov	r8, r0
 80084a6:	4689      	mov	r9, r1
 80084a8:	f7f8 fb20 	bl	8000aec <__aeabi_dcmplt>
 80084ac:	2800      	cmp	r0, #0
 80084ae:	d164      	bne.n	800857a <_dtoa_r+0x62a>
 80084b0:	4642      	mov	r2, r8
 80084b2:	464b      	mov	r3, r9
 80084b4:	4937      	ldr	r1, [pc, #220]	; (8008594 <_dtoa_r+0x644>)
 80084b6:	2000      	movs	r0, #0
 80084b8:	f7f7 feee 	bl	8000298 <__aeabi_dsub>
 80084bc:	ec53 2b19 	vmov	r2, r3, d9
 80084c0:	f7f8 fb14 	bl	8000aec <__aeabi_dcmplt>
 80084c4:	2800      	cmp	r0, #0
 80084c6:	f040 80b6 	bne.w	8008636 <_dtoa_r+0x6e6>
 80084ca:	9b02      	ldr	r3, [sp, #8]
 80084cc:	429d      	cmp	r5, r3
 80084ce:	f43f af7c 	beq.w	80083ca <_dtoa_r+0x47a>
 80084d2:	4b31      	ldr	r3, [pc, #196]	; (8008598 <_dtoa_r+0x648>)
 80084d4:	ec51 0b19 	vmov	r0, r1, d9
 80084d8:	2200      	movs	r2, #0
 80084da:	f7f8 f895 	bl	8000608 <__aeabi_dmul>
 80084de:	4b2e      	ldr	r3, [pc, #184]	; (8008598 <_dtoa_r+0x648>)
 80084e0:	ec41 0b19 	vmov	d9, r0, r1
 80084e4:	2200      	movs	r2, #0
 80084e6:	4640      	mov	r0, r8
 80084e8:	4649      	mov	r1, r9
 80084ea:	f7f8 f88d 	bl	8000608 <__aeabi_dmul>
 80084ee:	4680      	mov	r8, r0
 80084f0:	4689      	mov	r9, r1
 80084f2:	e7c5      	b.n	8008480 <_dtoa_r+0x530>
 80084f4:	ec51 0b17 	vmov	r0, r1, d7
 80084f8:	f7f8 f886 	bl	8000608 <__aeabi_dmul>
 80084fc:	9b02      	ldr	r3, [sp, #8]
 80084fe:	9d00      	ldr	r5, [sp, #0]
 8008500:	930f      	str	r3, [sp, #60]	; 0x3c
 8008502:	ec41 0b19 	vmov	d9, r0, r1
 8008506:	4649      	mov	r1, r9
 8008508:	4640      	mov	r0, r8
 800850a:	f7f8 fb2d 	bl	8000b68 <__aeabi_d2iz>
 800850e:	4606      	mov	r6, r0
 8008510:	f7f8 f810 	bl	8000534 <__aeabi_i2d>
 8008514:	3630      	adds	r6, #48	; 0x30
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	4640      	mov	r0, r8
 800851c:	4649      	mov	r1, r9
 800851e:	f7f7 febb 	bl	8000298 <__aeabi_dsub>
 8008522:	f805 6b01 	strb.w	r6, [r5], #1
 8008526:	9b02      	ldr	r3, [sp, #8]
 8008528:	429d      	cmp	r5, r3
 800852a:	4680      	mov	r8, r0
 800852c:	4689      	mov	r9, r1
 800852e:	f04f 0200 	mov.w	r2, #0
 8008532:	d124      	bne.n	800857e <_dtoa_r+0x62e>
 8008534:	4b1b      	ldr	r3, [pc, #108]	; (80085a4 <_dtoa_r+0x654>)
 8008536:	ec51 0b19 	vmov	r0, r1, d9
 800853a:	f7f7 feaf 	bl	800029c <__adddf3>
 800853e:	4602      	mov	r2, r0
 8008540:	460b      	mov	r3, r1
 8008542:	4640      	mov	r0, r8
 8008544:	4649      	mov	r1, r9
 8008546:	f7f8 faef 	bl	8000b28 <__aeabi_dcmpgt>
 800854a:	2800      	cmp	r0, #0
 800854c:	d173      	bne.n	8008636 <_dtoa_r+0x6e6>
 800854e:	ec53 2b19 	vmov	r2, r3, d9
 8008552:	4914      	ldr	r1, [pc, #80]	; (80085a4 <_dtoa_r+0x654>)
 8008554:	2000      	movs	r0, #0
 8008556:	f7f7 fe9f 	bl	8000298 <__aeabi_dsub>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	4640      	mov	r0, r8
 8008560:	4649      	mov	r1, r9
 8008562:	f7f8 fac3 	bl	8000aec <__aeabi_dcmplt>
 8008566:	2800      	cmp	r0, #0
 8008568:	f43f af2f 	beq.w	80083ca <_dtoa_r+0x47a>
 800856c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800856e:	1e6b      	subs	r3, r5, #1
 8008570:	930f      	str	r3, [sp, #60]	; 0x3c
 8008572:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008576:	2b30      	cmp	r3, #48	; 0x30
 8008578:	d0f8      	beq.n	800856c <_dtoa_r+0x61c>
 800857a:	46bb      	mov	fp, r7
 800857c:	e04a      	b.n	8008614 <_dtoa_r+0x6c4>
 800857e:	4b06      	ldr	r3, [pc, #24]	; (8008598 <_dtoa_r+0x648>)
 8008580:	f7f8 f842 	bl	8000608 <__aeabi_dmul>
 8008584:	4680      	mov	r8, r0
 8008586:	4689      	mov	r9, r1
 8008588:	e7bd      	b.n	8008506 <_dtoa_r+0x5b6>
 800858a:	bf00      	nop
 800858c:	0800b118 	.word	0x0800b118
 8008590:	0800b0f0 	.word	0x0800b0f0
 8008594:	3ff00000 	.word	0x3ff00000
 8008598:	40240000 	.word	0x40240000
 800859c:	401c0000 	.word	0x401c0000
 80085a0:	40140000 	.word	0x40140000
 80085a4:	3fe00000 	.word	0x3fe00000
 80085a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085ac:	9d00      	ldr	r5, [sp, #0]
 80085ae:	4642      	mov	r2, r8
 80085b0:	464b      	mov	r3, r9
 80085b2:	4630      	mov	r0, r6
 80085b4:	4639      	mov	r1, r7
 80085b6:	f7f8 f951 	bl	800085c <__aeabi_ddiv>
 80085ba:	f7f8 fad5 	bl	8000b68 <__aeabi_d2iz>
 80085be:	9001      	str	r0, [sp, #4]
 80085c0:	f7f7 ffb8 	bl	8000534 <__aeabi_i2d>
 80085c4:	4642      	mov	r2, r8
 80085c6:	464b      	mov	r3, r9
 80085c8:	f7f8 f81e 	bl	8000608 <__aeabi_dmul>
 80085cc:	4602      	mov	r2, r0
 80085ce:	460b      	mov	r3, r1
 80085d0:	4630      	mov	r0, r6
 80085d2:	4639      	mov	r1, r7
 80085d4:	f7f7 fe60 	bl	8000298 <__aeabi_dsub>
 80085d8:	9e01      	ldr	r6, [sp, #4]
 80085da:	9f04      	ldr	r7, [sp, #16]
 80085dc:	3630      	adds	r6, #48	; 0x30
 80085de:	f805 6b01 	strb.w	r6, [r5], #1
 80085e2:	9e00      	ldr	r6, [sp, #0]
 80085e4:	1bae      	subs	r6, r5, r6
 80085e6:	42b7      	cmp	r7, r6
 80085e8:	4602      	mov	r2, r0
 80085ea:	460b      	mov	r3, r1
 80085ec:	d134      	bne.n	8008658 <_dtoa_r+0x708>
 80085ee:	f7f7 fe55 	bl	800029c <__adddf3>
 80085f2:	4642      	mov	r2, r8
 80085f4:	464b      	mov	r3, r9
 80085f6:	4606      	mov	r6, r0
 80085f8:	460f      	mov	r7, r1
 80085fa:	f7f8 fa95 	bl	8000b28 <__aeabi_dcmpgt>
 80085fe:	b9c8      	cbnz	r0, 8008634 <_dtoa_r+0x6e4>
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	4630      	mov	r0, r6
 8008606:	4639      	mov	r1, r7
 8008608:	f7f8 fa66 	bl	8000ad8 <__aeabi_dcmpeq>
 800860c:	b110      	cbz	r0, 8008614 <_dtoa_r+0x6c4>
 800860e:	9b01      	ldr	r3, [sp, #4]
 8008610:	07db      	lsls	r3, r3, #31
 8008612:	d40f      	bmi.n	8008634 <_dtoa_r+0x6e4>
 8008614:	4651      	mov	r1, sl
 8008616:	4620      	mov	r0, r4
 8008618:	f000 fbcc 	bl	8008db4 <_Bfree>
 800861c:	2300      	movs	r3, #0
 800861e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008620:	702b      	strb	r3, [r5, #0]
 8008622:	f10b 0301 	add.w	r3, fp, #1
 8008626:	6013      	str	r3, [r2, #0]
 8008628:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800862a:	2b00      	cmp	r3, #0
 800862c:	f43f ace2 	beq.w	8007ff4 <_dtoa_r+0xa4>
 8008630:	601d      	str	r5, [r3, #0]
 8008632:	e4df      	b.n	8007ff4 <_dtoa_r+0xa4>
 8008634:	465f      	mov	r7, fp
 8008636:	462b      	mov	r3, r5
 8008638:	461d      	mov	r5, r3
 800863a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800863e:	2a39      	cmp	r2, #57	; 0x39
 8008640:	d106      	bne.n	8008650 <_dtoa_r+0x700>
 8008642:	9a00      	ldr	r2, [sp, #0]
 8008644:	429a      	cmp	r2, r3
 8008646:	d1f7      	bne.n	8008638 <_dtoa_r+0x6e8>
 8008648:	9900      	ldr	r1, [sp, #0]
 800864a:	2230      	movs	r2, #48	; 0x30
 800864c:	3701      	adds	r7, #1
 800864e:	700a      	strb	r2, [r1, #0]
 8008650:	781a      	ldrb	r2, [r3, #0]
 8008652:	3201      	adds	r2, #1
 8008654:	701a      	strb	r2, [r3, #0]
 8008656:	e790      	b.n	800857a <_dtoa_r+0x62a>
 8008658:	4ba3      	ldr	r3, [pc, #652]	; (80088e8 <_dtoa_r+0x998>)
 800865a:	2200      	movs	r2, #0
 800865c:	f7f7 ffd4 	bl	8000608 <__aeabi_dmul>
 8008660:	2200      	movs	r2, #0
 8008662:	2300      	movs	r3, #0
 8008664:	4606      	mov	r6, r0
 8008666:	460f      	mov	r7, r1
 8008668:	f7f8 fa36 	bl	8000ad8 <__aeabi_dcmpeq>
 800866c:	2800      	cmp	r0, #0
 800866e:	d09e      	beq.n	80085ae <_dtoa_r+0x65e>
 8008670:	e7d0      	b.n	8008614 <_dtoa_r+0x6c4>
 8008672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008674:	2a00      	cmp	r2, #0
 8008676:	f000 80ca 	beq.w	800880e <_dtoa_r+0x8be>
 800867a:	9a07      	ldr	r2, [sp, #28]
 800867c:	2a01      	cmp	r2, #1
 800867e:	f300 80ad 	bgt.w	80087dc <_dtoa_r+0x88c>
 8008682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008684:	2a00      	cmp	r2, #0
 8008686:	f000 80a5 	beq.w	80087d4 <_dtoa_r+0x884>
 800868a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800868e:	9e08      	ldr	r6, [sp, #32]
 8008690:	9d05      	ldr	r5, [sp, #20]
 8008692:	9a05      	ldr	r2, [sp, #20]
 8008694:	441a      	add	r2, r3
 8008696:	9205      	str	r2, [sp, #20]
 8008698:	9a06      	ldr	r2, [sp, #24]
 800869a:	2101      	movs	r1, #1
 800869c:	441a      	add	r2, r3
 800869e:	4620      	mov	r0, r4
 80086a0:	9206      	str	r2, [sp, #24]
 80086a2:	f000 fc3d 	bl	8008f20 <__i2b>
 80086a6:	4607      	mov	r7, r0
 80086a8:	b165      	cbz	r5, 80086c4 <_dtoa_r+0x774>
 80086aa:	9b06      	ldr	r3, [sp, #24]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	dd09      	ble.n	80086c4 <_dtoa_r+0x774>
 80086b0:	42ab      	cmp	r3, r5
 80086b2:	9a05      	ldr	r2, [sp, #20]
 80086b4:	bfa8      	it	ge
 80086b6:	462b      	movge	r3, r5
 80086b8:	1ad2      	subs	r2, r2, r3
 80086ba:	9205      	str	r2, [sp, #20]
 80086bc:	9a06      	ldr	r2, [sp, #24]
 80086be:	1aed      	subs	r5, r5, r3
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	9306      	str	r3, [sp, #24]
 80086c4:	9b08      	ldr	r3, [sp, #32]
 80086c6:	b1f3      	cbz	r3, 8008706 <_dtoa_r+0x7b6>
 80086c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f000 80a3 	beq.w	8008816 <_dtoa_r+0x8c6>
 80086d0:	2e00      	cmp	r6, #0
 80086d2:	dd10      	ble.n	80086f6 <_dtoa_r+0x7a6>
 80086d4:	4639      	mov	r1, r7
 80086d6:	4632      	mov	r2, r6
 80086d8:	4620      	mov	r0, r4
 80086da:	f000 fce1 	bl	80090a0 <__pow5mult>
 80086de:	4652      	mov	r2, sl
 80086e0:	4601      	mov	r1, r0
 80086e2:	4607      	mov	r7, r0
 80086e4:	4620      	mov	r0, r4
 80086e6:	f000 fc31 	bl	8008f4c <__multiply>
 80086ea:	4651      	mov	r1, sl
 80086ec:	4680      	mov	r8, r0
 80086ee:	4620      	mov	r0, r4
 80086f0:	f000 fb60 	bl	8008db4 <_Bfree>
 80086f4:	46c2      	mov	sl, r8
 80086f6:	9b08      	ldr	r3, [sp, #32]
 80086f8:	1b9a      	subs	r2, r3, r6
 80086fa:	d004      	beq.n	8008706 <_dtoa_r+0x7b6>
 80086fc:	4651      	mov	r1, sl
 80086fe:	4620      	mov	r0, r4
 8008700:	f000 fcce 	bl	80090a0 <__pow5mult>
 8008704:	4682      	mov	sl, r0
 8008706:	2101      	movs	r1, #1
 8008708:	4620      	mov	r0, r4
 800870a:	f000 fc09 	bl	8008f20 <__i2b>
 800870e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008710:	2b00      	cmp	r3, #0
 8008712:	4606      	mov	r6, r0
 8008714:	f340 8081 	ble.w	800881a <_dtoa_r+0x8ca>
 8008718:	461a      	mov	r2, r3
 800871a:	4601      	mov	r1, r0
 800871c:	4620      	mov	r0, r4
 800871e:	f000 fcbf 	bl	80090a0 <__pow5mult>
 8008722:	9b07      	ldr	r3, [sp, #28]
 8008724:	2b01      	cmp	r3, #1
 8008726:	4606      	mov	r6, r0
 8008728:	dd7a      	ble.n	8008820 <_dtoa_r+0x8d0>
 800872a:	f04f 0800 	mov.w	r8, #0
 800872e:	6933      	ldr	r3, [r6, #16]
 8008730:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008734:	6918      	ldr	r0, [r3, #16]
 8008736:	f000 fba5 	bl	8008e84 <__hi0bits>
 800873a:	f1c0 0020 	rsb	r0, r0, #32
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	4418      	add	r0, r3
 8008742:	f010 001f 	ands.w	r0, r0, #31
 8008746:	f000 8094 	beq.w	8008872 <_dtoa_r+0x922>
 800874a:	f1c0 0320 	rsb	r3, r0, #32
 800874e:	2b04      	cmp	r3, #4
 8008750:	f340 8085 	ble.w	800885e <_dtoa_r+0x90e>
 8008754:	9b05      	ldr	r3, [sp, #20]
 8008756:	f1c0 001c 	rsb	r0, r0, #28
 800875a:	4403      	add	r3, r0
 800875c:	9305      	str	r3, [sp, #20]
 800875e:	9b06      	ldr	r3, [sp, #24]
 8008760:	4403      	add	r3, r0
 8008762:	4405      	add	r5, r0
 8008764:	9306      	str	r3, [sp, #24]
 8008766:	9b05      	ldr	r3, [sp, #20]
 8008768:	2b00      	cmp	r3, #0
 800876a:	dd05      	ble.n	8008778 <_dtoa_r+0x828>
 800876c:	4651      	mov	r1, sl
 800876e:	461a      	mov	r2, r3
 8008770:	4620      	mov	r0, r4
 8008772:	f000 fcef 	bl	8009154 <__lshift>
 8008776:	4682      	mov	sl, r0
 8008778:	9b06      	ldr	r3, [sp, #24]
 800877a:	2b00      	cmp	r3, #0
 800877c:	dd05      	ble.n	800878a <_dtoa_r+0x83a>
 800877e:	4631      	mov	r1, r6
 8008780:	461a      	mov	r2, r3
 8008782:	4620      	mov	r0, r4
 8008784:	f000 fce6 	bl	8009154 <__lshift>
 8008788:	4606      	mov	r6, r0
 800878a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800878c:	2b00      	cmp	r3, #0
 800878e:	d072      	beq.n	8008876 <_dtoa_r+0x926>
 8008790:	4631      	mov	r1, r6
 8008792:	4650      	mov	r0, sl
 8008794:	f000 fd4a 	bl	800922c <__mcmp>
 8008798:	2800      	cmp	r0, #0
 800879a:	da6c      	bge.n	8008876 <_dtoa_r+0x926>
 800879c:	2300      	movs	r3, #0
 800879e:	4651      	mov	r1, sl
 80087a0:	220a      	movs	r2, #10
 80087a2:	4620      	mov	r0, r4
 80087a4:	f000 fb28 	bl	8008df8 <__multadd>
 80087a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80087ae:	4682      	mov	sl, r0
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	f000 81b0 	beq.w	8008b16 <_dtoa_r+0xbc6>
 80087b6:	2300      	movs	r3, #0
 80087b8:	4639      	mov	r1, r7
 80087ba:	220a      	movs	r2, #10
 80087bc:	4620      	mov	r0, r4
 80087be:	f000 fb1b 	bl	8008df8 <__multadd>
 80087c2:	9b01      	ldr	r3, [sp, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	4607      	mov	r7, r0
 80087c8:	f300 8096 	bgt.w	80088f8 <_dtoa_r+0x9a8>
 80087cc:	9b07      	ldr	r3, [sp, #28]
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	dc59      	bgt.n	8008886 <_dtoa_r+0x936>
 80087d2:	e091      	b.n	80088f8 <_dtoa_r+0x9a8>
 80087d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80087d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80087da:	e758      	b.n	800868e <_dtoa_r+0x73e>
 80087dc:	9b04      	ldr	r3, [sp, #16]
 80087de:	1e5e      	subs	r6, r3, #1
 80087e0:	9b08      	ldr	r3, [sp, #32]
 80087e2:	42b3      	cmp	r3, r6
 80087e4:	bfbf      	itttt	lt
 80087e6:	9b08      	ldrlt	r3, [sp, #32]
 80087e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80087ea:	9608      	strlt	r6, [sp, #32]
 80087ec:	1af3      	sublt	r3, r6, r3
 80087ee:	bfb4      	ite	lt
 80087f0:	18d2      	addlt	r2, r2, r3
 80087f2:	1b9e      	subge	r6, r3, r6
 80087f4:	9b04      	ldr	r3, [sp, #16]
 80087f6:	bfbc      	itt	lt
 80087f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80087fa:	2600      	movlt	r6, #0
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	bfb7      	itett	lt
 8008800:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008804:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008808:	1a9d      	sublt	r5, r3, r2
 800880a:	2300      	movlt	r3, #0
 800880c:	e741      	b.n	8008692 <_dtoa_r+0x742>
 800880e:	9e08      	ldr	r6, [sp, #32]
 8008810:	9d05      	ldr	r5, [sp, #20]
 8008812:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008814:	e748      	b.n	80086a8 <_dtoa_r+0x758>
 8008816:	9a08      	ldr	r2, [sp, #32]
 8008818:	e770      	b.n	80086fc <_dtoa_r+0x7ac>
 800881a:	9b07      	ldr	r3, [sp, #28]
 800881c:	2b01      	cmp	r3, #1
 800881e:	dc19      	bgt.n	8008854 <_dtoa_r+0x904>
 8008820:	9b02      	ldr	r3, [sp, #8]
 8008822:	b9bb      	cbnz	r3, 8008854 <_dtoa_r+0x904>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800882a:	b99b      	cbnz	r3, 8008854 <_dtoa_r+0x904>
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008832:	0d1b      	lsrs	r3, r3, #20
 8008834:	051b      	lsls	r3, r3, #20
 8008836:	b183      	cbz	r3, 800885a <_dtoa_r+0x90a>
 8008838:	9b05      	ldr	r3, [sp, #20]
 800883a:	3301      	adds	r3, #1
 800883c:	9305      	str	r3, [sp, #20]
 800883e:	9b06      	ldr	r3, [sp, #24]
 8008840:	3301      	adds	r3, #1
 8008842:	9306      	str	r3, [sp, #24]
 8008844:	f04f 0801 	mov.w	r8, #1
 8008848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800884a:	2b00      	cmp	r3, #0
 800884c:	f47f af6f 	bne.w	800872e <_dtoa_r+0x7de>
 8008850:	2001      	movs	r0, #1
 8008852:	e774      	b.n	800873e <_dtoa_r+0x7ee>
 8008854:	f04f 0800 	mov.w	r8, #0
 8008858:	e7f6      	b.n	8008848 <_dtoa_r+0x8f8>
 800885a:	4698      	mov	r8, r3
 800885c:	e7f4      	b.n	8008848 <_dtoa_r+0x8f8>
 800885e:	d082      	beq.n	8008766 <_dtoa_r+0x816>
 8008860:	9a05      	ldr	r2, [sp, #20]
 8008862:	331c      	adds	r3, #28
 8008864:	441a      	add	r2, r3
 8008866:	9205      	str	r2, [sp, #20]
 8008868:	9a06      	ldr	r2, [sp, #24]
 800886a:	441a      	add	r2, r3
 800886c:	441d      	add	r5, r3
 800886e:	9206      	str	r2, [sp, #24]
 8008870:	e779      	b.n	8008766 <_dtoa_r+0x816>
 8008872:	4603      	mov	r3, r0
 8008874:	e7f4      	b.n	8008860 <_dtoa_r+0x910>
 8008876:	9b04      	ldr	r3, [sp, #16]
 8008878:	2b00      	cmp	r3, #0
 800887a:	dc37      	bgt.n	80088ec <_dtoa_r+0x99c>
 800887c:	9b07      	ldr	r3, [sp, #28]
 800887e:	2b02      	cmp	r3, #2
 8008880:	dd34      	ble.n	80088ec <_dtoa_r+0x99c>
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	9301      	str	r3, [sp, #4]
 8008886:	9b01      	ldr	r3, [sp, #4]
 8008888:	b963      	cbnz	r3, 80088a4 <_dtoa_r+0x954>
 800888a:	4631      	mov	r1, r6
 800888c:	2205      	movs	r2, #5
 800888e:	4620      	mov	r0, r4
 8008890:	f000 fab2 	bl	8008df8 <__multadd>
 8008894:	4601      	mov	r1, r0
 8008896:	4606      	mov	r6, r0
 8008898:	4650      	mov	r0, sl
 800889a:	f000 fcc7 	bl	800922c <__mcmp>
 800889e:	2800      	cmp	r0, #0
 80088a0:	f73f adbb 	bgt.w	800841a <_dtoa_r+0x4ca>
 80088a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a6:	9d00      	ldr	r5, [sp, #0]
 80088a8:	ea6f 0b03 	mvn.w	fp, r3
 80088ac:	f04f 0800 	mov.w	r8, #0
 80088b0:	4631      	mov	r1, r6
 80088b2:	4620      	mov	r0, r4
 80088b4:	f000 fa7e 	bl	8008db4 <_Bfree>
 80088b8:	2f00      	cmp	r7, #0
 80088ba:	f43f aeab 	beq.w	8008614 <_dtoa_r+0x6c4>
 80088be:	f1b8 0f00 	cmp.w	r8, #0
 80088c2:	d005      	beq.n	80088d0 <_dtoa_r+0x980>
 80088c4:	45b8      	cmp	r8, r7
 80088c6:	d003      	beq.n	80088d0 <_dtoa_r+0x980>
 80088c8:	4641      	mov	r1, r8
 80088ca:	4620      	mov	r0, r4
 80088cc:	f000 fa72 	bl	8008db4 <_Bfree>
 80088d0:	4639      	mov	r1, r7
 80088d2:	4620      	mov	r0, r4
 80088d4:	f000 fa6e 	bl	8008db4 <_Bfree>
 80088d8:	e69c      	b.n	8008614 <_dtoa_r+0x6c4>
 80088da:	2600      	movs	r6, #0
 80088dc:	4637      	mov	r7, r6
 80088de:	e7e1      	b.n	80088a4 <_dtoa_r+0x954>
 80088e0:	46bb      	mov	fp, r7
 80088e2:	4637      	mov	r7, r6
 80088e4:	e599      	b.n	800841a <_dtoa_r+0x4ca>
 80088e6:	bf00      	nop
 80088e8:	40240000 	.word	0x40240000
 80088ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	f000 80c8 	beq.w	8008a84 <_dtoa_r+0xb34>
 80088f4:	9b04      	ldr	r3, [sp, #16]
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	2d00      	cmp	r5, #0
 80088fa:	dd05      	ble.n	8008908 <_dtoa_r+0x9b8>
 80088fc:	4639      	mov	r1, r7
 80088fe:	462a      	mov	r2, r5
 8008900:	4620      	mov	r0, r4
 8008902:	f000 fc27 	bl	8009154 <__lshift>
 8008906:	4607      	mov	r7, r0
 8008908:	f1b8 0f00 	cmp.w	r8, #0
 800890c:	d05b      	beq.n	80089c6 <_dtoa_r+0xa76>
 800890e:	6879      	ldr	r1, [r7, #4]
 8008910:	4620      	mov	r0, r4
 8008912:	f000 fa0f 	bl	8008d34 <_Balloc>
 8008916:	4605      	mov	r5, r0
 8008918:	b928      	cbnz	r0, 8008926 <_dtoa_r+0x9d6>
 800891a:	4b83      	ldr	r3, [pc, #524]	; (8008b28 <_dtoa_r+0xbd8>)
 800891c:	4602      	mov	r2, r0
 800891e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008922:	f7ff bb2e 	b.w	8007f82 <_dtoa_r+0x32>
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	3202      	adds	r2, #2
 800892a:	0092      	lsls	r2, r2, #2
 800892c:	f107 010c 	add.w	r1, r7, #12
 8008930:	300c      	adds	r0, #12
 8008932:	f000 ffab 	bl	800988c <memcpy>
 8008936:	2201      	movs	r2, #1
 8008938:	4629      	mov	r1, r5
 800893a:	4620      	mov	r0, r4
 800893c:	f000 fc0a 	bl	8009154 <__lshift>
 8008940:	9b00      	ldr	r3, [sp, #0]
 8008942:	3301      	adds	r3, #1
 8008944:	9304      	str	r3, [sp, #16]
 8008946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800894a:	4413      	add	r3, r2
 800894c:	9308      	str	r3, [sp, #32]
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	f003 0301 	and.w	r3, r3, #1
 8008954:	46b8      	mov	r8, r7
 8008956:	9306      	str	r3, [sp, #24]
 8008958:	4607      	mov	r7, r0
 800895a:	9b04      	ldr	r3, [sp, #16]
 800895c:	4631      	mov	r1, r6
 800895e:	3b01      	subs	r3, #1
 8008960:	4650      	mov	r0, sl
 8008962:	9301      	str	r3, [sp, #4]
 8008964:	f7ff fa6b 	bl	8007e3e <quorem>
 8008968:	4641      	mov	r1, r8
 800896a:	9002      	str	r0, [sp, #8]
 800896c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008970:	4650      	mov	r0, sl
 8008972:	f000 fc5b 	bl	800922c <__mcmp>
 8008976:	463a      	mov	r2, r7
 8008978:	9005      	str	r0, [sp, #20]
 800897a:	4631      	mov	r1, r6
 800897c:	4620      	mov	r0, r4
 800897e:	f000 fc71 	bl	8009264 <__mdiff>
 8008982:	68c2      	ldr	r2, [r0, #12]
 8008984:	4605      	mov	r5, r0
 8008986:	bb02      	cbnz	r2, 80089ca <_dtoa_r+0xa7a>
 8008988:	4601      	mov	r1, r0
 800898a:	4650      	mov	r0, sl
 800898c:	f000 fc4e 	bl	800922c <__mcmp>
 8008990:	4602      	mov	r2, r0
 8008992:	4629      	mov	r1, r5
 8008994:	4620      	mov	r0, r4
 8008996:	9209      	str	r2, [sp, #36]	; 0x24
 8008998:	f000 fa0c 	bl	8008db4 <_Bfree>
 800899c:	9b07      	ldr	r3, [sp, #28]
 800899e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089a0:	9d04      	ldr	r5, [sp, #16]
 80089a2:	ea43 0102 	orr.w	r1, r3, r2
 80089a6:	9b06      	ldr	r3, [sp, #24]
 80089a8:	4319      	orrs	r1, r3
 80089aa:	d110      	bne.n	80089ce <_dtoa_r+0xa7e>
 80089ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80089b0:	d029      	beq.n	8008a06 <_dtoa_r+0xab6>
 80089b2:	9b05      	ldr	r3, [sp, #20]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	dd02      	ble.n	80089be <_dtoa_r+0xa6e>
 80089b8:	9b02      	ldr	r3, [sp, #8]
 80089ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80089be:	9b01      	ldr	r3, [sp, #4]
 80089c0:	f883 9000 	strb.w	r9, [r3]
 80089c4:	e774      	b.n	80088b0 <_dtoa_r+0x960>
 80089c6:	4638      	mov	r0, r7
 80089c8:	e7ba      	b.n	8008940 <_dtoa_r+0x9f0>
 80089ca:	2201      	movs	r2, #1
 80089cc:	e7e1      	b.n	8008992 <_dtoa_r+0xa42>
 80089ce:	9b05      	ldr	r3, [sp, #20]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	db04      	blt.n	80089de <_dtoa_r+0xa8e>
 80089d4:	9907      	ldr	r1, [sp, #28]
 80089d6:	430b      	orrs	r3, r1
 80089d8:	9906      	ldr	r1, [sp, #24]
 80089da:	430b      	orrs	r3, r1
 80089dc:	d120      	bne.n	8008a20 <_dtoa_r+0xad0>
 80089de:	2a00      	cmp	r2, #0
 80089e0:	dded      	ble.n	80089be <_dtoa_r+0xa6e>
 80089e2:	4651      	mov	r1, sl
 80089e4:	2201      	movs	r2, #1
 80089e6:	4620      	mov	r0, r4
 80089e8:	f000 fbb4 	bl	8009154 <__lshift>
 80089ec:	4631      	mov	r1, r6
 80089ee:	4682      	mov	sl, r0
 80089f0:	f000 fc1c 	bl	800922c <__mcmp>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	dc03      	bgt.n	8008a00 <_dtoa_r+0xab0>
 80089f8:	d1e1      	bne.n	80089be <_dtoa_r+0xa6e>
 80089fa:	f019 0f01 	tst.w	r9, #1
 80089fe:	d0de      	beq.n	80089be <_dtoa_r+0xa6e>
 8008a00:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a04:	d1d8      	bne.n	80089b8 <_dtoa_r+0xa68>
 8008a06:	9a01      	ldr	r2, [sp, #4]
 8008a08:	2339      	movs	r3, #57	; 0x39
 8008a0a:	7013      	strb	r3, [r2, #0]
 8008a0c:	462b      	mov	r3, r5
 8008a0e:	461d      	mov	r5, r3
 8008a10:	3b01      	subs	r3, #1
 8008a12:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008a16:	2a39      	cmp	r2, #57	; 0x39
 8008a18:	d06c      	beq.n	8008af4 <_dtoa_r+0xba4>
 8008a1a:	3201      	adds	r2, #1
 8008a1c:	701a      	strb	r2, [r3, #0]
 8008a1e:	e747      	b.n	80088b0 <_dtoa_r+0x960>
 8008a20:	2a00      	cmp	r2, #0
 8008a22:	dd07      	ble.n	8008a34 <_dtoa_r+0xae4>
 8008a24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008a28:	d0ed      	beq.n	8008a06 <_dtoa_r+0xab6>
 8008a2a:	9a01      	ldr	r2, [sp, #4]
 8008a2c:	f109 0301 	add.w	r3, r9, #1
 8008a30:	7013      	strb	r3, [r2, #0]
 8008a32:	e73d      	b.n	80088b0 <_dtoa_r+0x960>
 8008a34:	9b04      	ldr	r3, [sp, #16]
 8008a36:	9a08      	ldr	r2, [sp, #32]
 8008a38:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d043      	beq.n	8008ac8 <_dtoa_r+0xb78>
 8008a40:	4651      	mov	r1, sl
 8008a42:	2300      	movs	r3, #0
 8008a44:	220a      	movs	r2, #10
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 f9d6 	bl	8008df8 <__multadd>
 8008a4c:	45b8      	cmp	r8, r7
 8008a4e:	4682      	mov	sl, r0
 8008a50:	f04f 0300 	mov.w	r3, #0
 8008a54:	f04f 020a 	mov.w	r2, #10
 8008a58:	4641      	mov	r1, r8
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	d107      	bne.n	8008a6e <_dtoa_r+0xb1e>
 8008a5e:	f000 f9cb 	bl	8008df8 <__multadd>
 8008a62:	4680      	mov	r8, r0
 8008a64:	4607      	mov	r7, r0
 8008a66:	9b04      	ldr	r3, [sp, #16]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	9304      	str	r3, [sp, #16]
 8008a6c:	e775      	b.n	800895a <_dtoa_r+0xa0a>
 8008a6e:	f000 f9c3 	bl	8008df8 <__multadd>
 8008a72:	4639      	mov	r1, r7
 8008a74:	4680      	mov	r8, r0
 8008a76:	2300      	movs	r3, #0
 8008a78:	220a      	movs	r2, #10
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	f000 f9bc 	bl	8008df8 <__multadd>
 8008a80:	4607      	mov	r7, r0
 8008a82:	e7f0      	b.n	8008a66 <_dtoa_r+0xb16>
 8008a84:	9b04      	ldr	r3, [sp, #16]
 8008a86:	9301      	str	r3, [sp, #4]
 8008a88:	9d00      	ldr	r5, [sp, #0]
 8008a8a:	4631      	mov	r1, r6
 8008a8c:	4650      	mov	r0, sl
 8008a8e:	f7ff f9d6 	bl	8007e3e <quorem>
 8008a92:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008a96:	9b00      	ldr	r3, [sp, #0]
 8008a98:	f805 9b01 	strb.w	r9, [r5], #1
 8008a9c:	1aea      	subs	r2, r5, r3
 8008a9e:	9b01      	ldr	r3, [sp, #4]
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	dd07      	ble.n	8008ab4 <_dtoa_r+0xb64>
 8008aa4:	4651      	mov	r1, sl
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	220a      	movs	r2, #10
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 f9a4 	bl	8008df8 <__multadd>
 8008ab0:	4682      	mov	sl, r0
 8008ab2:	e7ea      	b.n	8008a8a <_dtoa_r+0xb3a>
 8008ab4:	9b01      	ldr	r3, [sp, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	bfc8      	it	gt
 8008aba:	461d      	movgt	r5, r3
 8008abc:	9b00      	ldr	r3, [sp, #0]
 8008abe:	bfd8      	it	le
 8008ac0:	2501      	movle	r5, #1
 8008ac2:	441d      	add	r5, r3
 8008ac4:	f04f 0800 	mov.w	r8, #0
 8008ac8:	4651      	mov	r1, sl
 8008aca:	2201      	movs	r2, #1
 8008acc:	4620      	mov	r0, r4
 8008ace:	f000 fb41 	bl	8009154 <__lshift>
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4682      	mov	sl, r0
 8008ad6:	f000 fba9 	bl	800922c <__mcmp>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	dc96      	bgt.n	8008a0c <_dtoa_r+0xabc>
 8008ade:	d102      	bne.n	8008ae6 <_dtoa_r+0xb96>
 8008ae0:	f019 0f01 	tst.w	r9, #1
 8008ae4:	d192      	bne.n	8008a0c <_dtoa_r+0xabc>
 8008ae6:	462b      	mov	r3, r5
 8008ae8:	461d      	mov	r5, r3
 8008aea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008aee:	2a30      	cmp	r2, #48	; 0x30
 8008af0:	d0fa      	beq.n	8008ae8 <_dtoa_r+0xb98>
 8008af2:	e6dd      	b.n	80088b0 <_dtoa_r+0x960>
 8008af4:	9a00      	ldr	r2, [sp, #0]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d189      	bne.n	8008a0e <_dtoa_r+0xabe>
 8008afa:	f10b 0b01 	add.w	fp, fp, #1
 8008afe:	2331      	movs	r3, #49	; 0x31
 8008b00:	e796      	b.n	8008a30 <_dtoa_r+0xae0>
 8008b02:	4b0a      	ldr	r3, [pc, #40]	; (8008b2c <_dtoa_r+0xbdc>)
 8008b04:	f7ff ba99 	b.w	800803a <_dtoa_r+0xea>
 8008b08:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f47f aa6d 	bne.w	8007fea <_dtoa_r+0x9a>
 8008b10:	4b07      	ldr	r3, [pc, #28]	; (8008b30 <_dtoa_r+0xbe0>)
 8008b12:	f7ff ba92 	b.w	800803a <_dtoa_r+0xea>
 8008b16:	9b01      	ldr	r3, [sp, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	dcb5      	bgt.n	8008a88 <_dtoa_r+0xb38>
 8008b1c:	9b07      	ldr	r3, [sp, #28]
 8008b1e:	2b02      	cmp	r3, #2
 8008b20:	f73f aeb1 	bgt.w	8008886 <_dtoa_r+0x936>
 8008b24:	e7b0      	b.n	8008a88 <_dtoa_r+0xb38>
 8008b26:	bf00      	nop
 8008b28:	0800b085 	.word	0x0800b085
 8008b2c:	0800afe5 	.word	0x0800afe5
 8008b30:	0800b009 	.word	0x0800b009

08008b34 <_free_r>:
 8008b34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b36:	2900      	cmp	r1, #0
 8008b38:	d044      	beq.n	8008bc4 <_free_r+0x90>
 8008b3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b3e:	9001      	str	r0, [sp, #4]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f1a1 0404 	sub.w	r4, r1, #4
 8008b46:	bfb8      	it	lt
 8008b48:	18e4      	addlt	r4, r4, r3
 8008b4a:	f000 f8e7 	bl	8008d1c <__malloc_lock>
 8008b4e:	4a1e      	ldr	r2, [pc, #120]	; (8008bc8 <_free_r+0x94>)
 8008b50:	9801      	ldr	r0, [sp, #4]
 8008b52:	6813      	ldr	r3, [r2, #0]
 8008b54:	b933      	cbnz	r3, 8008b64 <_free_r+0x30>
 8008b56:	6063      	str	r3, [r4, #4]
 8008b58:	6014      	str	r4, [r2, #0]
 8008b5a:	b003      	add	sp, #12
 8008b5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b60:	f000 b8e2 	b.w	8008d28 <__malloc_unlock>
 8008b64:	42a3      	cmp	r3, r4
 8008b66:	d908      	bls.n	8008b7a <_free_r+0x46>
 8008b68:	6825      	ldr	r5, [r4, #0]
 8008b6a:	1961      	adds	r1, r4, r5
 8008b6c:	428b      	cmp	r3, r1
 8008b6e:	bf01      	itttt	eq
 8008b70:	6819      	ldreq	r1, [r3, #0]
 8008b72:	685b      	ldreq	r3, [r3, #4]
 8008b74:	1949      	addeq	r1, r1, r5
 8008b76:	6021      	streq	r1, [r4, #0]
 8008b78:	e7ed      	b.n	8008b56 <_free_r+0x22>
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	b10b      	cbz	r3, 8008b84 <_free_r+0x50>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d9fa      	bls.n	8008b7a <_free_r+0x46>
 8008b84:	6811      	ldr	r1, [r2, #0]
 8008b86:	1855      	adds	r5, r2, r1
 8008b88:	42a5      	cmp	r5, r4
 8008b8a:	d10b      	bne.n	8008ba4 <_free_r+0x70>
 8008b8c:	6824      	ldr	r4, [r4, #0]
 8008b8e:	4421      	add	r1, r4
 8008b90:	1854      	adds	r4, r2, r1
 8008b92:	42a3      	cmp	r3, r4
 8008b94:	6011      	str	r1, [r2, #0]
 8008b96:	d1e0      	bne.n	8008b5a <_free_r+0x26>
 8008b98:	681c      	ldr	r4, [r3, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	6053      	str	r3, [r2, #4]
 8008b9e:	440c      	add	r4, r1
 8008ba0:	6014      	str	r4, [r2, #0]
 8008ba2:	e7da      	b.n	8008b5a <_free_r+0x26>
 8008ba4:	d902      	bls.n	8008bac <_free_r+0x78>
 8008ba6:	230c      	movs	r3, #12
 8008ba8:	6003      	str	r3, [r0, #0]
 8008baa:	e7d6      	b.n	8008b5a <_free_r+0x26>
 8008bac:	6825      	ldr	r5, [r4, #0]
 8008bae:	1961      	adds	r1, r4, r5
 8008bb0:	428b      	cmp	r3, r1
 8008bb2:	bf04      	itt	eq
 8008bb4:	6819      	ldreq	r1, [r3, #0]
 8008bb6:	685b      	ldreq	r3, [r3, #4]
 8008bb8:	6063      	str	r3, [r4, #4]
 8008bba:	bf04      	itt	eq
 8008bbc:	1949      	addeq	r1, r1, r5
 8008bbe:	6021      	streq	r1, [r4, #0]
 8008bc0:	6054      	str	r4, [r2, #4]
 8008bc2:	e7ca      	b.n	8008b5a <_free_r+0x26>
 8008bc4:	b003      	add	sp, #12
 8008bc6:	bd30      	pop	{r4, r5, pc}
 8008bc8:	20000c14 	.word	0x20000c14

08008bcc <malloc>:
 8008bcc:	4b02      	ldr	r3, [pc, #8]	; (8008bd8 <malloc+0xc>)
 8008bce:	4601      	mov	r1, r0
 8008bd0:	6818      	ldr	r0, [r3, #0]
 8008bd2:	f000 b823 	b.w	8008c1c <_malloc_r>
 8008bd6:	bf00      	nop
 8008bd8:	200000dc 	.word	0x200000dc

08008bdc <sbrk_aligned>:
 8008bdc:	b570      	push	{r4, r5, r6, lr}
 8008bde:	4e0e      	ldr	r6, [pc, #56]	; (8008c18 <sbrk_aligned+0x3c>)
 8008be0:	460c      	mov	r4, r1
 8008be2:	6831      	ldr	r1, [r6, #0]
 8008be4:	4605      	mov	r5, r0
 8008be6:	b911      	cbnz	r1, 8008bee <sbrk_aligned+0x12>
 8008be8:	f000 fe40 	bl	800986c <_sbrk_r>
 8008bec:	6030      	str	r0, [r6, #0]
 8008bee:	4621      	mov	r1, r4
 8008bf0:	4628      	mov	r0, r5
 8008bf2:	f000 fe3b 	bl	800986c <_sbrk_r>
 8008bf6:	1c43      	adds	r3, r0, #1
 8008bf8:	d00a      	beq.n	8008c10 <sbrk_aligned+0x34>
 8008bfa:	1cc4      	adds	r4, r0, #3
 8008bfc:	f024 0403 	bic.w	r4, r4, #3
 8008c00:	42a0      	cmp	r0, r4
 8008c02:	d007      	beq.n	8008c14 <sbrk_aligned+0x38>
 8008c04:	1a21      	subs	r1, r4, r0
 8008c06:	4628      	mov	r0, r5
 8008c08:	f000 fe30 	bl	800986c <_sbrk_r>
 8008c0c:	3001      	adds	r0, #1
 8008c0e:	d101      	bne.n	8008c14 <sbrk_aligned+0x38>
 8008c10:	f04f 34ff 	mov.w	r4, #4294967295
 8008c14:	4620      	mov	r0, r4
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	20000c18 	.word	0x20000c18

08008c1c <_malloc_r>:
 8008c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c20:	1ccd      	adds	r5, r1, #3
 8008c22:	f025 0503 	bic.w	r5, r5, #3
 8008c26:	3508      	adds	r5, #8
 8008c28:	2d0c      	cmp	r5, #12
 8008c2a:	bf38      	it	cc
 8008c2c:	250c      	movcc	r5, #12
 8008c2e:	2d00      	cmp	r5, #0
 8008c30:	4607      	mov	r7, r0
 8008c32:	db01      	blt.n	8008c38 <_malloc_r+0x1c>
 8008c34:	42a9      	cmp	r1, r5
 8008c36:	d905      	bls.n	8008c44 <_malloc_r+0x28>
 8008c38:	230c      	movs	r3, #12
 8008c3a:	603b      	str	r3, [r7, #0]
 8008c3c:	2600      	movs	r6, #0
 8008c3e:	4630      	mov	r0, r6
 8008c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008d18 <_malloc_r+0xfc>
 8008c48:	f000 f868 	bl	8008d1c <__malloc_lock>
 8008c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c50:	461c      	mov	r4, r3
 8008c52:	bb5c      	cbnz	r4, 8008cac <_malloc_r+0x90>
 8008c54:	4629      	mov	r1, r5
 8008c56:	4638      	mov	r0, r7
 8008c58:	f7ff ffc0 	bl	8008bdc <sbrk_aligned>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	4604      	mov	r4, r0
 8008c60:	d155      	bne.n	8008d0e <_malloc_r+0xf2>
 8008c62:	f8d8 4000 	ldr.w	r4, [r8]
 8008c66:	4626      	mov	r6, r4
 8008c68:	2e00      	cmp	r6, #0
 8008c6a:	d145      	bne.n	8008cf8 <_malloc_r+0xdc>
 8008c6c:	2c00      	cmp	r4, #0
 8008c6e:	d048      	beq.n	8008d02 <_malloc_r+0xe6>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	4631      	mov	r1, r6
 8008c74:	4638      	mov	r0, r7
 8008c76:	eb04 0903 	add.w	r9, r4, r3
 8008c7a:	f000 fdf7 	bl	800986c <_sbrk_r>
 8008c7e:	4581      	cmp	r9, r0
 8008c80:	d13f      	bne.n	8008d02 <_malloc_r+0xe6>
 8008c82:	6821      	ldr	r1, [r4, #0]
 8008c84:	1a6d      	subs	r5, r5, r1
 8008c86:	4629      	mov	r1, r5
 8008c88:	4638      	mov	r0, r7
 8008c8a:	f7ff ffa7 	bl	8008bdc <sbrk_aligned>
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d037      	beq.n	8008d02 <_malloc_r+0xe6>
 8008c92:	6823      	ldr	r3, [r4, #0]
 8008c94:	442b      	add	r3, r5
 8008c96:	6023      	str	r3, [r4, #0]
 8008c98:	f8d8 3000 	ldr.w	r3, [r8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d038      	beq.n	8008d12 <_malloc_r+0xf6>
 8008ca0:	685a      	ldr	r2, [r3, #4]
 8008ca2:	42a2      	cmp	r2, r4
 8008ca4:	d12b      	bne.n	8008cfe <_malloc_r+0xe2>
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	605a      	str	r2, [r3, #4]
 8008caa:	e00f      	b.n	8008ccc <_malloc_r+0xb0>
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	1b52      	subs	r2, r2, r5
 8008cb0:	d41f      	bmi.n	8008cf2 <_malloc_r+0xd6>
 8008cb2:	2a0b      	cmp	r2, #11
 8008cb4:	d917      	bls.n	8008ce6 <_malloc_r+0xca>
 8008cb6:	1961      	adds	r1, r4, r5
 8008cb8:	42a3      	cmp	r3, r4
 8008cba:	6025      	str	r5, [r4, #0]
 8008cbc:	bf18      	it	ne
 8008cbe:	6059      	strne	r1, [r3, #4]
 8008cc0:	6863      	ldr	r3, [r4, #4]
 8008cc2:	bf08      	it	eq
 8008cc4:	f8c8 1000 	streq.w	r1, [r8]
 8008cc8:	5162      	str	r2, [r4, r5]
 8008cca:	604b      	str	r3, [r1, #4]
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f104 060b 	add.w	r6, r4, #11
 8008cd2:	f000 f829 	bl	8008d28 <__malloc_unlock>
 8008cd6:	f026 0607 	bic.w	r6, r6, #7
 8008cda:	1d23      	adds	r3, r4, #4
 8008cdc:	1af2      	subs	r2, r6, r3
 8008cde:	d0ae      	beq.n	8008c3e <_malloc_r+0x22>
 8008ce0:	1b9b      	subs	r3, r3, r6
 8008ce2:	50a3      	str	r3, [r4, r2]
 8008ce4:	e7ab      	b.n	8008c3e <_malloc_r+0x22>
 8008ce6:	42a3      	cmp	r3, r4
 8008ce8:	6862      	ldr	r2, [r4, #4]
 8008cea:	d1dd      	bne.n	8008ca8 <_malloc_r+0x8c>
 8008cec:	f8c8 2000 	str.w	r2, [r8]
 8008cf0:	e7ec      	b.n	8008ccc <_malloc_r+0xb0>
 8008cf2:	4623      	mov	r3, r4
 8008cf4:	6864      	ldr	r4, [r4, #4]
 8008cf6:	e7ac      	b.n	8008c52 <_malloc_r+0x36>
 8008cf8:	4634      	mov	r4, r6
 8008cfa:	6876      	ldr	r6, [r6, #4]
 8008cfc:	e7b4      	b.n	8008c68 <_malloc_r+0x4c>
 8008cfe:	4613      	mov	r3, r2
 8008d00:	e7cc      	b.n	8008c9c <_malloc_r+0x80>
 8008d02:	230c      	movs	r3, #12
 8008d04:	603b      	str	r3, [r7, #0]
 8008d06:	4638      	mov	r0, r7
 8008d08:	f000 f80e 	bl	8008d28 <__malloc_unlock>
 8008d0c:	e797      	b.n	8008c3e <_malloc_r+0x22>
 8008d0e:	6025      	str	r5, [r4, #0]
 8008d10:	e7dc      	b.n	8008ccc <_malloc_r+0xb0>
 8008d12:	605b      	str	r3, [r3, #4]
 8008d14:	deff      	udf	#255	; 0xff
 8008d16:	bf00      	nop
 8008d18:	20000c14 	.word	0x20000c14

08008d1c <__malloc_lock>:
 8008d1c:	4801      	ldr	r0, [pc, #4]	; (8008d24 <__malloc_lock+0x8>)
 8008d1e:	f7ff b88c 	b.w	8007e3a <__retarget_lock_acquire_recursive>
 8008d22:	bf00      	nop
 8008d24:	20000c10 	.word	0x20000c10

08008d28 <__malloc_unlock>:
 8008d28:	4801      	ldr	r0, [pc, #4]	; (8008d30 <__malloc_unlock+0x8>)
 8008d2a:	f7ff b887 	b.w	8007e3c <__retarget_lock_release_recursive>
 8008d2e:	bf00      	nop
 8008d30:	20000c10 	.word	0x20000c10

08008d34 <_Balloc>:
 8008d34:	b570      	push	{r4, r5, r6, lr}
 8008d36:	69c6      	ldr	r6, [r0, #28]
 8008d38:	4604      	mov	r4, r0
 8008d3a:	460d      	mov	r5, r1
 8008d3c:	b976      	cbnz	r6, 8008d5c <_Balloc+0x28>
 8008d3e:	2010      	movs	r0, #16
 8008d40:	f7ff ff44 	bl	8008bcc <malloc>
 8008d44:	4602      	mov	r2, r0
 8008d46:	61e0      	str	r0, [r4, #28]
 8008d48:	b920      	cbnz	r0, 8008d54 <_Balloc+0x20>
 8008d4a:	4b18      	ldr	r3, [pc, #96]	; (8008dac <_Balloc+0x78>)
 8008d4c:	4818      	ldr	r0, [pc, #96]	; (8008db0 <_Balloc+0x7c>)
 8008d4e:	216b      	movs	r1, #107	; 0x6b
 8008d50:	f000 fdaa 	bl	80098a8 <__assert_func>
 8008d54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d58:	6006      	str	r6, [r0, #0]
 8008d5a:	60c6      	str	r6, [r0, #12]
 8008d5c:	69e6      	ldr	r6, [r4, #28]
 8008d5e:	68f3      	ldr	r3, [r6, #12]
 8008d60:	b183      	cbz	r3, 8008d84 <_Balloc+0x50>
 8008d62:	69e3      	ldr	r3, [r4, #28]
 8008d64:	68db      	ldr	r3, [r3, #12]
 8008d66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d6a:	b9b8      	cbnz	r0, 8008d9c <_Balloc+0x68>
 8008d6c:	2101      	movs	r1, #1
 8008d6e:	fa01 f605 	lsl.w	r6, r1, r5
 8008d72:	1d72      	adds	r2, r6, #5
 8008d74:	0092      	lsls	r2, r2, #2
 8008d76:	4620      	mov	r0, r4
 8008d78:	f000 fdb4 	bl	80098e4 <_calloc_r>
 8008d7c:	b160      	cbz	r0, 8008d98 <_Balloc+0x64>
 8008d7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d82:	e00e      	b.n	8008da2 <_Balloc+0x6e>
 8008d84:	2221      	movs	r2, #33	; 0x21
 8008d86:	2104      	movs	r1, #4
 8008d88:	4620      	mov	r0, r4
 8008d8a:	f000 fdab 	bl	80098e4 <_calloc_r>
 8008d8e:	69e3      	ldr	r3, [r4, #28]
 8008d90:	60f0      	str	r0, [r6, #12]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e4      	bne.n	8008d62 <_Balloc+0x2e>
 8008d98:	2000      	movs	r0, #0
 8008d9a:	bd70      	pop	{r4, r5, r6, pc}
 8008d9c:	6802      	ldr	r2, [r0, #0]
 8008d9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008da2:	2300      	movs	r3, #0
 8008da4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008da8:	e7f7      	b.n	8008d9a <_Balloc+0x66>
 8008daa:	bf00      	nop
 8008dac:	0800b016 	.word	0x0800b016
 8008db0:	0800b096 	.word	0x0800b096

08008db4 <_Bfree>:
 8008db4:	b570      	push	{r4, r5, r6, lr}
 8008db6:	69c6      	ldr	r6, [r0, #28]
 8008db8:	4605      	mov	r5, r0
 8008dba:	460c      	mov	r4, r1
 8008dbc:	b976      	cbnz	r6, 8008ddc <_Bfree+0x28>
 8008dbe:	2010      	movs	r0, #16
 8008dc0:	f7ff ff04 	bl	8008bcc <malloc>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	61e8      	str	r0, [r5, #28]
 8008dc8:	b920      	cbnz	r0, 8008dd4 <_Bfree+0x20>
 8008dca:	4b09      	ldr	r3, [pc, #36]	; (8008df0 <_Bfree+0x3c>)
 8008dcc:	4809      	ldr	r0, [pc, #36]	; (8008df4 <_Bfree+0x40>)
 8008dce:	218f      	movs	r1, #143	; 0x8f
 8008dd0:	f000 fd6a 	bl	80098a8 <__assert_func>
 8008dd4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dd8:	6006      	str	r6, [r0, #0]
 8008dda:	60c6      	str	r6, [r0, #12]
 8008ddc:	b13c      	cbz	r4, 8008dee <_Bfree+0x3a>
 8008dde:	69eb      	ldr	r3, [r5, #28]
 8008de0:	6862      	ldr	r2, [r4, #4]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008de8:	6021      	str	r1, [r4, #0]
 8008dea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dee:	bd70      	pop	{r4, r5, r6, pc}
 8008df0:	0800b016 	.word	0x0800b016
 8008df4:	0800b096 	.word	0x0800b096

08008df8 <__multadd>:
 8008df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfc:	690d      	ldr	r5, [r1, #16]
 8008dfe:	4607      	mov	r7, r0
 8008e00:	460c      	mov	r4, r1
 8008e02:	461e      	mov	r6, r3
 8008e04:	f101 0c14 	add.w	ip, r1, #20
 8008e08:	2000      	movs	r0, #0
 8008e0a:	f8dc 3000 	ldr.w	r3, [ip]
 8008e0e:	b299      	uxth	r1, r3
 8008e10:	fb02 6101 	mla	r1, r2, r1, r6
 8008e14:	0c1e      	lsrs	r6, r3, #16
 8008e16:	0c0b      	lsrs	r3, r1, #16
 8008e18:	fb02 3306 	mla	r3, r2, r6, r3
 8008e1c:	b289      	uxth	r1, r1
 8008e1e:	3001      	adds	r0, #1
 8008e20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008e24:	4285      	cmp	r5, r0
 8008e26:	f84c 1b04 	str.w	r1, [ip], #4
 8008e2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e2e:	dcec      	bgt.n	8008e0a <__multadd+0x12>
 8008e30:	b30e      	cbz	r6, 8008e76 <__multadd+0x7e>
 8008e32:	68a3      	ldr	r3, [r4, #8]
 8008e34:	42ab      	cmp	r3, r5
 8008e36:	dc19      	bgt.n	8008e6c <__multadd+0x74>
 8008e38:	6861      	ldr	r1, [r4, #4]
 8008e3a:	4638      	mov	r0, r7
 8008e3c:	3101      	adds	r1, #1
 8008e3e:	f7ff ff79 	bl	8008d34 <_Balloc>
 8008e42:	4680      	mov	r8, r0
 8008e44:	b928      	cbnz	r0, 8008e52 <__multadd+0x5a>
 8008e46:	4602      	mov	r2, r0
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <__multadd+0x84>)
 8008e4a:	480d      	ldr	r0, [pc, #52]	; (8008e80 <__multadd+0x88>)
 8008e4c:	21ba      	movs	r1, #186	; 0xba
 8008e4e:	f000 fd2b 	bl	80098a8 <__assert_func>
 8008e52:	6922      	ldr	r2, [r4, #16]
 8008e54:	3202      	adds	r2, #2
 8008e56:	f104 010c 	add.w	r1, r4, #12
 8008e5a:	0092      	lsls	r2, r2, #2
 8008e5c:	300c      	adds	r0, #12
 8008e5e:	f000 fd15 	bl	800988c <memcpy>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4638      	mov	r0, r7
 8008e66:	f7ff ffa5 	bl	8008db4 <_Bfree>
 8008e6a:	4644      	mov	r4, r8
 8008e6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e70:	3501      	adds	r5, #1
 8008e72:	615e      	str	r6, [r3, #20]
 8008e74:	6125      	str	r5, [r4, #16]
 8008e76:	4620      	mov	r0, r4
 8008e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e7c:	0800b085 	.word	0x0800b085
 8008e80:	0800b096 	.word	0x0800b096

08008e84 <__hi0bits>:
 8008e84:	0c03      	lsrs	r3, r0, #16
 8008e86:	041b      	lsls	r3, r3, #16
 8008e88:	b9d3      	cbnz	r3, 8008ec0 <__hi0bits+0x3c>
 8008e8a:	0400      	lsls	r0, r0, #16
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008e92:	bf04      	itt	eq
 8008e94:	0200      	lsleq	r0, r0, #8
 8008e96:	3308      	addeq	r3, #8
 8008e98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008e9c:	bf04      	itt	eq
 8008e9e:	0100      	lsleq	r0, r0, #4
 8008ea0:	3304      	addeq	r3, #4
 8008ea2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008ea6:	bf04      	itt	eq
 8008ea8:	0080      	lsleq	r0, r0, #2
 8008eaa:	3302      	addeq	r3, #2
 8008eac:	2800      	cmp	r0, #0
 8008eae:	db05      	blt.n	8008ebc <__hi0bits+0x38>
 8008eb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008eb4:	f103 0301 	add.w	r3, r3, #1
 8008eb8:	bf08      	it	eq
 8008eba:	2320      	moveq	r3, #32
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	4770      	bx	lr
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	e7e4      	b.n	8008e8e <__hi0bits+0xa>

08008ec4 <__lo0bits>:
 8008ec4:	6803      	ldr	r3, [r0, #0]
 8008ec6:	f013 0207 	ands.w	r2, r3, #7
 8008eca:	d00c      	beq.n	8008ee6 <__lo0bits+0x22>
 8008ecc:	07d9      	lsls	r1, r3, #31
 8008ece:	d422      	bmi.n	8008f16 <__lo0bits+0x52>
 8008ed0:	079a      	lsls	r2, r3, #30
 8008ed2:	bf49      	itett	mi
 8008ed4:	085b      	lsrmi	r3, r3, #1
 8008ed6:	089b      	lsrpl	r3, r3, #2
 8008ed8:	6003      	strmi	r3, [r0, #0]
 8008eda:	2201      	movmi	r2, #1
 8008edc:	bf5c      	itt	pl
 8008ede:	6003      	strpl	r3, [r0, #0]
 8008ee0:	2202      	movpl	r2, #2
 8008ee2:	4610      	mov	r0, r2
 8008ee4:	4770      	bx	lr
 8008ee6:	b299      	uxth	r1, r3
 8008ee8:	b909      	cbnz	r1, 8008eee <__lo0bits+0x2a>
 8008eea:	0c1b      	lsrs	r3, r3, #16
 8008eec:	2210      	movs	r2, #16
 8008eee:	b2d9      	uxtb	r1, r3
 8008ef0:	b909      	cbnz	r1, 8008ef6 <__lo0bits+0x32>
 8008ef2:	3208      	adds	r2, #8
 8008ef4:	0a1b      	lsrs	r3, r3, #8
 8008ef6:	0719      	lsls	r1, r3, #28
 8008ef8:	bf04      	itt	eq
 8008efa:	091b      	lsreq	r3, r3, #4
 8008efc:	3204      	addeq	r2, #4
 8008efe:	0799      	lsls	r1, r3, #30
 8008f00:	bf04      	itt	eq
 8008f02:	089b      	lsreq	r3, r3, #2
 8008f04:	3202      	addeq	r2, #2
 8008f06:	07d9      	lsls	r1, r3, #31
 8008f08:	d403      	bmi.n	8008f12 <__lo0bits+0x4e>
 8008f0a:	085b      	lsrs	r3, r3, #1
 8008f0c:	f102 0201 	add.w	r2, r2, #1
 8008f10:	d003      	beq.n	8008f1a <__lo0bits+0x56>
 8008f12:	6003      	str	r3, [r0, #0]
 8008f14:	e7e5      	b.n	8008ee2 <__lo0bits+0x1e>
 8008f16:	2200      	movs	r2, #0
 8008f18:	e7e3      	b.n	8008ee2 <__lo0bits+0x1e>
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	e7e1      	b.n	8008ee2 <__lo0bits+0x1e>
	...

08008f20 <__i2b>:
 8008f20:	b510      	push	{r4, lr}
 8008f22:	460c      	mov	r4, r1
 8008f24:	2101      	movs	r1, #1
 8008f26:	f7ff ff05 	bl	8008d34 <_Balloc>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	b928      	cbnz	r0, 8008f3a <__i2b+0x1a>
 8008f2e:	4b05      	ldr	r3, [pc, #20]	; (8008f44 <__i2b+0x24>)
 8008f30:	4805      	ldr	r0, [pc, #20]	; (8008f48 <__i2b+0x28>)
 8008f32:	f240 1145 	movw	r1, #325	; 0x145
 8008f36:	f000 fcb7 	bl	80098a8 <__assert_func>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	6144      	str	r4, [r0, #20]
 8008f3e:	6103      	str	r3, [r0, #16]
 8008f40:	bd10      	pop	{r4, pc}
 8008f42:	bf00      	nop
 8008f44:	0800b085 	.word	0x0800b085
 8008f48:	0800b096 	.word	0x0800b096

08008f4c <__multiply>:
 8008f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f50:	4691      	mov	r9, r2
 8008f52:	690a      	ldr	r2, [r1, #16]
 8008f54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	bfb8      	it	lt
 8008f5c:	460b      	movlt	r3, r1
 8008f5e:	460c      	mov	r4, r1
 8008f60:	bfbc      	itt	lt
 8008f62:	464c      	movlt	r4, r9
 8008f64:	4699      	movlt	r9, r3
 8008f66:	6927      	ldr	r7, [r4, #16]
 8008f68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008f6c:	68a3      	ldr	r3, [r4, #8]
 8008f6e:	6861      	ldr	r1, [r4, #4]
 8008f70:	eb07 060a 	add.w	r6, r7, sl
 8008f74:	42b3      	cmp	r3, r6
 8008f76:	b085      	sub	sp, #20
 8008f78:	bfb8      	it	lt
 8008f7a:	3101      	addlt	r1, #1
 8008f7c:	f7ff feda 	bl	8008d34 <_Balloc>
 8008f80:	b930      	cbnz	r0, 8008f90 <__multiply+0x44>
 8008f82:	4602      	mov	r2, r0
 8008f84:	4b44      	ldr	r3, [pc, #272]	; (8009098 <__multiply+0x14c>)
 8008f86:	4845      	ldr	r0, [pc, #276]	; (800909c <__multiply+0x150>)
 8008f88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008f8c:	f000 fc8c 	bl	80098a8 <__assert_func>
 8008f90:	f100 0514 	add.w	r5, r0, #20
 8008f94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f98:	462b      	mov	r3, r5
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	4543      	cmp	r3, r8
 8008f9e:	d321      	bcc.n	8008fe4 <__multiply+0x98>
 8008fa0:	f104 0314 	add.w	r3, r4, #20
 8008fa4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008fa8:	f109 0314 	add.w	r3, r9, #20
 8008fac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008fb0:	9202      	str	r2, [sp, #8]
 8008fb2:	1b3a      	subs	r2, r7, r4
 8008fb4:	3a15      	subs	r2, #21
 8008fb6:	f022 0203 	bic.w	r2, r2, #3
 8008fba:	3204      	adds	r2, #4
 8008fbc:	f104 0115 	add.w	r1, r4, #21
 8008fc0:	428f      	cmp	r7, r1
 8008fc2:	bf38      	it	cc
 8008fc4:	2204      	movcc	r2, #4
 8008fc6:	9201      	str	r2, [sp, #4]
 8008fc8:	9a02      	ldr	r2, [sp, #8]
 8008fca:	9303      	str	r3, [sp, #12]
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d80c      	bhi.n	8008fea <__multiply+0x9e>
 8008fd0:	2e00      	cmp	r6, #0
 8008fd2:	dd03      	ble.n	8008fdc <__multiply+0x90>
 8008fd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d05b      	beq.n	8009094 <__multiply+0x148>
 8008fdc:	6106      	str	r6, [r0, #16]
 8008fde:	b005      	add	sp, #20
 8008fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fe4:	f843 2b04 	str.w	r2, [r3], #4
 8008fe8:	e7d8      	b.n	8008f9c <__multiply+0x50>
 8008fea:	f8b3 a000 	ldrh.w	sl, [r3]
 8008fee:	f1ba 0f00 	cmp.w	sl, #0
 8008ff2:	d024      	beq.n	800903e <__multiply+0xf2>
 8008ff4:	f104 0e14 	add.w	lr, r4, #20
 8008ff8:	46a9      	mov	r9, r5
 8008ffa:	f04f 0c00 	mov.w	ip, #0
 8008ffe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009002:	f8d9 1000 	ldr.w	r1, [r9]
 8009006:	fa1f fb82 	uxth.w	fp, r2
 800900a:	b289      	uxth	r1, r1
 800900c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009010:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009014:	f8d9 2000 	ldr.w	r2, [r9]
 8009018:	4461      	add	r1, ip
 800901a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800901e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009022:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009026:	b289      	uxth	r1, r1
 8009028:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800902c:	4577      	cmp	r7, lr
 800902e:	f849 1b04 	str.w	r1, [r9], #4
 8009032:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009036:	d8e2      	bhi.n	8008ffe <__multiply+0xb2>
 8009038:	9a01      	ldr	r2, [sp, #4]
 800903a:	f845 c002 	str.w	ip, [r5, r2]
 800903e:	9a03      	ldr	r2, [sp, #12]
 8009040:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009044:	3304      	adds	r3, #4
 8009046:	f1b9 0f00 	cmp.w	r9, #0
 800904a:	d021      	beq.n	8009090 <__multiply+0x144>
 800904c:	6829      	ldr	r1, [r5, #0]
 800904e:	f104 0c14 	add.w	ip, r4, #20
 8009052:	46ae      	mov	lr, r5
 8009054:	f04f 0a00 	mov.w	sl, #0
 8009058:	f8bc b000 	ldrh.w	fp, [ip]
 800905c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009060:	fb09 220b 	mla	r2, r9, fp, r2
 8009064:	4452      	add	r2, sl
 8009066:	b289      	uxth	r1, r1
 8009068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800906c:	f84e 1b04 	str.w	r1, [lr], #4
 8009070:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009074:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009078:	f8be 1000 	ldrh.w	r1, [lr]
 800907c:	fb09 110a 	mla	r1, r9, sl, r1
 8009080:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009084:	4567      	cmp	r7, ip
 8009086:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800908a:	d8e5      	bhi.n	8009058 <__multiply+0x10c>
 800908c:	9a01      	ldr	r2, [sp, #4]
 800908e:	50a9      	str	r1, [r5, r2]
 8009090:	3504      	adds	r5, #4
 8009092:	e799      	b.n	8008fc8 <__multiply+0x7c>
 8009094:	3e01      	subs	r6, #1
 8009096:	e79b      	b.n	8008fd0 <__multiply+0x84>
 8009098:	0800b085 	.word	0x0800b085
 800909c:	0800b096 	.word	0x0800b096

080090a0 <__pow5mult>:
 80090a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090a4:	4615      	mov	r5, r2
 80090a6:	f012 0203 	ands.w	r2, r2, #3
 80090aa:	4606      	mov	r6, r0
 80090ac:	460f      	mov	r7, r1
 80090ae:	d007      	beq.n	80090c0 <__pow5mult+0x20>
 80090b0:	4c25      	ldr	r4, [pc, #148]	; (8009148 <__pow5mult+0xa8>)
 80090b2:	3a01      	subs	r2, #1
 80090b4:	2300      	movs	r3, #0
 80090b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80090ba:	f7ff fe9d 	bl	8008df8 <__multadd>
 80090be:	4607      	mov	r7, r0
 80090c0:	10ad      	asrs	r5, r5, #2
 80090c2:	d03d      	beq.n	8009140 <__pow5mult+0xa0>
 80090c4:	69f4      	ldr	r4, [r6, #28]
 80090c6:	b97c      	cbnz	r4, 80090e8 <__pow5mult+0x48>
 80090c8:	2010      	movs	r0, #16
 80090ca:	f7ff fd7f 	bl	8008bcc <malloc>
 80090ce:	4602      	mov	r2, r0
 80090d0:	61f0      	str	r0, [r6, #28]
 80090d2:	b928      	cbnz	r0, 80090e0 <__pow5mult+0x40>
 80090d4:	4b1d      	ldr	r3, [pc, #116]	; (800914c <__pow5mult+0xac>)
 80090d6:	481e      	ldr	r0, [pc, #120]	; (8009150 <__pow5mult+0xb0>)
 80090d8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80090dc:	f000 fbe4 	bl	80098a8 <__assert_func>
 80090e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090e4:	6004      	str	r4, [r0, #0]
 80090e6:	60c4      	str	r4, [r0, #12]
 80090e8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80090ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80090f0:	b94c      	cbnz	r4, 8009106 <__pow5mult+0x66>
 80090f2:	f240 2171 	movw	r1, #625	; 0x271
 80090f6:	4630      	mov	r0, r6
 80090f8:	f7ff ff12 	bl	8008f20 <__i2b>
 80090fc:	2300      	movs	r3, #0
 80090fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009102:	4604      	mov	r4, r0
 8009104:	6003      	str	r3, [r0, #0]
 8009106:	f04f 0900 	mov.w	r9, #0
 800910a:	07eb      	lsls	r3, r5, #31
 800910c:	d50a      	bpl.n	8009124 <__pow5mult+0x84>
 800910e:	4639      	mov	r1, r7
 8009110:	4622      	mov	r2, r4
 8009112:	4630      	mov	r0, r6
 8009114:	f7ff ff1a 	bl	8008f4c <__multiply>
 8009118:	4639      	mov	r1, r7
 800911a:	4680      	mov	r8, r0
 800911c:	4630      	mov	r0, r6
 800911e:	f7ff fe49 	bl	8008db4 <_Bfree>
 8009122:	4647      	mov	r7, r8
 8009124:	106d      	asrs	r5, r5, #1
 8009126:	d00b      	beq.n	8009140 <__pow5mult+0xa0>
 8009128:	6820      	ldr	r0, [r4, #0]
 800912a:	b938      	cbnz	r0, 800913c <__pow5mult+0x9c>
 800912c:	4622      	mov	r2, r4
 800912e:	4621      	mov	r1, r4
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff ff0b 	bl	8008f4c <__multiply>
 8009136:	6020      	str	r0, [r4, #0]
 8009138:	f8c0 9000 	str.w	r9, [r0]
 800913c:	4604      	mov	r4, r0
 800913e:	e7e4      	b.n	800910a <__pow5mult+0x6a>
 8009140:	4638      	mov	r0, r7
 8009142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009146:	bf00      	nop
 8009148:	0800b1e0 	.word	0x0800b1e0
 800914c:	0800b016 	.word	0x0800b016
 8009150:	0800b096 	.word	0x0800b096

08009154 <__lshift>:
 8009154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009158:	460c      	mov	r4, r1
 800915a:	6849      	ldr	r1, [r1, #4]
 800915c:	6923      	ldr	r3, [r4, #16]
 800915e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009162:	68a3      	ldr	r3, [r4, #8]
 8009164:	4607      	mov	r7, r0
 8009166:	4691      	mov	r9, r2
 8009168:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800916c:	f108 0601 	add.w	r6, r8, #1
 8009170:	42b3      	cmp	r3, r6
 8009172:	db0b      	blt.n	800918c <__lshift+0x38>
 8009174:	4638      	mov	r0, r7
 8009176:	f7ff fddd 	bl	8008d34 <_Balloc>
 800917a:	4605      	mov	r5, r0
 800917c:	b948      	cbnz	r0, 8009192 <__lshift+0x3e>
 800917e:	4602      	mov	r2, r0
 8009180:	4b28      	ldr	r3, [pc, #160]	; (8009224 <__lshift+0xd0>)
 8009182:	4829      	ldr	r0, [pc, #164]	; (8009228 <__lshift+0xd4>)
 8009184:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009188:	f000 fb8e 	bl	80098a8 <__assert_func>
 800918c:	3101      	adds	r1, #1
 800918e:	005b      	lsls	r3, r3, #1
 8009190:	e7ee      	b.n	8009170 <__lshift+0x1c>
 8009192:	2300      	movs	r3, #0
 8009194:	f100 0114 	add.w	r1, r0, #20
 8009198:	f100 0210 	add.w	r2, r0, #16
 800919c:	4618      	mov	r0, r3
 800919e:	4553      	cmp	r3, sl
 80091a0:	db33      	blt.n	800920a <__lshift+0xb6>
 80091a2:	6920      	ldr	r0, [r4, #16]
 80091a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80091a8:	f104 0314 	add.w	r3, r4, #20
 80091ac:	f019 091f 	ands.w	r9, r9, #31
 80091b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80091b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80091b8:	d02b      	beq.n	8009212 <__lshift+0xbe>
 80091ba:	f1c9 0e20 	rsb	lr, r9, #32
 80091be:	468a      	mov	sl, r1
 80091c0:	2200      	movs	r2, #0
 80091c2:	6818      	ldr	r0, [r3, #0]
 80091c4:	fa00 f009 	lsl.w	r0, r0, r9
 80091c8:	4310      	orrs	r0, r2
 80091ca:	f84a 0b04 	str.w	r0, [sl], #4
 80091ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80091d2:	459c      	cmp	ip, r3
 80091d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80091d8:	d8f3      	bhi.n	80091c2 <__lshift+0x6e>
 80091da:	ebac 0304 	sub.w	r3, ip, r4
 80091de:	3b15      	subs	r3, #21
 80091e0:	f023 0303 	bic.w	r3, r3, #3
 80091e4:	3304      	adds	r3, #4
 80091e6:	f104 0015 	add.w	r0, r4, #21
 80091ea:	4584      	cmp	ip, r0
 80091ec:	bf38      	it	cc
 80091ee:	2304      	movcc	r3, #4
 80091f0:	50ca      	str	r2, [r1, r3]
 80091f2:	b10a      	cbz	r2, 80091f8 <__lshift+0xa4>
 80091f4:	f108 0602 	add.w	r6, r8, #2
 80091f8:	3e01      	subs	r6, #1
 80091fa:	4638      	mov	r0, r7
 80091fc:	612e      	str	r6, [r5, #16]
 80091fe:	4621      	mov	r1, r4
 8009200:	f7ff fdd8 	bl	8008db4 <_Bfree>
 8009204:	4628      	mov	r0, r5
 8009206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800920a:	f842 0f04 	str.w	r0, [r2, #4]!
 800920e:	3301      	adds	r3, #1
 8009210:	e7c5      	b.n	800919e <__lshift+0x4a>
 8009212:	3904      	subs	r1, #4
 8009214:	f853 2b04 	ldr.w	r2, [r3], #4
 8009218:	f841 2f04 	str.w	r2, [r1, #4]!
 800921c:	459c      	cmp	ip, r3
 800921e:	d8f9      	bhi.n	8009214 <__lshift+0xc0>
 8009220:	e7ea      	b.n	80091f8 <__lshift+0xa4>
 8009222:	bf00      	nop
 8009224:	0800b085 	.word	0x0800b085
 8009228:	0800b096 	.word	0x0800b096

0800922c <__mcmp>:
 800922c:	b530      	push	{r4, r5, lr}
 800922e:	6902      	ldr	r2, [r0, #16]
 8009230:	690c      	ldr	r4, [r1, #16]
 8009232:	1b12      	subs	r2, r2, r4
 8009234:	d10e      	bne.n	8009254 <__mcmp+0x28>
 8009236:	f100 0314 	add.w	r3, r0, #20
 800923a:	3114      	adds	r1, #20
 800923c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009240:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009244:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009248:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800924c:	42a5      	cmp	r5, r4
 800924e:	d003      	beq.n	8009258 <__mcmp+0x2c>
 8009250:	d305      	bcc.n	800925e <__mcmp+0x32>
 8009252:	2201      	movs	r2, #1
 8009254:	4610      	mov	r0, r2
 8009256:	bd30      	pop	{r4, r5, pc}
 8009258:	4283      	cmp	r3, r0
 800925a:	d3f3      	bcc.n	8009244 <__mcmp+0x18>
 800925c:	e7fa      	b.n	8009254 <__mcmp+0x28>
 800925e:	f04f 32ff 	mov.w	r2, #4294967295
 8009262:	e7f7      	b.n	8009254 <__mcmp+0x28>

08009264 <__mdiff>:
 8009264:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009268:	460c      	mov	r4, r1
 800926a:	4606      	mov	r6, r0
 800926c:	4611      	mov	r1, r2
 800926e:	4620      	mov	r0, r4
 8009270:	4690      	mov	r8, r2
 8009272:	f7ff ffdb 	bl	800922c <__mcmp>
 8009276:	1e05      	subs	r5, r0, #0
 8009278:	d110      	bne.n	800929c <__mdiff+0x38>
 800927a:	4629      	mov	r1, r5
 800927c:	4630      	mov	r0, r6
 800927e:	f7ff fd59 	bl	8008d34 <_Balloc>
 8009282:	b930      	cbnz	r0, 8009292 <__mdiff+0x2e>
 8009284:	4b3a      	ldr	r3, [pc, #232]	; (8009370 <__mdiff+0x10c>)
 8009286:	4602      	mov	r2, r0
 8009288:	f240 2137 	movw	r1, #567	; 0x237
 800928c:	4839      	ldr	r0, [pc, #228]	; (8009374 <__mdiff+0x110>)
 800928e:	f000 fb0b 	bl	80098a8 <__assert_func>
 8009292:	2301      	movs	r3, #1
 8009294:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009298:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	bfa4      	itt	ge
 800929e:	4643      	movge	r3, r8
 80092a0:	46a0      	movge	r8, r4
 80092a2:	4630      	mov	r0, r6
 80092a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092a8:	bfa6      	itte	ge
 80092aa:	461c      	movge	r4, r3
 80092ac:	2500      	movge	r5, #0
 80092ae:	2501      	movlt	r5, #1
 80092b0:	f7ff fd40 	bl	8008d34 <_Balloc>
 80092b4:	b920      	cbnz	r0, 80092c0 <__mdiff+0x5c>
 80092b6:	4b2e      	ldr	r3, [pc, #184]	; (8009370 <__mdiff+0x10c>)
 80092b8:	4602      	mov	r2, r0
 80092ba:	f240 2145 	movw	r1, #581	; 0x245
 80092be:	e7e5      	b.n	800928c <__mdiff+0x28>
 80092c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80092c4:	6926      	ldr	r6, [r4, #16]
 80092c6:	60c5      	str	r5, [r0, #12]
 80092c8:	f104 0914 	add.w	r9, r4, #20
 80092cc:	f108 0514 	add.w	r5, r8, #20
 80092d0:	f100 0e14 	add.w	lr, r0, #20
 80092d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80092d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80092dc:	f108 0210 	add.w	r2, r8, #16
 80092e0:	46f2      	mov	sl, lr
 80092e2:	2100      	movs	r1, #0
 80092e4:	f859 3b04 	ldr.w	r3, [r9], #4
 80092e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80092ec:	fa11 f88b 	uxtah	r8, r1, fp
 80092f0:	b299      	uxth	r1, r3
 80092f2:	0c1b      	lsrs	r3, r3, #16
 80092f4:	eba8 0801 	sub.w	r8, r8, r1
 80092f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80092fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009300:	fa1f f888 	uxth.w	r8, r8
 8009304:	1419      	asrs	r1, r3, #16
 8009306:	454e      	cmp	r6, r9
 8009308:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800930c:	f84a 3b04 	str.w	r3, [sl], #4
 8009310:	d8e8      	bhi.n	80092e4 <__mdiff+0x80>
 8009312:	1b33      	subs	r3, r6, r4
 8009314:	3b15      	subs	r3, #21
 8009316:	f023 0303 	bic.w	r3, r3, #3
 800931a:	3304      	adds	r3, #4
 800931c:	3415      	adds	r4, #21
 800931e:	42a6      	cmp	r6, r4
 8009320:	bf38      	it	cc
 8009322:	2304      	movcc	r3, #4
 8009324:	441d      	add	r5, r3
 8009326:	4473      	add	r3, lr
 8009328:	469e      	mov	lr, r3
 800932a:	462e      	mov	r6, r5
 800932c:	4566      	cmp	r6, ip
 800932e:	d30e      	bcc.n	800934e <__mdiff+0xea>
 8009330:	f10c 0203 	add.w	r2, ip, #3
 8009334:	1b52      	subs	r2, r2, r5
 8009336:	f022 0203 	bic.w	r2, r2, #3
 800933a:	3d03      	subs	r5, #3
 800933c:	45ac      	cmp	ip, r5
 800933e:	bf38      	it	cc
 8009340:	2200      	movcc	r2, #0
 8009342:	4413      	add	r3, r2
 8009344:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009348:	b17a      	cbz	r2, 800936a <__mdiff+0x106>
 800934a:	6107      	str	r7, [r0, #16]
 800934c:	e7a4      	b.n	8009298 <__mdiff+0x34>
 800934e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009352:	fa11 f288 	uxtah	r2, r1, r8
 8009356:	1414      	asrs	r4, r2, #16
 8009358:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800935c:	b292      	uxth	r2, r2
 800935e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009362:	f84e 2b04 	str.w	r2, [lr], #4
 8009366:	1421      	asrs	r1, r4, #16
 8009368:	e7e0      	b.n	800932c <__mdiff+0xc8>
 800936a:	3f01      	subs	r7, #1
 800936c:	e7ea      	b.n	8009344 <__mdiff+0xe0>
 800936e:	bf00      	nop
 8009370:	0800b085 	.word	0x0800b085
 8009374:	0800b096 	.word	0x0800b096

08009378 <__d2b>:
 8009378:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800937c:	460f      	mov	r7, r1
 800937e:	2101      	movs	r1, #1
 8009380:	ec59 8b10 	vmov	r8, r9, d0
 8009384:	4616      	mov	r6, r2
 8009386:	f7ff fcd5 	bl	8008d34 <_Balloc>
 800938a:	4604      	mov	r4, r0
 800938c:	b930      	cbnz	r0, 800939c <__d2b+0x24>
 800938e:	4602      	mov	r2, r0
 8009390:	4b24      	ldr	r3, [pc, #144]	; (8009424 <__d2b+0xac>)
 8009392:	4825      	ldr	r0, [pc, #148]	; (8009428 <__d2b+0xb0>)
 8009394:	f240 310f 	movw	r1, #783	; 0x30f
 8009398:	f000 fa86 	bl	80098a8 <__assert_func>
 800939c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80093a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80093a4:	bb2d      	cbnz	r5, 80093f2 <__d2b+0x7a>
 80093a6:	9301      	str	r3, [sp, #4]
 80093a8:	f1b8 0300 	subs.w	r3, r8, #0
 80093ac:	d026      	beq.n	80093fc <__d2b+0x84>
 80093ae:	4668      	mov	r0, sp
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	f7ff fd87 	bl	8008ec4 <__lo0bits>
 80093b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80093ba:	b1e8      	cbz	r0, 80093f8 <__d2b+0x80>
 80093bc:	f1c0 0320 	rsb	r3, r0, #32
 80093c0:	fa02 f303 	lsl.w	r3, r2, r3
 80093c4:	430b      	orrs	r3, r1
 80093c6:	40c2      	lsrs	r2, r0
 80093c8:	6163      	str	r3, [r4, #20]
 80093ca:	9201      	str	r2, [sp, #4]
 80093cc:	9b01      	ldr	r3, [sp, #4]
 80093ce:	61a3      	str	r3, [r4, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	bf14      	ite	ne
 80093d4:	2202      	movne	r2, #2
 80093d6:	2201      	moveq	r2, #1
 80093d8:	6122      	str	r2, [r4, #16]
 80093da:	b1bd      	cbz	r5, 800940c <__d2b+0x94>
 80093dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80093e0:	4405      	add	r5, r0
 80093e2:	603d      	str	r5, [r7, #0]
 80093e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80093e8:	6030      	str	r0, [r6, #0]
 80093ea:	4620      	mov	r0, r4
 80093ec:	b003      	add	sp, #12
 80093ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80093f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80093f6:	e7d6      	b.n	80093a6 <__d2b+0x2e>
 80093f8:	6161      	str	r1, [r4, #20]
 80093fa:	e7e7      	b.n	80093cc <__d2b+0x54>
 80093fc:	a801      	add	r0, sp, #4
 80093fe:	f7ff fd61 	bl	8008ec4 <__lo0bits>
 8009402:	9b01      	ldr	r3, [sp, #4]
 8009404:	6163      	str	r3, [r4, #20]
 8009406:	3020      	adds	r0, #32
 8009408:	2201      	movs	r2, #1
 800940a:	e7e5      	b.n	80093d8 <__d2b+0x60>
 800940c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009410:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009414:	6038      	str	r0, [r7, #0]
 8009416:	6918      	ldr	r0, [r3, #16]
 8009418:	f7ff fd34 	bl	8008e84 <__hi0bits>
 800941c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009420:	e7e2      	b.n	80093e8 <__d2b+0x70>
 8009422:	bf00      	nop
 8009424:	0800b085 	.word	0x0800b085
 8009428:	0800b096 	.word	0x0800b096

0800942c <__ssputs_r>:
 800942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009430:	688e      	ldr	r6, [r1, #8]
 8009432:	461f      	mov	r7, r3
 8009434:	42be      	cmp	r6, r7
 8009436:	680b      	ldr	r3, [r1, #0]
 8009438:	4682      	mov	sl, r0
 800943a:	460c      	mov	r4, r1
 800943c:	4690      	mov	r8, r2
 800943e:	d82c      	bhi.n	800949a <__ssputs_r+0x6e>
 8009440:	898a      	ldrh	r2, [r1, #12]
 8009442:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009446:	d026      	beq.n	8009496 <__ssputs_r+0x6a>
 8009448:	6965      	ldr	r5, [r4, #20]
 800944a:	6909      	ldr	r1, [r1, #16]
 800944c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009450:	eba3 0901 	sub.w	r9, r3, r1
 8009454:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009458:	1c7b      	adds	r3, r7, #1
 800945a:	444b      	add	r3, r9
 800945c:	106d      	asrs	r5, r5, #1
 800945e:	429d      	cmp	r5, r3
 8009460:	bf38      	it	cc
 8009462:	461d      	movcc	r5, r3
 8009464:	0553      	lsls	r3, r2, #21
 8009466:	d527      	bpl.n	80094b8 <__ssputs_r+0x8c>
 8009468:	4629      	mov	r1, r5
 800946a:	f7ff fbd7 	bl	8008c1c <_malloc_r>
 800946e:	4606      	mov	r6, r0
 8009470:	b360      	cbz	r0, 80094cc <__ssputs_r+0xa0>
 8009472:	6921      	ldr	r1, [r4, #16]
 8009474:	464a      	mov	r2, r9
 8009476:	f000 fa09 	bl	800988c <memcpy>
 800947a:	89a3      	ldrh	r3, [r4, #12]
 800947c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009484:	81a3      	strh	r3, [r4, #12]
 8009486:	6126      	str	r6, [r4, #16]
 8009488:	6165      	str	r5, [r4, #20]
 800948a:	444e      	add	r6, r9
 800948c:	eba5 0509 	sub.w	r5, r5, r9
 8009490:	6026      	str	r6, [r4, #0]
 8009492:	60a5      	str	r5, [r4, #8]
 8009494:	463e      	mov	r6, r7
 8009496:	42be      	cmp	r6, r7
 8009498:	d900      	bls.n	800949c <__ssputs_r+0x70>
 800949a:	463e      	mov	r6, r7
 800949c:	6820      	ldr	r0, [r4, #0]
 800949e:	4632      	mov	r2, r6
 80094a0:	4641      	mov	r1, r8
 80094a2:	f000 f9c9 	bl	8009838 <memmove>
 80094a6:	68a3      	ldr	r3, [r4, #8]
 80094a8:	1b9b      	subs	r3, r3, r6
 80094aa:	60a3      	str	r3, [r4, #8]
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	4433      	add	r3, r6
 80094b0:	6023      	str	r3, [r4, #0]
 80094b2:	2000      	movs	r0, #0
 80094b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b8:	462a      	mov	r2, r5
 80094ba:	f000 fa3b 	bl	8009934 <_realloc_r>
 80094be:	4606      	mov	r6, r0
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d1e0      	bne.n	8009486 <__ssputs_r+0x5a>
 80094c4:	6921      	ldr	r1, [r4, #16]
 80094c6:	4650      	mov	r0, sl
 80094c8:	f7ff fb34 	bl	8008b34 <_free_r>
 80094cc:	230c      	movs	r3, #12
 80094ce:	f8ca 3000 	str.w	r3, [sl]
 80094d2:	89a3      	ldrh	r3, [r4, #12]
 80094d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	f04f 30ff 	mov.w	r0, #4294967295
 80094de:	e7e9      	b.n	80094b4 <__ssputs_r+0x88>

080094e0 <_svfiprintf_r>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	4698      	mov	r8, r3
 80094e6:	898b      	ldrh	r3, [r1, #12]
 80094e8:	061b      	lsls	r3, r3, #24
 80094ea:	b09d      	sub	sp, #116	; 0x74
 80094ec:	4607      	mov	r7, r0
 80094ee:	460d      	mov	r5, r1
 80094f0:	4614      	mov	r4, r2
 80094f2:	d50e      	bpl.n	8009512 <_svfiprintf_r+0x32>
 80094f4:	690b      	ldr	r3, [r1, #16]
 80094f6:	b963      	cbnz	r3, 8009512 <_svfiprintf_r+0x32>
 80094f8:	2140      	movs	r1, #64	; 0x40
 80094fa:	f7ff fb8f 	bl	8008c1c <_malloc_r>
 80094fe:	6028      	str	r0, [r5, #0]
 8009500:	6128      	str	r0, [r5, #16]
 8009502:	b920      	cbnz	r0, 800950e <_svfiprintf_r+0x2e>
 8009504:	230c      	movs	r3, #12
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	f04f 30ff 	mov.w	r0, #4294967295
 800950c:	e0d0      	b.n	80096b0 <_svfiprintf_r+0x1d0>
 800950e:	2340      	movs	r3, #64	; 0x40
 8009510:	616b      	str	r3, [r5, #20]
 8009512:	2300      	movs	r3, #0
 8009514:	9309      	str	r3, [sp, #36]	; 0x24
 8009516:	2320      	movs	r3, #32
 8009518:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800951c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009520:	2330      	movs	r3, #48	; 0x30
 8009522:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80096c8 <_svfiprintf_r+0x1e8>
 8009526:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800952a:	f04f 0901 	mov.w	r9, #1
 800952e:	4623      	mov	r3, r4
 8009530:	469a      	mov	sl, r3
 8009532:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009536:	b10a      	cbz	r2, 800953c <_svfiprintf_r+0x5c>
 8009538:	2a25      	cmp	r2, #37	; 0x25
 800953a:	d1f9      	bne.n	8009530 <_svfiprintf_r+0x50>
 800953c:	ebba 0b04 	subs.w	fp, sl, r4
 8009540:	d00b      	beq.n	800955a <_svfiprintf_r+0x7a>
 8009542:	465b      	mov	r3, fp
 8009544:	4622      	mov	r2, r4
 8009546:	4629      	mov	r1, r5
 8009548:	4638      	mov	r0, r7
 800954a:	f7ff ff6f 	bl	800942c <__ssputs_r>
 800954e:	3001      	adds	r0, #1
 8009550:	f000 80a9 	beq.w	80096a6 <_svfiprintf_r+0x1c6>
 8009554:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009556:	445a      	add	r2, fp
 8009558:	9209      	str	r2, [sp, #36]	; 0x24
 800955a:	f89a 3000 	ldrb.w	r3, [sl]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 80a1 	beq.w	80096a6 <_svfiprintf_r+0x1c6>
 8009564:	2300      	movs	r3, #0
 8009566:	f04f 32ff 	mov.w	r2, #4294967295
 800956a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800956e:	f10a 0a01 	add.w	sl, sl, #1
 8009572:	9304      	str	r3, [sp, #16]
 8009574:	9307      	str	r3, [sp, #28]
 8009576:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800957a:	931a      	str	r3, [sp, #104]	; 0x68
 800957c:	4654      	mov	r4, sl
 800957e:	2205      	movs	r2, #5
 8009580:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009584:	4850      	ldr	r0, [pc, #320]	; (80096c8 <_svfiprintf_r+0x1e8>)
 8009586:	f7f6 fe2b 	bl	80001e0 <memchr>
 800958a:	9a04      	ldr	r2, [sp, #16]
 800958c:	b9d8      	cbnz	r0, 80095c6 <_svfiprintf_r+0xe6>
 800958e:	06d0      	lsls	r0, r2, #27
 8009590:	bf44      	itt	mi
 8009592:	2320      	movmi	r3, #32
 8009594:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009598:	0711      	lsls	r1, r2, #28
 800959a:	bf44      	itt	mi
 800959c:	232b      	movmi	r3, #43	; 0x2b
 800959e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095a2:	f89a 3000 	ldrb.w	r3, [sl]
 80095a6:	2b2a      	cmp	r3, #42	; 0x2a
 80095a8:	d015      	beq.n	80095d6 <_svfiprintf_r+0xf6>
 80095aa:	9a07      	ldr	r2, [sp, #28]
 80095ac:	4654      	mov	r4, sl
 80095ae:	2000      	movs	r0, #0
 80095b0:	f04f 0c0a 	mov.w	ip, #10
 80095b4:	4621      	mov	r1, r4
 80095b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095ba:	3b30      	subs	r3, #48	; 0x30
 80095bc:	2b09      	cmp	r3, #9
 80095be:	d94d      	bls.n	800965c <_svfiprintf_r+0x17c>
 80095c0:	b1b0      	cbz	r0, 80095f0 <_svfiprintf_r+0x110>
 80095c2:	9207      	str	r2, [sp, #28]
 80095c4:	e014      	b.n	80095f0 <_svfiprintf_r+0x110>
 80095c6:	eba0 0308 	sub.w	r3, r0, r8
 80095ca:	fa09 f303 	lsl.w	r3, r9, r3
 80095ce:	4313      	orrs	r3, r2
 80095d0:	9304      	str	r3, [sp, #16]
 80095d2:	46a2      	mov	sl, r4
 80095d4:	e7d2      	b.n	800957c <_svfiprintf_r+0x9c>
 80095d6:	9b03      	ldr	r3, [sp, #12]
 80095d8:	1d19      	adds	r1, r3, #4
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	9103      	str	r1, [sp, #12]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	bfbb      	ittet	lt
 80095e2:	425b      	neglt	r3, r3
 80095e4:	f042 0202 	orrlt.w	r2, r2, #2
 80095e8:	9307      	strge	r3, [sp, #28]
 80095ea:	9307      	strlt	r3, [sp, #28]
 80095ec:	bfb8      	it	lt
 80095ee:	9204      	strlt	r2, [sp, #16]
 80095f0:	7823      	ldrb	r3, [r4, #0]
 80095f2:	2b2e      	cmp	r3, #46	; 0x2e
 80095f4:	d10c      	bne.n	8009610 <_svfiprintf_r+0x130>
 80095f6:	7863      	ldrb	r3, [r4, #1]
 80095f8:	2b2a      	cmp	r3, #42	; 0x2a
 80095fa:	d134      	bne.n	8009666 <_svfiprintf_r+0x186>
 80095fc:	9b03      	ldr	r3, [sp, #12]
 80095fe:	1d1a      	adds	r2, r3, #4
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	9203      	str	r2, [sp, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	bfb8      	it	lt
 8009608:	f04f 33ff 	movlt.w	r3, #4294967295
 800960c:	3402      	adds	r4, #2
 800960e:	9305      	str	r3, [sp, #20]
 8009610:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80096d8 <_svfiprintf_r+0x1f8>
 8009614:	7821      	ldrb	r1, [r4, #0]
 8009616:	2203      	movs	r2, #3
 8009618:	4650      	mov	r0, sl
 800961a:	f7f6 fde1 	bl	80001e0 <memchr>
 800961e:	b138      	cbz	r0, 8009630 <_svfiprintf_r+0x150>
 8009620:	9b04      	ldr	r3, [sp, #16]
 8009622:	eba0 000a 	sub.w	r0, r0, sl
 8009626:	2240      	movs	r2, #64	; 0x40
 8009628:	4082      	lsls	r2, r0
 800962a:	4313      	orrs	r3, r2
 800962c:	3401      	adds	r4, #1
 800962e:	9304      	str	r3, [sp, #16]
 8009630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009634:	4825      	ldr	r0, [pc, #148]	; (80096cc <_svfiprintf_r+0x1ec>)
 8009636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800963a:	2206      	movs	r2, #6
 800963c:	f7f6 fdd0 	bl	80001e0 <memchr>
 8009640:	2800      	cmp	r0, #0
 8009642:	d038      	beq.n	80096b6 <_svfiprintf_r+0x1d6>
 8009644:	4b22      	ldr	r3, [pc, #136]	; (80096d0 <_svfiprintf_r+0x1f0>)
 8009646:	bb1b      	cbnz	r3, 8009690 <_svfiprintf_r+0x1b0>
 8009648:	9b03      	ldr	r3, [sp, #12]
 800964a:	3307      	adds	r3, #7
 800964c:	f023 0307 	bic.w	r3, r3, #7
 8009650:	3308      	adds	r3, #8
 8009652:	9303      	str	r3, [sp, #12]
 8009654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009656:	4433      	add	r3, r6
 8009658:	9309      	str	r3, [sp, #36]	; 0x24
 800965a:	e768      	b.n	800952e <_svfiprintf_r+0x4e>
 800965c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009660:	460c      	mov	r4, r1
 8009662:	2001      	movs	r0, #1
 8009664:	e7a6      	b.n	80095b4 <_svfiprintf_r+0xd4>
 8009666:	2300      	movs	r3, #0
 8009668:	3401      	adds	r4, #1
 800966a:	9305      	str	r3, [sp, #20]
 800966c:	4619      	mov	r1, r3
 800966e:	f04f 0c0a 	mov.w	ip, #10
 8009672:	4620      	mov	r0, r4
 8009674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009678:	3a30      	subs	r2, #48	; 0x30
 800967a:	2a09      	cmp	r2, #9
 800967c:	d903      	bls.n	8009686 <_svfiprintf_r+0x1a6>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0c6      	beq.n	8009610 <_svfiprintf_r+0x130>
 8009682:	9105      	str	r1, [sp, #20]
 8009684:	e7c4      	b.n	8009610 <_svfiprintf_r+0x130>
 8009686:	fb0c 2101 	mla	r1, ip, r1, r2
 800968a:	4604      	mov	r4, r0
 800968c:	2301      	movs	r3, #1
 800968e:	e7f0      	b.n	8009672 <_svfiprintf_r+0x192>
 8009690:	ab03      	add	r3, sp, #12
 8009692:	9300      	str	r3, [sp, #0]
 8009694:	462a      	mov	r2, r5
 8009696:	4b0f      	ldr	r3, [pc, #60]	; (80096d4 <_svfiprintf_r+0x1f4>)
 8009698:	a904      	add	r1, sp, #16
 800969a:	4638      	mov	r0, r7
 800969c:	f7fd fe2c 	bl	80072f8 <_printf_float>
 80096a0:	1c42      	adds	r2, r0, #1
 80096a2:	4606      	mov	r6, r0
 80096a4:	d1d6      	bne.n	8009654 <_svfiprintf_r+0x174>
 80096a6:	89ab      	ldrh	r3, [r5, #12]
 80096a8:	065b      	lsls	r3, r3, #25
 80096aa:	f53f af2d 	bmi.w	8009508 <_svfiprintf_r+0x28>
 80096ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096b0:	b01d      	add	sp, #116	; 0x74
 80096b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096b6:	ab03      	add	r3, sp, #12
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	462a      	mov	r2, r5
 80096bc:	4b05      	ldr	r3, [pc, #20]	; (80096d4 <_svfiprintf_r+0x1f4>)
 80096be:	a904      	add	r1, sp, #16
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7fe f8bd 	bl	8007840 <_printf_i>
 80096c6:	e7eb      	b.n	80096a0 <_svfiprintf_r+0x1c0>
 80096c8:	0800b1ec 	.word	0x0800b1ec
 80096cc:	0800b1f6 	.word	0x0800b1f6
 80096d0:	080072f9 	.word	0x080072f9
 80096d4:	0800942d 	.word	0x0800942d
 80096d8:	0800b1f2 	.word	0x0800b1f2

080096dc <__sflush_r>:
 80096dc:	898a      	ldrh	r2, [r1, #12]
 80096de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e2:	4605      	mov	r5, r0
 80096e4:	0710      	lsls	r0, r2, #28
 80096e6:	460c      	mov	r4, r1
 80096e8:	d458      	bmi.n	800979c <__sflush_r+0xc0>
 80096ea:	684b      	ldr	r3, [r1, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dc05      	bgt.n	80096fc <__sflush_r+0x20>
 80096f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	dc02      	bgt.n	80096fc <__sflush_r+0x20>
 80096f6:	2000      	movs	r0, #0
 80096f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096fe:	2e00      	cmp	r6, #0
 8009700:	d0f9      	beq.n	80096f6 <__sflush_r+0x1a>
 8009702:	2300      	movs	r3, #0
 8009704:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009708:	682f      	ldr	r7, [r5, #0]
 800970a:	6a21      	ldr	r1, [r4, #32]
 800970c:	602b      	str	r3, [r5, #0]
 800970e:	d032      	beq.n	8009776 <__sflush_r+0x9a>
 8009710:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009712:	89a3      	ldrh	r3, [r4, #12]
 8009714:	075a      	lsls	r2, r3, #29
 8009716:	d505      	bpl.n	8009724 <__sflush_r+0x48>
 8009718:	6863      	ldr	r3, [r4, #4]
 800971a:	1ac0      	subs	r0, r0, r3
 800971c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800971e:	b10b      	cbz	r3, 8009724 <__sflush_r+0x48>
 8009720:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009722:	1ac0      	subs	r0, r0, r3
 8009724:	2300      	movs	r3, #0
 8009726:	4602      	mov	r2, r0
 8009728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800972a:	6a21      	ldr	r1, [r4, #32]
 800972c:	4628      	mov	r0, r5
 800972e:	47b0      	blx	r6
 8009730:	1c43      	adds	r3, r0, #1
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	d106      	bne.n	8009744 <__sflush_r+0x68>
 8009736:	6829      	ldr	r1, [r5, #0]
 8009738:	291d      	cmp	r1, #29
 800973a:	d82b      	bhi.n	8009794 <__sflush_r+0xb8>
 800973c:	4a29      	ldr	r2, [pc, #164]	; (80097e4 <__sflush_r+0x108>)
 800973e:	410a      	asrs	r2, r1
 8009740:	07d6      	lsls	r6, r2, #31
 8009742:	d427      	bmi.n	8009794 <__sflush_r+0xb8>
 8009744:	2200      	movs	r2, #0
 8009746:	6062      	str	r2, [r4, #4]
 8009748:	04d9      	lsls	r1, r3, #19
 800974a:	6922      	ldr	r2, [r4, #16]
 800974c:	6022      	str	r2, [r4, #0]
 800974e:	d504      	bpl.n	800975a <__sflush_r+0x7e>
 8009750:	1c42      	adds	r2, r0, #1
 8009752:	d101      	bne.n	8009758 <__sflush_r+0x7c>
 8009754:	682b      	ldr	r3, [r5, #0]
 8009756:	b903      	cbnz	r3, 800975a <__sflush_r+0x7e>
 8009758:	6560      	str	r0, [r4, #84]	; 0x54
 800975a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800975c:	602f      	str	r7, [r5, #0]
 800975e:	2900      	cmp	r1, #0
 8009760:	d0c9      	beq.n	80096f6 <__sflush_r+0x1a>
 8009762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009766:	4299      	cmp	r1, r3
 8009768:	d002      	beq.n	8009770 <__sflush_r+0x94>
 800976a:	4628      	mov	r0, r5
 800976c:	f7ff f9e2 	bl	8008b34 <_free_r>
 8009770:	2000      	movs	r0, #0
 8009772:	6360      	str	r0, [r4, #52]	; 0x34
 8009774:	e7c0      	b.n	80096f8 <__sflush_r+0x1c>
 8009776:	2301      	movs	r3, #1
 8009778:	4628      	mov	r0, r5
 800977a:	47b0      	blx	r6
 800977c:	1c41      	adds	r1, r0, #1
 800977e:	d1c8      	bne.n	8009712 <__sflush_r+0x36>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d0c5      	beq.n	8009712 <__sflush_r+0x36>
 8009786:	2b1d      	cmp	r3, #29
 8009788:	d001      	beq.n	800978e <__sflush_r+0xb2>
 800978a:	2b16      	cmp	r3, #22
 800978c:	d101      	bne.n	8009792 <__sflush_r+0xb6>
 800978e:	602f      	str	r7, [r5, #0]
 8009790:	e7b1      	b.n	80096f6 <__sflush_r+0x1a>
 8009792:	89a3      	ldrh	r3, [r4, #12]
 8009794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009798:	81a3      	strh	r3, [r4, #12]
 800979a:	e7ad      	b.n	80096f8 <__sflush_r+0x1c>
 800979c:	690f      	ldr	r7, [r1, #16]
 800979e:	2f00      	cmp	r7, #0
 80097a0:	d0a9      	beq.n	80096f6 <__sflush_r+0x1a>
 80097a2:	0793      	lsls	r3, r2, #30
 80097a4:	680e      	ldr	r6, [r1, #0]
 80097a6:	bf08      	it	eq
 80097a8:	694b      	ldreq	r3, [r1, #20]
 80097aa:	600f      	str	r7, [r1, #0]
 80097ac:	bf18      	it	ne
 80097ae:	2300      	movne	r3, #0
 80097b0:	eba6 0807 	sub.w	r8, r6, r7
 80097b4:	608b      	str	r3, [r1, #8]
 80097b6:	f1b8 0f00 	cmp.w	r8, #0
 80097ba:	dd9c      	ble.n	80096f6 <__sflush_r+0x1a>
 80097bc:	6a21      	ldr	r1, [r4, #32]
 80097be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80097c0:	4643      	mov	r3, r8
 80097c2:	463a      	mov	r2, r7
 80097c4:	4628      	mov	r0, r5
 80097c6:	47b0      	blx	r6
 80097c8:	2800      	cmp	r0, #0
 80097ca:	dc06      	bgt.n	80097da <__sflush_r+0xfe>
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80097d2:	81a3      	strh	r3, [r4, #12]
 80097d4:	f04f 30ff 	mov.w	r0, #4294967295
 80097d8:	e78e      	b.n	80096f8 <__sflush_r+0x1c>
 80097da:	4407      	add	r7, r0
 80097dc:	eba8 0800 	sub.w	r8, r8, r0
 80097e0:	e7e9      	b.n	80097b6 <__sflush_r+0xda>
 80097e2:	bf00      	nop
 80097e4:	dfbffffe 	.word	0xdfbffffe

080097e8 <_fflush_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	690b      	ldr	r3, [r1, #16]
 80097ec:	4605      	mov	r5, r0
 80097ee:	460c      	mov	r4, r1
 80097f0:	b913      	cbnz	r3, 80097f8 <_fflush_r+0x10>
 80097f2:	2500      	movs	r5, #0
 80097f4:	4628      	mov	r0, r5
 80097f6:	bd38      	pop	{r3, r4, r5, pc}
 80097f8:	b118      	cbz	r0, 8009802 <_fflush_r+0x1a>
 80097fa:	6a03      	ldr	r3, [r0, #32]
 80097fc:	b90b      	cbnz	r3, 8009802 <_fflush_r+0x1a>
 80097fe:	f7fe f9cd 	bl	8007b9c <__sinit>
 8009802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d0f3      	beq.n	80097f2 <_fflush_r+0xa>
 800980a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800980c:	07d0      	lsls	r0, r2, #31
 800980e:	d404      	bmi.n	800981a <_fflush_r+0x32>
 8009810:	0599      	lsls	r1, r3, #22
 8009812:	d402      	bmi.n	800981a <_fflush_r+0x32>
 8009814:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009816:	f7fe fb10 	bl	8007e3a <__retarget_lock_acquire_recursive>
 800981a:	4628      	mov	r0, r5
 800981c:	4621      	mov	r1, r4
 800981e:	f7ff ff5d 	bl	80096dc <__sflush_r>
 8009822:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009824:	07da      	lsls	r2, r3, #31
 8009826:	4605      	mov	r5, r0
 8009828:	d4e4      	bmi.n	80097f4 <_fflush_r+0xc>
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	059b      	lsls	r3, r3, #22
 800982e:	d4e1      	bmi.n	80097f4 <_fflush_r+0xc>
 8009830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009832:	f7fe fb03 	bl	8007e3c <__retarget_lock_release_recursive>
 8009836:	e7dd      	b.n	80097f4 <_fflush_r+0xc>

08009838 <memmove>:
 8009838:	4288      	cmp	r0, r1
 800983a:	b510      	push	{r4, lr}
 800983c:	eb01 0402 	add.w	r4, r1, r2
 8009840:	d902      	bls.n	8009848 <memmove+0x10>
 8009842:	4284      	cmp	r4, r0
 8009844:	4623      	mov	r3, r4
 8009846:	d807      	bhi.n	8009858 <memmove+0x20>
 8009848:	1e43      	subs	r3, r0, #1
 800984a:	42a1      	cmp	r1, r4
 800984c:	d008      	beq.n	8009860 <memmove+0x28>
 800984e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009852:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009856:	e7f8      	b.n	800984a <memmove+0x12>
 8009858:	4402      	add	r2, r0
 800985a:	4601      	mov	r1, r0
 800985c:	428a      	cmp	r2, r1
 800985e:	d100      	bne.n	8009862 <memmove+0x2a>
 8009860:	bd10      	pop	{r4, pc}
 8009862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800986a:	e7f7      	b.n	800985c <memmove+0x24>

0800986c <_sbrk_r>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4d06      	ldr	r5, [pc, #24]	; (8009888 <_sbrk_r+0x1c>)
 8009870:	2300      	movs	r3, #0
 8009872:	4604      	mov	r4, r0
 8009874:	4608      	mov	r0, r1
 8009876:	602b      	str	r3, [r5, #0]
 8009878:	f7f9 f960 	bl	8002b3c <_sbrk>
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	d102      	bne.n	8009886 <_sbrk_r+0x1a>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	b103      	cbz	r3, 8009886 <_sbrk_r+0x1a>
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	20000c0c 	.word	0x20000c0c

0800988c <memcpy>:
 800988c:	440a      	add	r2, r1
 800988e:	4291      	cmp	r1, r2
 8009890:	f100 33ff 	add.w	r3, r0, #4294967295
 8009894:	d100      	bne.n	8009898 <memcpy+0xc>
 8009896:	4770      	bx	lr
 8009898:	b510      	push	{r4, lr}
 800989a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800989e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098a2:	4291      	cmp	r1, r2
 80098a4:	d1f9      	bne.n	800989a <memcpy+0xe>
 80098a6:	bd10      	pop	{r4, pc}

080098a8 <__assert_func>:
 80098a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098aa:	4614      	mov	r4, r2
 80098ac:	461a      	mov	r2, r3
 80098ae:	4b09      	ldr	r3, [pc, #36]	; (80098d4 <__assert_func+0x2c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4605      	mov	r5, r0
 80098b4:	68d8      	ldr	r0, [r3, #12]
 80098b6:	b14c      	cbz	r4, 80098cc <__assert_func+0x24>
 80098b8:	4b07      	ldr	r3, [pc, #28]	; (80098d8 <__assert_func+0x30>)
 80098ba:	9100      	str	r1, [sp, #0]
 80098bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098c0:	4906      	ldr	r1, [pc, #24]	; (80098dc <__assert_func+0x34>)
 80098c2:	462b      	mov	r3, r5
 80098c4:	f000 f872 	bl	80099ac <fiprintf>
 80098c8:	f000 f882 	bl	80099d0 <abort>
 80098cc:	4b04      	ldr	r3, [pc, #16]	; (80098e0 <__assert_func+0x38>)
 80098ce:	461c      	mov	r4, r3
 80098d0:	e7f3      	b.n	80098ba <__assert_func+0x12>
 80098d2:	bf00      	nop
 80098d4:	200000dc 	.word	0x200000dc
 80098d8:	0800b207 	.word	0x0800b207
 80098dc:	0800b214 	.word	0x0800b214
 80098e0:	0800b242 	.word	0x0800b242

080098e4 <_calloc_r>:
 80098e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098e6:	fba1 2402 	umull	r2, r4, r1, r2
 80098ea:	b94c      	cbnz	r4, 8009900 <_calloc_r+0x1c>
 80098ec:	4611      	mov	r1, r2
 80098ee:	9201      	str	r2, [sp, #4]
 80098f0:	f7ff f994 	bl	8008c1c <_malloc_r>
 80098f4:	9a01      	ldr	r2, [sp, #4]
 80098f6:	4605      	mov	r5, r0
 80098f8:	b930      	cbnz	r0, 8009908 <_calloc_r+0x24>
 80098fa:	4628      	mov	r0, r5
 80098fc:	b003      	add	sp, #12
 80098fe:	bd30      	pop	{r4, r5, pc}
 8009900:	220c      	movs	r2, #12
 8009902:	6002      	str	r2, [r0, #0]
 8009904:	2500      	movs	r5, #0
 8009906:	e7f8      	b.n	80098fa <_calloc_r+0x16>
 8009908:	4621      	mov	r1, r4
 800990a:	f7fe fa19 	bl	8007d40 <memset>
 800990e:	e7f4      	b.n	80098fa <_calloc_r+0x16>

08009910 <__ascii_mbtowc>:
 8009910:	b082      	sub	sp, #8
 8009912:	b901      	cbnz	r1, 8009916 <__ascii_mbtowc+0x6>
 8009914:	a901      	add	r1, sp, #4
 8009916:	b142      	cbz	r2, 800992a <__ascii_mbtowc+0x1a>
 8009918:	b14b      	cbz	r3, 800992e <__ascii_mbtowc+0x1e>
 800991a:	7813      	ldrb	r3, [r2, #0]
 800991c:	600b      	str	r3, [r1, #0]
 800991e:	7812      	ldrb	r2, [r2, #0]
 8009920:	1e10      	subs	r0, r2, #0
 8009922:	bf18      	it	ne
 8009924:	2001      	movne	r0, #1
 8009926:	b002      	add	sp, #8
 8009928:	4770      	bx	lr
 800992a:	4610      	mov	r0, r2
 800992c:	e7fb      	b.n	8009926 <__ascii_mbtowc+0x16>
 800992e:	f06f 0001 	mvn.w	r0, #1
 8009932:	e7f8      	b.n	8009926 <__ascii_mbtowc+0x16>

08009934 <_realloc_r>:
 8009934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009938:	4680      	mov	r8, r0
 800993a:	4614      	mov	r4, r2
 800993c:	460e      	mov	r6, r1
 800993e:	b921      	cbnz	r1, 800994a <_realloc_r+0x16>
 8009940:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009944:	4611      	mov	r1, r2
 8009946:	f7ff b969 	b.w	8008c1c <_malloc_r>
 800994a:	b92a      	cbnz	r2, 8009958 <_realloc_r+0x24>
 800994c:	f7ff f8f2 	bl	8008b34 <_free_r>
 8009950:	4625      	mov	r5, r4
 8009952:	4628      	mov	r0, r5
 8009954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009958:	f000 f841 	bl	80099de <_malloc_usable_size_r>
 800995c:	4284      	cmp	r4, r0
 800995e:	4607      	mov	r7, r0
 8009960:	d802      	bhi.n	8009968 <_realloc_r+0x34>
 8009962:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009966:	d812      	bhi.n	800998e <_realloc_r+0x5a>
 8009968:	4621      	mov	r1, r4
 800996a:	4640      	mov	r0, r8
 800996c:	f7ff f956 	bl	8008c1c <_malloc_r>
 8009970:	4605      	mov	r5, r0
 8009972:	2800      	cmp	r0, #0
 8009974:	d0ed      	beq.n	8009952 <_realloc_r+0x1e>
 8009976:	42bc      	cmp	r4, r7
 8009978:	4622      	mov	r2, r4
 800997a:	4631      	mov	r1, r6
 800997c:	bf28      	it	cs
 800997e:	463a      	movcs	r2, r7
 8009980:	f7ff ff84 	bl	800988c <memcpy>
 8009984:	4631      	mov	r1, r6
 8009986:	4640      	mov	r0, r8
 8009988:	f7ff f8d4 	bl	8008b34 <_free_r>
 800998c:	e7e1      	b.n	8009952 <_realloc_r+0x1e>
 800998e:	4635      	mov	r5, r6
 8009990:	e7df      	b.n	8009952 <_realloc_r+0x1e>

08009992 <__ascii_wctomb>:
 8009992:	b149      	cbz	r1, 80099a8 <__ascii_wctomb+0x16>
 8009994:	2aff      	cmp	r2, #255	; 0xff
 8009996:	bf85      	ittet	hi
 8009998:	238a      	movhi	r3, #138	; 0x8a
 800999a:	6003      	strhi	r3, [r0, #0]
 800999c:	700a      	strbls	r2, [r1, #0]
 800999e:	f04f 30ff 	movhi.w	r0, #4294967295
 80099a2:	bf98      	it	ls
 80099a4:	2001      	movls	r0, #1
 80099a6:	4770      	bx	lr
 80099a8:	4608      	mov	r0, r1
 80099aa:	4770      	bx	lr

080099ac <fiprintf>:
 80099ac:	b40e      	push	{r1, r2, r3}
 80099ae:	b503      	push	{r0, r1, lr}
 80099b0:	4601      	mov	r1, r0
 80099b2:	ab03      	add	r3, sp, #12
 80099b4:	4805      	ldr	r0, [pc, #20]	; (80099cc <fiprintf+0x20>)
 80099b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80099ba:	6800      	ldr	r0, [r0, #0]
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	f000 f83f 	bl	8009a40 <_vfiprintf_r>
 80099c2:	b002      	add	sp, #8
 80099c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80099c8:	b003      	add	sp, #12
 80099ca:	4770      	bx	lr
 80099cc:	200000dc 	.word	0x200000dc

080099d0 <abort>:
 80099d0:	b508      	push	{r3, lr}
 80099d2:	2006      	movs	r0, #6
 80099d4:	f000 fa0c 	bl	8009df0 <raise>
 80099d8:	2001      	movs	r0, #1
 80099da:	f7f9 f837 	bl	8002a4c <_exit>

080099de <_malloc_usable_size_r>:
 80099de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099e2:	1f18      	subs	r0, r3, #4
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	bfbc      	itt	lt
 80099e8:	580b      	ldrlt	r3, [r1, r0]
 80099ea:	18c0      	addlt	r0, r0, r3
 80099ec:	4770      	bx	lr

080099ee <__sfputc_r>:
 80099ee:	6893      	ldr	r3, [r2, #8]
 80099f0:	3b01      	subs	r3, #1
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	b410      	push	{r4}
 80099f6:	6093      	str	r3, [r2, #8]
 80099f8:	da08      	bge.n	8009a0c <__sfputc_r+0x1e>
 80099fa:	6994      	ldr	r4, [r2, #24]
 80099fc:	42a3      	cmp	r3, r4
 80099fe:	db01      	blt.n	8009a04 <__sfputc_r+0x16>
 8009a00:	290a      	cmp	r1, #10
 8009a02:	d103      	bne.n	8009a0c <__sfputc_r+0x1e>
 8009a04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a08:	f000 b934 	b.w	8009c74 <__swbuf_r>
 8009a0c:	6813      	ldr	r3, [r2, #0]
 8009a0e:	1c58      	adds	r0, r3, #1
 8009a10:	6010      	str	r0, [r2, #0]
 8009a12:	7019      	strb	r1, [r3, #0]
 8009a14:	4608      	mov	r0, r1
 8009a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <__sfputs_r>:
 8009a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a1e:	4606      	mov	r6, r0
 8009a20:	460f      	mov	r7, r1
 8009a22:	4614      	mov	r4, r2
 8009a24:	18d5      	adds	r5, r2, r3
 8009a26:	42ac      	cmp	r4, r5
 8009a28:	d101      	bne.n	8009a2e <__sfputs_r+0x12>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e007      	b.n	8009a3e <__sfputs_r+0x22>
 8009a2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a32:	463a      	mov	r2, r7
 8009a34:	4630      	mov	r0, r6
 8009a36:	f7ff ffda 	bl	80099ee <__sfputc_r>
 8009a3a:	1c43      	adds	r3, r0, #1
 8009a3c:	d1f3      	bne.n	8009a26 <__sfputs_r+0xa>
 8009a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009a40 <_vfiprintf_r>:
 8009a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a44:	460d      	mov	r5, r1
 8009a46:	b09d      	sub	sp, #116	; 0x74
 8009a48:	4614      	mov	r4, r2
 8009a4a:	4698      	mov	r8, r3
 8009a4c:	4606      	mov	r6, r0
 8009a4e:	b118      	cbz	r0, 8009a58 <_vfiprintf_r+0x18>
 8009a50:	6a03      	ldr	r3, [r0, #32]
 8009a52:	b90b      	cbnz	r3, 8009a58 <_vfiprintf_r+0x18>
 8009a54:	f7fe f8a2 	bl	8007b9c <__sinit>
 8009a58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a5a:	07d9      	lsls	r1, r3, #31
 8009a5c:	d405      	bmi.n	8009a6a <_vfiprintf_r+0x2a>
 8009a5e:	89ab      	ldrh	r3, [r5, #12]
 8009a60:	059a      	lsls	r2, r3, #22
 8009a62:	d402      	bmi.n	8009a6a <_vfiprintf_r+0x2a>
 8009a64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a66:	f7fe f9e8 	bl	8007e3a <__retarget_lock_acquire_recursive>
 8009a6a:	89ab      	ldrh	r3, [r5, #12]
 8009a6c:	071b      	lsls	r3, r3, #28
 8009a6e:	d501      	bpl.n	8009a74 <_vfiprintf_r+0x34>
 8009a70:	692b      	ldr	r3, [r5, #16]
 8009a72:	b99b      	cbnz	r3, 8009a9c <_vfiprintf_r+0x5c>
 8009a74:	4629      	mov	r1, r5
 8009a76:	4630      	mov	r0, r6
 8009a78:	f000 f93a 	bl	8009cf0 <__swsetup_r>
 8009a7c:	b170      	cbz	r0, 8009a9c <_vfiprintf_r+0x5c>
 8009a7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a80:	07dc      	lsls	r4, r3, #31
 8009a82:	d504      	bpl.n	8009a8e <_vfiprintf_r+0x4e>
 8009a84:	f04f 30ff 	mov.w	r0, #4294967295
 8009a88:	b01d      	add	sp, #116	; 0x74
 8009a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	0598      	lsls	r0, r3, #22
 8009a92:	d4f7      	bmi.n	8009a84 <_vfiprintf_r+0x44>
 8009a94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a96:	f7fe f9d1 	bl	8007e3c <__retarget_lock_release_recursive>
 8009a9a:	e7f3      	b.n	8009a84 <_vfiprintf_r+0x44>
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa0:	2320      	movs	r3, #32
 8009aa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009aa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aaa:	2330      	movs	r3, #48	; 0x30
 8009aac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009c60 <_vfiprintf_r+0x220>
 8009ab0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ab4:	f04f 0901 	mov.w	r9, #1
 8009ab8:	4623      	mov	r3, r4
 8009aba:	469a      	mov	sl, r3
 8009abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac0:	b10a      	cbz	r2, 8009ac6 <_vfiprintf_r+0x86>
 8009ac2:	2a25      	cmp	r2, #37	; 0x25
 8009ac4:	d1f9      	bne.n	8009aba <_vfiprintf_r+0x7a>
 8009ac6:	ebba 0b04 	subs.w	fp, sl, r4
 8009aca:	d00b      	beq.n	8009ae4 <_vfiprintf_r+0xa4>
 8009acc:	465b      	mov	r3, fp
 8009ace:	4622      	mov	r2, r4
 8009ad0:	4629      	mov	r1, r5
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	f7ff ffa2 	bl	8009a1c <__sfputs_r>
 8009ad8:	3001      	adds	r0, #1
 8009ada:	f000 80a9 	beq.w	8009c30 <_vfiprintf_r+0x1f0>
 8009ade:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae0:	445a      	add	r2, fp
 8009ae2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 80a1 	beq.w	8009c30 <_vfiprintf_r+0x1f0>
 8009aee:	2300      	movs	r3, #0
 8009af0:	f04f 32ff 	mov.w	r2, #4294967295
 8009af4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009af8:	f10a 0a01 	add.w	sl, sl, #1
 8009afc:	9304      	str	r3, [sp, #16]
 8009afe:	9307      	str	r3, [sp, #28]
 8009b00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b04:	931a      	str	r3, [sp, #104]	; 0x68
 8009b06:	4654      	mov	r4, sl
 8009b08:	2205      	movs	r2, #5
 8009b0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b0e:	4854      	ldr	r0, [pc, #336]	; (8009c60 <_vfiprintf_r+0x220>)
 8009b10:	f7f6 fb66 	bl	80001e0 <memchr>
 8009b14:	9a04      	ldr	r2, [sp, #16]
 8009b16:	b9d8      	cbnz	r0, 8009b50 <_vfiprintf_r+0x110>
 8009b18:	06d1      	lsls	r1, r2, #27
 8009b1a:	bf44      	itt	mi
 8009b1c:	2320      	movmi	r3, #32
 8009b1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b22:	0713      	lsls	r3, r2, #28
 8009b24:	bf44      	itt	mi
 8009b26:	232b      	movmi	r3, #43	; 0x2b
 8009b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b30:	2b2a      	cmp	r3, #42	; 0x2a
 8009b32:	d015      	beq.n	8009b60 <_vfiprintf_r+0x120>
 8009b34:	9a07      	ldr	r2, [sp, #28]
 8009b36:	4654      	mov	r4, sl
 8009b38:	2000      	movs	r0, #0
 8009b3a:	f04f 0c0a 	mov.w	ip, #10
 8009b3e:	4621      	mov	r1, r4
 8009b40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b44:	3b30      	subs	r3, #48	; 0x30
 8009b46:	2b09      	cmp	r3, #9
 8009b48:	d94d      	bls.n	8009be6 <_vfiprintf_r+0x1a6>
 8009b4a:	b1b0      	cbz	r0, 8009b7a <_vfiprintf_r+0x13a>
 8009b4c:	9207      	str	r2, [sp, #28]
 8009b4e:	e014      	b.n	8009b7a <_vfiprintf_r+0x13a>
 8009b50:	eba0 0308 	sub.w	r3, r0, r8
 8009b54:	fa09 f303 	lsl.w	r3, r9, r3
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	9304      	str	r3, [sp, #16]
 8009b5c:	46a2      	mov	sl, r4
 8009b5e:	e7d2      	b.n	8009b06 <_vfiprintf_r+0xc6>
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	1d19      	adds	r1, r3, #4
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	9103      	str	r1, [sp, #12]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	bfbb      	ittet	lt
 8009b6c:	425b      	neglt	r3, r3
 8009b6e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b72:	9307      	strge	r3, [sp, #28]
 8009b74:	9307      	strlt	r3, [sp, #28]
 8009b76:	bfb8      	it	lt
 8009b78:	9204      	strlt	r2, [sp, #16]
 8009b7a:	7823      	ldrb	r3, [r4, #0]
 8009b7c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b7e:	d10c      	bne.n	8009b9a <_vfiprintf_r+0x15a>
 8009b80:	7863      	ldrb	r3, [r4, #1]
 8009b82:	2b2a      	cmp	r3, #42	; 0x2a
 8009b84:	d134      	bne.n	8009bf0 <_vfiprintf_r+0x1b0>
 8009b86:	9b03      	ldr	r3, [sp, #12]
 8009b88:	1d1a      	adds	r2, r3, #4
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	9203      	str	r2, [sp, #12]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	bfb8      	it	lt
 8009b92:	f04f 33ff 	movlt.w	r3, #4294967295
 8009b96:	3402      	adds	r4, #2
 8009b98:	9305      	str	r3, [sp, #20]
 8009b9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009c70 <_vfiprintf_r+0x230>
 8009b9e:	7821      	ldrb	r1, [r4, #0]
 8009ba0:	2203      	movs	r2, #3
 8009ba2:	4650      	mov	r0, sl
 8009ba4:	f7f6 fb1c 	bl	80001e0 <memchr>
 8009ba8:	b138      	cbz	r0, 8009bba <_vfiprintf_r+0x17a>
 8009baa:	9b04      	ldr	r3, [sp, #16]
 8009bac:	eba0 000a 	sub.w	r0, r0, sl
 8009bb0:	2240      	movs	r2, #64	; 0x40
 8009bb2:	4082      	lsls	r2, r0
 8009bb4:	4313      	orrs	r3, r2
 8009bb6:	3401      	adds	r4, #1
 8009bb8:	9304      	str	r3, [sp, #16]
 8009bba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bbe:	4829      	ldr	r0, [pc, #164]	; (8009c64 <_vfiprintf_r+0x224>)
 8009bc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bc4:	2206      	movs	r2, #6
 8009bc6:	f7f6 fb0b 	bl	80001e0 <memchr>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d03f      	beq.n	8009c4e <_vfiprintf_r+0x20e>
 8009bce:	4b26      	ldr	r3, [pc, #152]	; (8009c68 <_vfiprintf_r+0x228>)
 8009bd0:	bb1b      	cbnz	r3, 8009c1a <_vfiprintf_r+0x1da>
 8009bd2:	9b03      	ldr	r3, [sp, #12]
 8009bd4:	3307      	adds	r3, #7
 8009bd6:	f023 0307 	bic.w	r3, r3, #7
 8009bda:	3308      	adds	r3, #8
 8009bdc:	9303      	str	r3, [sp, #12]
 8009bde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009be0:	443b      	add	r3, r7
 8009be2:	9309      	str	r3, [sp, #36]	; 0x24
 8009be4:	e768      	b.n	8009ab8 <_vfiprintf_r+0x78>
 8009be6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bea:	460c      	mov	r4, r1
 8009bec:	2001      	movs	r0, #1
 8009bee:	e7a6      	b.n	8009b3e <_vfiprintf_r+0xfe>
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	3401      	adds	r4, #1
 8009bf4:	9305      	str	r3, [sp, #20]
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	f04f 0c0a 	mov.w	ip, #10
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c02:	3a30      	subs	r2, #48	; 0x30
 8009c04:	2a09      	cmp	r2, #9
 8009c06:	d903      	bls.n	8009c10 <_vfiprintf_r+0x1d0>
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0c6      	beq.n	8009b9a <_vfiprintf_r+0x15a>
 8009c0c:	9105      	str	r1, [sp, #20]
 8009c0e:	e7c4      	b.n	8009b9a <_vfiprintf_r+0x15a>
 8009c10:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c14:	4604      	mov	r4, r0
 8009c16:	2301      	movs	r3, #1
 8009c18:	e7f0      	b.n	8009bfc <_vfiprintf_r+0x1bc>
 8009c1a:	ab03      	add	r3, sp, #12
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	462a      	mov	r2, r5
 8009c20:	4b12      	ldr	r3, [pc, #72]	; (8009c6c <_vfiprintf_r+0x22c>)
 8009c22:	a904      	add	r1, sp, #16
 8009c24:	4630      	mov	r0, r6
 8009c26:	f7fd fb67 	bl	80072f8 <_printf_float>
 8009c2a:	4607      	mov	r7, r0
 8009c2c:	1c78      	adds	r0, r7, #1
 8009c2e:	d1d6      	bne.n	8009bde <_vfiprintf_r+0x19e>
 8009c30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c32:	07d9      	lsls	r1, r3, #31
 8009c34:	d405      	bmi.n	8009c42 <_vfiprintf_r+0x202>
 8009c36:	89ab      	ldrh	r3, [r5, #12]
 8009c38:	059a      	lsls	r2, r3, #22
 8009c3a:	d402      	bmi.n	8009c42 <_vfiprintf_r+0x202>
 8009c3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3e:	f7fe f8fd 	bl	8007e3c <__retarget_lock_release_recursive>
 8009c42:	89ab      	ldrh	r3, [r5, #12]
 8009c44:	065b      	lsls	r3, r3, #25
 8009c46:	f53f af1d 	bmi.w	8009a84 <_vfiprintf_r+0x44>
 8009c4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c4c:	e71c      	b.n	8009a88 <_vfiprintf_r+0x48>
 8009c4e:	ab03      	add	r3, sp, #12
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	462a      	mov	r2, r5
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <_vfiprintf_r+0x22c>)
 8009c56:	a904      	add	r1, sp, #16
 8009c58:	4630      	mov	r0, r6
 8009c5a:	f7fd fdf1 	bl	8007840 <_printf_i>
 8009c5e:	e7e4      	b.n	8009c2a <_vfiprintf_r+0x1ea>
 8009c60:	0800b1ec 	.word	0x0800b1ec
 8009c64:	0800b1f6 	.word	0x0800b1f6
 8009c68:	080072f9 	.word	0x080072f9
 8009c6c:	08009a1d 	.word	0x08009a1d
 8009c70:	0800b1f2 	.word	0x0800b1f2

08009c74 <__swbuf_r>:
 8009c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c76:	460e      	mov	r6, r1
 8009c78:	4614      	mov	r4, r2
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	b118      	cbz	r0, 8009c86 <__swbuf_r+0x12>
 8009c7e:	6a03      	ldr	r3, [r0, #32]
 8009c80:	b90b      	cbnz	r3, 8009c86 <__swbuf_r+0x12>
 8009c82:	f7fd ff8b 	bl	8007b9c <__sinit>
 8009c86:	69a3      	ldr	r3, [r4, #24]
 8009c88:	60a3      	str	r3, [r4, #8]
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	071a      	lsls	r2, r3, #28
 8009c8e:	d525      	bpl.n	8009cdc <__swbuf_r+0x68>
 8009c90:	6923      	ldr	r3, [r4, #16]
 8009c92:	b31b      	cbz	r3, 8009cdc <__swbuf_r+0x68>
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	6922      	ldr	r2, [r4, #16]
 8009c98:	1a98      	subs	r0, r3, r2
 8009c9a:	6963      	ldr	r3, [r4, #20]
 8009c9c:	b2f6      	uxtb	r6, r6
 8009c9e:	4283      	cmp	r3, r0
 8009ca0:	4637      	mov	r7, r6
 8009ca2:	dc04      	bgt.n	8009cae <__swbuf_r+0x3a>
 8009ca4:	4621      	mov	r1, r4
 8009ca6:	4628      	mov	r0, r5
 8009ca8:	f7ff fd9e 	bl	80097e8 <_fflush_r>
 8009cac:	b9e0      	cbnz	r0, 8009ce8 <__swbuf_r+0x74>
 8009cae:	68a3      	ldr	r3, [r4, #8]
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	60a3      	str	r3, [r4, #8]
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	1c5a      	adds	r2, r3, #1
 8009cb8:	6022      	str	r2, [r4, #0]
 8009cba:	701e      	strb	r6, [r3, #0]
 8009cbc:	6962      	ldr	r2, [r4, #20]
 8009cbe:	1c43      	adds	r3, r0, #1
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d004      	beq.n	8009cce <__swbuf_r+0x5a>
 8009cc4:	89a3      	ldrh	r3, [r4, #12]
 8009cc6:	07db      	lsls	r3, r3, #31
 8009cc8:	d506      	bpl.n	8009cd8 <__swbuf_r+0x64>
 8009cca:	2e0a      	cmp	r6, #10
 8009ccc:	d104      	bne.n	8009cd8 <__swbuf_r+0x64>
 8009cce:	4621      	mov	r1, r4
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	f7ff fd89 	bl	80097e8 <_fflush_r>
 8009cd6:	b938      	cbnz	r0, 8009ce8 <__swbuf_r+0x74>
 8009cd8:	4638      	mov	r0, r7
 8009cda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009cdc:	4621      	mov	r1, r4
 8009cde:	4628      	mov	r0, r5
 8009ce0:	f000 f806 	bl	8009cf0 <__swsetup_r>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	d0d5      	beq.n	8009c94 <__swbuf_r+0x20>
 8009ce8:	f04f 37ff 	mov.w	r7, #4294967295
 8009cec:	e7f4      	b.n	8009cd8 <__swbuf_r+0x64>
	...

08009cf0 <__swsetup_r>:
 8009cf0:	b538      	push	{r3, r4, r5, lr}
 8009cf2:	4b2a      	ldr	r3, [pc, #168]	; (8009d9c <__swsetup_r+0xac>)
 8009cf4:	4605      	mov	r5, r0
 8009cf6:	6818      	ldr	r0, [r3, #0]
 8009cf8:	460c      	mov	r4, r1
 8009cfa:	b118      	cbz	r0, 8009d04 <__swsetup_r+0x14>
 8009cfc:	6a03      	ldr	r3, [r0, #32]
 8009cfe:	b90b      	cbnz	r3, 8009d04 <__swsetup_r+0x14>
 8009d00:	f7fd ff4c 	bl	8007b9c <__sinit>
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d0a:	0718      	lsls	r0, r3, #28
 8009d0c:	d422      	bmi.n	8009d54 <__swsetup_r+0x64>
 8009d0e:	06d9      	lsls	r1, r3, #27
 8009d10:	d407      	bmi.n	8009d22 <__swsetup_r+0x32>
 8009d12:	2309      	movs	r3, #9
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009d1a:	81a3      	strh	r3, [r4, #12]
 8009d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d20:	e034      	b.n	8009d8c <__swsetup_r+0x9c>
 8009d22:	0758      	lsls	r0, r3, #29
 8009d24:	d512      	bpl.n	8009d4c <__swsetup_r+0x5c>
 8009d26:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d28:	b141      	cbz	r1, 8009d3c <__swsetup_r+0x4c>
 8009d2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d2e:	4299      	cmp	r1, r3
 8009d30:	d002      	beq.n	8009d38 <__swsetup_r+0x48>
 8009d32:	4628      	mov	r0, r5
 8009d34:	f7fe fefe 	bl	8008b34 <_free_r>
 8009d38:	2300      	movs	r3, #0
 8009d3a:	6363      	str	r3, [r4, #52]	; 0x34
 8009d3c:	89a3      	ldrh	r3, [r4, #12]
 8009d3e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d42:	81a3      	strh	r3, [r4, #12]
 8009d44:	2300      	movs	r3, #0
 8009d46:	6063      	str	r3, [r4, #4]
 8009d48:	6923      	ldr	r3, [r4, #16]
 8009d4a:	6023      	str	r3, [r4, #0]
 8009d4c:	89a3      	ldrh	r3, [r4, #12]
 8009d4e:	f043 0308 	orr.w	r3, r3, #8
 8009d52:	81a3      	strh	r3, [r4, #12]
 8009d54:	6923      	ldr	r3, [r4, #16]
 8009d56:	b94b      	cbnz	r3, 8009d6c <__swsetup_r+0x7c>
 8009d58:	89a3      	ldrh	r3, [r4, #12]
 8009d5a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d62:	d003      	beq.n	8009d6c <__swsetup_r+0x7c>
 8009d64:	4621      	mov	r1, r4
 8009d66:	4628      	mov	r0, r5
 8009d68:	f000 f884 	bl	8009e74 <__smakebuf_r>
 8009d6c:	89a0      	ldrh	r0, [r4, #12]
 8009d6e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009d72:	f010 0301 	ands.w	r3, r0, #1
 8009d76:	d00a      	beq.n	8009d8e <__swsetup_r+0x9e>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	60a3      	str	r3, [r4, #8]
 8009d7c:	6963      	ldr	r3, [r4, #20]
 8009d7e:	425b      	negs	r3, r3
 8009d80:	61a3      	str	r3, [r4, #24]
 8009d82:	6923      	ldr	r3, [r4, #16]
 8009d84:	b943      	cbnz	r3, 8009d98 <__swsetup_r+0xa8>
 8009d86:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009d8a:	d1c4      	bne.n	8009d16 <__swsetup_r+0x26>
 8009d8c:	bd38      	pop	{r3, r4, r5, pc}
 8009d8e:	0781      	lsls	r1, r0, #30
 8009d90:	bf58      	it	pl
 8009d92:	6963      	ldrpl	r3, [r4, #20]
 8009d94:	60a3      	str	r3, [r4, #8]
 8009d96:	e7f4      	b.n	8009d82 <__swsetup_r+0x92>
 8009d98:	2000      	movs	r0, #0
 8009d9a:	e7f7      	b.n	8009d8c <__swsetup_r+0x9c>
 8009d9c:	200000dc 	.word	0x200000dc

08009da0 <_raise_r>:
 8009da0:	291f      	cmp	r1, #31
 8009da2:	b538      	push	{r3, r4, r5, lr}
 8009da4:	4604      	mov	r4, r0
 8009da6:	460d      	mov	r5, r1
 8009da8:	d904      	bls.n	8009db4 <_raise_r+0x14>
 8009daa:	2316      	movs	r3, #22
 8009dac:	6003      	str	r3, [r0, #0]
 8009dae:	f04f 30ff 	mov.w	r0, #4294967295
 8009db2:	bd38      	pop	{r3, r4, r5, pc}
 8009db4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009db6:	b112      	cbz	r2, 8009dbe <_raise_r+0x1e>
 8009db8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009dbc:	b94b      	cbnz	r3, 8009dd2 <_raise_r+0x32>
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f000 f830 	bl	8009e24 <_getpid_r>
 8009dc4:	462a      	mov	r2, r5
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	4620      	mov	r0, r4
 8009dca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dce:	f000 b817 	b.w	8009e00 <_kill_r>
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d00a      	beq.n	8009dec <_raise_r+0x4c>
 8009dd6:	1c59      	adds	r1, r3, #1
 8009dd8:	d103      	bne.n	8009de2 <_raise_r+0x42>
 8009dda:	2316      	movs	r3, #22
 8009ddc:	6003      	str	r3, [r0, #0]
 8009dde:	2001      	movs	r0, #1
 8009de0:	e7e7      	b.n	8009db2 <_raise_r+0x12>
 8009de2:	2400      	movs	r4, #0
 8009de4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009de8:	4628      	mov	r0, r5
 8009dea:	4798      	blx	r3
 8009dec:	2000      	movs	r0, #0
 8009dee:	e7e0      	b.n	8009db2 <_raise_r+0x12>

08009df0 <raise>:
 8009df0:	4b02      	ldr	r3, [pc, #8]	; (8009dfc <raise+0xc>)
 8009df2:	4601      	mov	r1, r0
 8009df4:	6818      	ldr	r0, [r3, #0]
 8009df6:	f7ff bfd3 	b.w	8009da0 <_raise_r>
 8009dfa:	bf00      	nop
 8009dfc:	200000dc 	.word	0x200000dc

08009e00 <_kill_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d07      	ldr	r5, [pc, #28]	; (8009e20 <_kill_r+0x20>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	602b      	str	r3, [r5, #0]
 8009e0e:	f7f8 fe0d 	bl	8002a2c <_kill>
 8009e12:	1c43      	adds	r3, r0, #1
 8009e14:	d102      	bne.n	8009e1c <_kill_r+0x1c>
 8009e16:	682b      	ldr	r3, [r5, #0]
 8009e18:	b103      	cbz	r3, 8009e1c <_kill_r+0x1c>
 8009e1a:	6023      	str	r3, [r4, #0]
 8009e1c:	bd38      	pop	{r3, r4, r5, pc}
 8009e1e:	bf00      	nop
 8009e20:	20000c0c 	.word	0x20000c0c

08009e24 <_getpid_r>:
 8009e24:	f7f8 bdfa 	b.w	8002a1c <_getpid>

08009e28 <__swhatbuf_r>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	460c      	mov	r4, r1
 8009e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e30:	2900      	cmp	r1, #0
 8009e32:	b096      	sub	sp, #88	; 0x58
 8009e34:	4615      	mov	r5, r2
 8009e36:	461e      	mov	r6, r3
 8009e38:	da0d      	bge.n	8009e56 <__swhatbuf_r+0x2e>
 8009e3a:	89a3      	ldrh	r3, [r4, #12]
 8009e3c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009e40:	f04f 0100 	mov.w	r1, #0
 8009e44:	bf0c      	ite	eq
 8009e46:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009e4a:	2340      	movne	r3, #64	; 0x40
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	6031      	str	r1, [r6, #0]
 8009e50:	602b      	str	r3, [r5, #0]
 8009e52:	b016      	add	sp, #88	; 0x58
 8009e54:	bd70      	pop	{r4, r5, r6, pc}
 8009e56:	466a      	mov	r2, sp
 8009e58:	f000 f848 	bl	8009eec <_fstat_r>
 8009e5c:	2800      	cmp	r0, #0
 8009e5e:	dbec      	blt.n	8009e3a <__swhatbuf_r+0x12>
 8009e60:	9901      	ldr	r1, [sp, #4]
 8009e62:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009e66:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009e6a:	4259      	negs	r1, r3
 8009e6c:	4159      	adcs	r1, r3
 8009e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e72:	e7eb      	b.n	8009e4c <__swhatbuf_r+0x24>

08009e74 <__smakebuf_r>:
 8009e74:	898b      	ldrh	r3, [r1, #12]
 8009e76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009e78:	079d      	lsls	r5, r3, #30
 8009e7a:	4606      	mov	r6, r0
 8009e7c:	460c      	mov	r4, r1
 8009e7e:	d507      	bpl.n	8009e90 <__smakebuf_r+0x1c>
 8009e80:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009e84:	6023      	str	r3, [r4, #0]
 8009e86:	6123      	str	r3, [r4, #16]
 8009e88:	2301      	movs	r3, #1
 8009e8a:	6163      	str	r3, [r4, #20]
 8009e8c:	b002      	add	sp, #8
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
 8009e90:	ab01      	add	r3, sp, #4
 8009e92:	466a      	mov	r2, sp
 8009e94:	f7ff ffc8 	bl	8009e28 <__swhatbuf_r>
 8009e98:	9900      	ldr	r1, [sp, #0]
 8009e9a:	4605      	mov	r5, r0
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f7fe febd 	bl	8008c1c <_malloc_r>
 8009ea2:	b948      	cbnz	r0, 8009eb8 <__smakebuf_r+0x44>
 8009ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ea8:	059a      	lsls	r2, r3, #22
 8009eaa:	d4ef      	bmi.n	8009e8c <__smakebuf_r+0x18>
 8009eac:	f023 0303 	bic.w	r3, r3, #3
 8009eb0:	f043 0302 	orr.w	r3, r3, #2
 8009eb4:	81a3      	strh	r3, [r4, #12]
 8009eb6:	e7e3      	b.n	8009e80 <__smakebuf_r+0xc>
 8009eb8:	89a3      	ldrh	r3, [r4, #12]
 8009eba:	6020      	str	r0, [r4, #0]
 8009ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ec0:	81a3      	strh	r3, [r4, #12]
 8009ec2:	9b00      	ldr	r3, [sp, #0]
 8009ec4:	6163      	str	r3, [r4, #20]
 8009ec6:	9b01      	ldr	r3, [sp, #4]
 8009ec8:	6120      	str	r0, [r4, #16]
 8009eca:	b15b      	cbz	r3, 8009ee4 <__smakebuf_r+0x70>
 8009ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f000 f81d 	bl	8009f10 <_isatty_r>
 8009ed6:	b128      	cbz	r0, 8009ee4 <__smakebuf_r+0x70>
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	f043 0301 	orr.w	r3, r3, #1
 8009ee2:	81a3      	strh	r3, [r4, #12]
 8009ee4:	89a3      	ldrh	r3, [r4, #12]
 8009ee6:	431d      	orrs	r5, r3
 8009ee8:	81a5      	strh	r5, [r4, #12]
 8009eea:	e7cf      	b.n	8009e8c <__smakebuf_r+0x18>

08009eec <_fstat_r>:
 8009eec:	b538      	push	{r3, r4, r5, lr}
 8009eee:	4d07      	ldr	r5, [pc, #28]	; (8009f0c <_fstat_r+0x20>)
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4604      	mov	r4, r0
 8009ef4:	4608      	mov	r0, r1
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	602b      	str	r3, [r5, #0]
 8009efa:	f7f8 fdf6 	bl	8002aea <_fstat>
 8009efe:	1c43      	adds	r3, r0, #1
 8009f00:	d102      	bne.n	8009f08 <_fstat_r+0x1c>
 8009f02:	682b      	ldr	r3, [r5, #0]
 8009f04:	b103      	cbz	r3, 8009f08 <_fstat_r+0x1c>
 8009f06:	6023      	str	r3, [r4, #0]
 8009f08:	bd38      	pop	{r3, r4, r5, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20000c0c 	.word	0x20000c0c

08009f10 <_isatty_r>:
 8009f10:	b538      	push	{r3, r4, r5, lr}
 8009f12:	4d06      	ldr	r5, [pc, #24]	; (8009f2c <_isatty_r+0x1c>)
 8009f14:	2300      	movs	r3, #0
 8009f16:	4604      	mov	r4, r0
 8009f18:	4608      	mov	r0, r1
 8009f1a:	602b      	str	r3, [r5, #0]
 8009f1c:	f7f8 fdf5 	bl	8002b0a <_isatty>
 8009f20:	1c43      	adds	r3, r0, #1
 8009f22:	d102      	bne.n	8009f2a <_isatty_r+0x1a>
 8009f24:	682b      	ldr	r3, [r5, #0]
 8009f26:	b103      	cbz	r3, 8009f2a <_isatty_r+0x1a>
 8009f28:	6023      	str	r3, [r4, #0]
 8009f2a:	bd38      	pop	{r3, r4, r5, pc}
 8009f2c:	20000c0c 	.word	0x20000c0c

08009f30 <pow>:
 8009f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f32:	ed2d 8b02 	vpush	{d8}
 8009f36:	eeb0 8a40 	vmov.f32	s16, s0
 8009f3a:	eef0 8a60 	vmov.f32	s17, s1
 8009f3e:	ec55 4b11 	vmov	r4, r5, d1
 8009f42:	f000 f871 	bl	800a028 <__ieee754_pow>
 8009f46:	4622      	mov	r2, r4
 8009f48:	462b      	mov	r3, r5
 8009f4a:	4620      	mov	r0, r4
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	ec57 6b10 	vmov	r6, r7, d0
 8009f52:	f7f6 fdf3 	bl	8000b3c <__aeabi_dcmpun>
 8009f56:	2800      	cmp	r0, #0
 8009f58:	d13b      	bne.n	8009fd2 <pow+0xa2>
 8009f5a:	ec51 0b18 	vmov	r0, r1, d8
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2300      	movs	r3, #0
 8009f62:	f7f6 fdb9 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f66:	b1b8      	cbz	r0, 8009f98 <pow+0x68>
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	4620      	mov	r0, r4
 8009f6e:	4629      	mov	r1, r5
 8009f70:	f7f6 fdb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d146      	bne.n	800a006 <pow+0xd6>
 8009f78:	ec45 4b10 	vmov	d0, r4, r5
 8009f7c:	f000 f848 	bl	800a010 <finite>
 8009f80:	b338      	cbz	r0, 8009fd2 <pow+0xa2>
 8009f82:	2200      	movs	r2, #0
 8009f84:	2300      	movs	r3, #0
 8009f86:	4620      	mov	r0, r4
 8009f88:	4629      	mov	r1, r5
 8009f8a:	f7f6 fdaf 	bl	8000aec <__aeabi_dcmplt>
 8009f8e:	b300      	cbz	r0, 8009fd2 <pow+0xa2>
 8009f90:	f7fd ff28 	bl	8007de4 <__errno>
 8009f94:	2322      	movs	r3, #34	; 0x22
 8009f96:	e01b      	b.n	8009fd0 <pow+0xa0>
 8009f98:	ec47 6b10 	vmov	d0, r6, r7
 8009f9c:	f000 f838 	bl	800a010 <finite>
 8009fa0:	b9e0      	cbnz	r0, 8009fdc <pow+0xac>
 8009fa2:	eeb0 0a48 	vmov.f32	s0, s16
 8009fa6:	eef0 0a68 	vmov.f32	s1, s17
 8009faa:	f000 f831 	bl	800a010 <finite>
 8009fae:	b1a8      	cbz	r0, 8009fdc <pow+0xac>
 8009fb0:	ec45 4b10 	vmov	d0, r4, r5
 8009fb4:	f000 f82c 	bl	800a010 <finite>
 8009fb8:	b180      	cbz	r0, 8009fdc <pow+0xac>
 8009fba:	4632      	mov	r2, r6
 8009fbc:	463b      	mov	r3, r7
 8009fbe:	4630      	mov	r0, r6
 8009fc0:	4639      	mov	r1, r7
 8009fc2:	f7f6 fdbb 	bl	8000b3c <__aeabi_dcmpun>
 8009fc6:	2800      	cmp	r0, #0
 8009fc8:	d0e2      	beq.n	8009f90 <pow+0x60>
 8009fca:	f7fd ff0b 	bl	8007de4 <__errno>
 8009fce:	2321      	movs	r3, #33	; 0x21
 8009fd0:	6003      	str	r3, [r0, #0]
 8009fd2:	ecbd 8b02 	vpop	{d8}
 8009fd6:	ec47 6b10 	vmov	d0, r6, r7
 8009fda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2300      	movs	r3, #0
 8009fe0:	4630      	mov	r0, r6
 8009fe2:	4639      	mov	r1, r7
 8009fe4:	f7f6 fd78 	bl	8000ad8 <__aeabi_dcmpeq>
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d0f2      	beq.n	8009fd2 <pow+0xa2>
 8009fec:	eeb0 0a48 	vmov.f32	s0, s16
 8009ff0:	eef0 0a68 	vmov.f32	s1, s17
 8009ff4:	f000 f80c 	bl	800a010 <finite>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d0ea      	beq.n	8009fd2 <pow+0xa2>
 8009ffc:	ec45 4b10 	vmov	d0, r4, r5
 800a000:	f000 f806 	bl	800a010 <finite>
 800a004:	e7c3      	b.n	8009f8e <pow+0x5e>
 800a006:	4f01      	ldr	r7, [pc, #4]	; (800a00c <pow+0xdc>)
 800a008:	2600      	movs	r6, #0
 800a00a:	e7e2      	b.n	8009fd2 <pow+0xa2>
 800a00c:	3ff00000 	.word	0x3ff00000

0800a010 <finite>:
 800a010:	b082      	sub	sp, #8
 800a012:	ed8d 0b00 	vstr	d0, [sp]
 800a016:	9801      	ldr	r0, [sp, #4]
 800a018:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a01c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a020:	0fc0      	lsrs	r0, r0, #31
 800a022:	b002      	add	sp, #8
 800a024:	4770      	bx	lr
	...

0800a028 <__ieee754_pow>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	ed2d 8b06 	vpush	{d8-d10}
 800a030:	b089      	sub	sp, #36	; 0x24
 800a032:	ed8d 1b00 	vstr	d1, [sp]
 800a036:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a03a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a03e:	ea58 0102 	orrs.w	r1, r8, r2
 800a042:	ec57 6b10 	vmov	r6, r7, d0
 800a046:	d115      	bne.n	800a074 <__ieee754_pow+0x4c>
 800a048:	19b3      	adds	r3, r6, r6
 800a04a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a04e:	4152      	adcs	r2, r2
 800a050:	4299      	cmp	r1, r3
 800a052:	4b89      	ldr	r3, [pc, #548]	; (800a278 <__ieee754_pow+0x250>)
 800a054:	4193      	sbcs	r3, r2
 800a056:	f080 84d1 	bcs.w	800a9fc <__ieee754_pow+0x9d4>
 800a05a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a05e:	4630      	mov	r0, r6
 800a060:	4639      	mov	r1, r7
 800a062:	f7f6 f91b 	bl	800029c <__adddf3>
 800a066:	ec41 0b10 	vmov	d0, r0, r1
 800a06a:	b009      	add	sp, #36	; 0x24
 800a06c:	ecbd 8b06 	vpop	{d8-d10}
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a074:	4b81      	ldr	r3, [pc, #516]	; (800a27c <__ieee754_pow+0x254>)
 800a076:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a07a:	429c      	cmp	r4, r3
 800a07c:	ee10 aa10 	vmov	sl, s0
 800a080:	463d      	mov	r5, r7
 800a082:	dc06      	bgt.n	800a092 <__ieee754_pow+0x6a>
 800a084:	d101      	bne.n	800a08a <__ieee754_pow+0x62>
 800a086:	2e00      	cmp	r6, #0
 800a088:	d1e7      	bne.n	800a05a <__ieee754_pow+0x32>
 800a08a:	4598      	cmp	r8, r3
 800a08c:	dc01      	bgt.n	800a092 <__ieee754_pow+0x6a>
 800a08e:	d10f      	bne.n	800a0b0 <__ieee754_pow+0x88>
 800a090:	b172      	cbz	r2, 800a0b0 <__ieee754_pow+0x88>
 800a092:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a096:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a09a:	ea55 050a 	orrs.w	r5, r5, sl
 800a09e:	d1dc      	bne.n	800a05a <__ieee754_pow+0x32>
 800a0a0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a0a4:	18db      	adds	r3, r3, r3
 800a0a6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a0aa:	4152      	adcs	r2, r2
 800a0ac:	429d      	cmp	r5, r3
 800a0ae:	e7d0      	b.n	800a052 <__ieee754_pow+0x2a>
 800a0b0:	2d00      	cmp	r5, #0
 800a0b2:	da3b      	bge.n	800a12c <__ieee754_pow+0x104>
 800a0b4:	4b72      	ldr	r3, [pc, #456]	; (800a280 <__ieee754_pow+0x258>)
 800a0b6:	4598      	cmp	r8, r3
 800a0b8:	dc51      	bgt.n	800a15e <__ieee754_pow+0x136>
 800a0ba:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a0be:	4598      	cmp	r8, r3
 800a0c0:	f340 84ab 	ble.w	800aa1a <__ieee754_pow+0x9f2>
 800a0c4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a0c8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a0cc:	2b14      	cmp	r3, #20
 800a0ce:	dd0f      	ble.n	800a0f0 <__ieee754_pow+0xc8>
 800a0d0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a0d4:	fa22 f103 	lsr.w	r1, r2, r3
 800a0d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	f040 849c 	bne.w	800aa1a <__ieee754_pow+0x9f2>
 800a0e2:	f001 0101 	and.w	r1, r1, #1
 800a0e6:	f1c1 0302 	rsb	r3, r1, #2
 800a0ea:	9304      	str	r3, [sp, #16]
 800a0ec:	b182      	cbz	r2, 800a110 <__ieee754_pow+0xe8>
 800a0ee:	e05f      	b.n	800a1b0 <__ieee754_pow+0x188>
 800a0f0:	2a00      	cmp	r2, #0
 800a0f2:	d15b      	bne.n	800a1ac <__ieee754_pow+0x184>
 800a0f4:	f1c3 0314 	rsb	r3, r3, #20
 800a0f8:	fa48 f103 	asr.w	r1, r8, r3
 800a0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800a100:	4543      	cmp	r3, r8
 800a102:	f040 8487 	bne.w	800aa14 <__ieee754_pow+0x9ec>
 800a106:	f001 0101 	and.w	r1, r1, #1
 800a10a:	f1c1 0302 	rsb	r3, r1, #2
 800a10e:	9304      	str	r3, [sp, #16]
 800a110:	4b5c      	ldr	r3, [pc, #368]	; (800a284 <__ieee754_pow+0x25c>)
 800a112:	4598      	cmp	r8, r3
 800a114:	d132      	bne.n	800a17c <__ieee754_pow+0x154>
 800a116:	f1b9 0f00 	cmp.w	r9, #0
 800a11a:	f280 8477 	bge.w	800aa0c <__ieee754_pow+0x9e4>
 800a11e:	4959      	ldr	r1, [pc, #356]	; (800a284 <__ieee754_pow+0x25c>)
 800a120:	4632      	mov	r2, r6
 800a122:	463b      	mov	r3, r7
 800a124:	2000      	movs	r0, #0
 800a126:	f7f6 fb99 	bl	800085c <__aeabi_ddiv>
 800a12a:	e79c      	b.n	800a066 <__ieee754_pow+0x3e>
 800a12c:	2300      	movs	r3, #0
 800a12e:	9304      	str	r3, [sp, #16]
 800a130:	2a00      	cmp	r2, #0
 800a132:	d13d      	bne.n	800a1b0 <__ieee754_pow+0x188>
 800a134:	4b51      	ldr	r3, [pc, #324]	; (800a27c <__ieee754_pow+0x254>)
 800a136:	4598      	cmp	r8, r3
 800a138:	d1ea      	bne.n	800a110 <__ieee754_pow+0xe8>
 800a13a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a13e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a142:	ea53 030a 	orrs.w	r3, r3, sl
 800a146:	f000 8459 	beq.w	800a9fc <__ieee754_pow+0x9d4>
 800a14a:	4b4f      	ldr	r3, [pc, #316]	; (800a288 <__ieee754_pow+0x260>)
 800a14c:	429c      	cmp	r4, r3
 800a14e:	dd08      	ble.n	800a162 <__ieee754_pow+0x13a>
 800a150:	f1b9 0f00 	cmp.w	r9, #0
 800a154:	f2c0 8456 	blt.w	800aa04 <__ieee754_pow+0x9dc>
 800a158:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a15c:	e783      	b.n	800a066 <__ieee754_pow+0x3e>
 800a15e:	2302      	movs	r3, #2
 800a160:	e7e5      	b.n	800a12e <__ieee754_pow+0x106>
 800a162:	f1b9 0f00 	cmp.w	r9, #0
 800a166:	f04f 0000 	mov.w	r0, #0
 800a16a:	f04f 0100 	mov.w	r1, #0
 800a16e:	f6bf af7a 	bge.w	800a066 <__ieee754_pow+0x3e>
 800a172:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a176:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a17a:	e774      	b.n	800a066 <__ieee754_pow+0x3e>
 800a17c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a180:	d106      	bne.n	800a190 <__ieee754_pow+0x168>
 800a182:	4632      	mov	r2, r6
 800a184:	463b      	mov	r3, r7
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7f6 fa3d 	bl	8000608 <__aeabi_dmul>
 800a18e:	e76a      	b.n	800a066 <__ieee754_pow+0x3e>
 800a190:	4b3e      	ldr	r3, [pc, #248]	; (800a28c <__ieee754_pow+0x264>)
 800a192:	4599      	cmp	r9, r3
 800a194:	d10c      	bne.n	800a1b0 <__ieee754_pow+0x188>
 800a196:	2d00      	cmp	r5, #0
 800a198:	db0a      	blt.n	800a1b0 <__ieee754_pow+0x188>
 800a19a:	ec47 6b10 	vmov	d0, r6, r7
 800a19e:	b009      	add	sp, #36	; 0x24
 800a1a0:	ecbd 8b06 	vpop	{d8-d10}
 800a1a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1a8:	f000 bd20 	b.w	800abec <__ieee754_sqrt>
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	9304      	str	r3, [sp, #16]
 800a1b0:	ec47 6b10 	vmov	d0, r6, r7
 800a1b4:	f000 fc62 	bl	800aa7c <fabs>
 800a1b8:	ec51 0b10 	vmov	r0, r1, d0
 800a1bc:	f1ba 0f00 	cmp.w	sl, #0
 800a1c0:	d129      	bne.n	800a216 <__ieee754_pow+0x1ee>
 800a1c2:	b124      	cbz	r4, 800a1ce <__ieee754_pow+0x1a6>
 800a1c4:	4b2f      	ldr	r3, [pc, #188]	; (800a284 <__ieee754_pow+0x25c>)
 800a1c6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	d123      	bne.n	800a216 <__ieee754_pow+0x1ee>
 800a1ce:	f1b9 0f00 	cmp.w	r9, #0
 800a1d2:	da05      	bge.n	800a1e0 <__ieee754_pow+0x1b8>
 800a1d4:	4602      	mov	r2, r0
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	2000      	movs	r0, #0
 800a1da:	492a      	ldr	r1, [pc, #168]	; (800a284 <__ieee754_pow+0x25c>)
 800a1dc:	f7f6 fb3e 	bl	800085c <__aeabi_ddiv>
 800a1e0:	2d00      	cmp	r5, #0
 800a1e2:	f6bf af40 	bge.w	800a066 <__ieee754_pow+0x3e>
 800a1e6:	9b04      	ldr	r3, [sp, #16]
 800a1e8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800a1ec:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a1f0:	431c      	orrs	r4, r3
 800a1f2:	d108      	bne.n	800a206 <__ieee754_pow+0x1de>
 800a1f4:	4602      	mov	r2, r0
 800a1f6:	460b      	mov	r3, r1
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	4619      	mov	r1, r3
 800a1fc:	f7f6 f84c 	bl	8000298 <__aeabi_dsub>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	e78f      	b.n	800a126 <__ieee754_pow+0xfe>
 800a206:	9b04      	ldr	r3, [sp, #16]
 800a208:	2b01      	cmp	r3, #1
 800a20a:	f47f af2c 	bne.w	800a066 <__ieee754_pow+0x3e>
 800a20e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a212:	4619      	mov	r1, r3
 800a214:	e727      	b.n	800a066 <__ieee754_pow+0x3e>
 800a216:	0feb      	lsrs	r3, r5, #31
 800a218:	3b01      	subs	r3, #1
 800a21a:	9306      	str	r3, [sp, #24]
 800a21c:	9a06      	ldr	r2, [sp, #24]
 800a21e:	9b04      	ldr	r3, [sp, #16]
 800a220:	4313      	orrs	r3, r2
 800a222:	d102      	bne.n	800a22a <__ieee754_pow+0x202>
 800a224:	4632      	mov	r2, r6
 800a226:	463b      	mov	r3, r7
 800a228:	e7e6      	b.n	800a1f8 <__ieee754_pow+0x1d0>
 800a22a:	4b19      	ldr	r3, [pc, #100]	; (800a290 <__ieee754_pow+0x268>)
 800a22c:	4598      	cmp	r8, r3
 800a22e:	f340 80fb 	ble.w	800a428 <__ieee754_pow+0x400>
 800a232:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800a236:	4598      	cmp	r8, r3
 800a238:	4b13      	ldr	r3, [pc, #76]	; (800a288 <__ieee754_pow+0x260>)
 800a23a:	dd0c      	ble.n	800a256 <__ieee754_pow+0x22e>
 800a23c:	429c      	cmp	r4, r3
 800a23e:	dc0f      	bgt.n	800a260 <__ieee754_pow+0x238>
 800a240:	f1b9 0f00 	cmp.w	r9, #0
 800a244:	da0f      	bge.n	800a266 <__ieee754_pow+0x23e>
 800a246:	2000      	movs	r0, #0
 800a248:	b009      	add	sp, #36	; 0x24
 800a24a:	ecbd 8b06 	vpop	{d8-d10}
 800a24e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a252:	f000 bcc2 	b.w	800abda <__math_oflow>
 800a256:	429c      	cmp	r4, r3
 800a258:	dbf2      	blt.n	800a240 <__ieee754_pow+0x218>
 800a25a:	4b0a      	ldr	r3, [pc, #40]	; (800a284 <__ieee754_pow+0x25c>)
 800a25c:	429c      	cmp	r4, r3
 800a25e:	dd19      	ble.n	800a294 <__ieee754_pow+0x26c>
 800a260:	f1b9 0f00 	cmp.w	r9, #0
 800a264:	dcef      	bgt.n	800a246 <__ieee754_pow+0x21e>
 800a266:	2000      	movs	r0, #0
 800a268:	b009      	add	sp, #36	; 0x24
 800a26a:	ecbd 8b06 	vpop	{d8-d10}
 800a26e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a272:	f000 bca9 	b.w	800abc8 <__math_uflow>
 800a276:	bf00      	nop
 800a278:	fff00000 	.word	0xfff00000
 800a27c:	7ff00000 	.word	0x7ff00000
 800a280:	433fffff 	.word	0x433fffff
 800a284:	3ff00000 	.word	0x3ff00000
 800a288:	3fefffff 	.word	0x3fefffff
 800a28c:	3fe00000 	.word	0x3fe00000
 800a290:	41e00000 	.word	0x41e00000
 800a294:	4b60      	ldr	r3, [pc, #384]	; (800a418 <__ieee754_pow+0x3f0>)
 800a296:	2200      	movs	r2, #0
 800a298:	f7f5 fffe 	bl	8000298 <__aeabi_dsub>
 800a29c:	a354      	add	r3, pc, #336	; (adr r3, 800a3f0 <__ieee754_pow+0x3c8>)
 800a29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	460d      	mov	r5, r1
 800a2a6:	f7f6 f9af 	bl	8000608 <__aeabi_dmul>
 800a2aa:	a353      	add	r3, pc, #332	; (adr r3, 800a3f8 <__ieee754_pow+0x3d0>)
 800a2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2b0:	4606      	mov	r6, r0
 800a2b2:	460f      	mov	r7, r1
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	f7f6 f9a6 	bl	8000608 <__aeabi_dmul>
 800a2bc:	4b57      	ldr	r3, [pc, #348]	; (800a41c <__ieee754_pow+0x3f4>)
 800a2be:	4682      	mov	sl, r0
 800a2c0:	468b      	mov	fp, r1
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f6 f99e 	bl	8000608 <__aeabi_dmul>
 800a2cc:	4602      	mov	r2, r0
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	a14b      	add	r1, pc, #300	; (adr r1, 800a400 <__ieee754_pow+0x3d8>)
 800a2d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2d6:	f7f5 ffdf 	bl	8000298 <__aeabi_dsub>
 800a2da:	4622      	mov	r2, r4
 800a2dc:	462b      	mov	r3, r5
 800a2de:	f7f6 f993 	bl	8000608 <__aeabi_dmul>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	460b      	mov	r3, r1
 800a2e6:	2000      	movs	r0, #0
 800a2e8:	494d      	ldr	r1, [pc, #308]	; (800a420 <__ieee754_pow+0x3f8>)
 800a2ea:	f7f5 ffd5 	bl	8000298 <__aeabi_dsub>
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	4680      	mov	r8, r0
 800a2f2:	4689      	mov	r9, r1
 800a2f4:	462b      	mov	r3, r5
 800a2f6:	4620      	mov	r0, r4
 800a2f8:	4629      	mov	r1, r5
 800a2fa:	f7f6 f985 	bl	8000608 <__aeabi_dmul>
 800a2fe:	4602      	mov	r2, r0
 800a300:	460b      	mov	r3, r1
 800a302:	4640      	mov	r0, r8
 800a304:	4649      	mov	r1, r9
 800a306:	f7f6 f97f 	bl	8000608 <__aeabi_dmul>
 800a30a:	a33f      	add	r3, pc, #252	; (adr r3, 800a408 <__ieee754_pow+0x3e0>)
 800a30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a310:	f7f6 f97a 	bl	8000608 <__aeabi_dmul>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4650      	mov	r0, sl
 800a31a:	4659      	mov	r1, fp
 800a31c:	f7f5 ffbc 	bl	8000298 <__aeabi_dsub>
 800a320:	4602      	mov	r2, r0
 800a322:	460b      	mov	r3, r1
 800a324:	4680      	mov	r8, r0
 800a326:	4689      	mov	r9, r1
 800a328:	4630      	mov	r0, r6
 800a32a:	4639      	mov	r1, r7
 800a32c:	f7f5 ffb6 	bl	800029c <__adddf3>
 800a330:	2000      	movs	r0, #0
 800a332:	4632      	mov	r2, r6
 800a334:	463b      	mov	r3, r7
 800a336:	4604      	mov	r4, r0
 800a338:	460d      	mov	r5, r1
 800a33a:	f7f5 ffad 	bl	8000298 <__aeabi_dsub>
 800a33e:	4602      	mov	r2, r0
 800a340:	460b      	mov	r3, r1
 800a342:	4640      	mov	r0, r8
 800a344:	4649      	mov	r1, r9
 800a346:	f7f5 ffa7 	bl	8000298 <__aeabi_dsub>
 800a34a:	9b04      	ldr	r3, [sp, #16]
 800a34c:	9a06      	ldr	r2, [sp, #24]
 800a34e:	3b01      	subs	r3, #1
 800a350:	4313      	orrs	r3, r2
 800a352:	4682      	mov	sl, r0
 800a354:	468b      	mov	fp, r1
 800a356:	f040 81e7 	bne.w	800a728 <__ieee754_pow+0x700>
 800a35a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800a410 <__ieee754_pow+0x3e8>
 800a35e:	eeb0 8a47 	vmov.f32	s16, s14
 800a362:	eef0 8a67 	vmov.f32	s17, s15
 800a366:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a36a:	2600      	movs	r6, #0
 800a36c:	4632      	mov	r2, r6
 800a36e:	463b      	mov	r3, r7
 800a370:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a374:	f7f5 ff90 	bl	8000298 <__aeabi_dsub>
 800a378:	4622      	mov	r2, r4
 800a37a:	462b      	mov	r3, r5
 800a37c:	f7f6 f944 	bl	8000608 <__aeabi_dmul>
 800a380:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a384:	4680      	mov	r8, r0
 800a386:	4689      	mov	r9, r1
 800a388:	4650      	mov	r0, sl
 800a38a:	4659      	mov	r1, fp
 800a38c:	f7f6 f93c 	bl	8000608 <__aeabi_dmul>
 800a390:	4602      	mov	r2, r0
 800a392:	460b      	mov	r3, r1
 800a394:	4640      	mov	r0, r8
 800a396:	4649      	mov	r1, r9
 800a398:	f7f5 ff80 	bl	800029c <__adddf3>
 800a39c:	4632      	mov	r2, r6
 800a39e:	463b      	mov	r3, r7
 800a3a0:	4680      	mov	r8, r0
 800a3a2:	4689      	mov	r9, r1
 800a3a4:	4620      	mov	r0, r4
 800a3a6:	4629      	mov	r1, r5
 800a3a8:	f7f6 f92e 	bl	8000608 <__aeabi_dmul>
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4604      	mov	r4, r0
 800a3b0:	460d      	mov	r5, r1
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	4640      	mov	r0, r8
 800a3b8:	f7f5 ff70 	bl	800029c <__adddf3>
 800a3bc:	4b19      	ldr	r3, [pc, #100]	; (800a424 <__ieee754_pow+0x3fc>)
 800a3be:	4299      	cmp	r1, r3
 800a3c0:	ec45 4b19 	vmov	d9, r4, r5
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	460f      	mov	r7, r1
 800a3c8:	468b      	mov	fp, r1
 800a3ca:	f340 82f0 	ble.w	800a9ae <__ieee754_pow+0x986>
 800a3ce:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800a3d2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800a3d6:	4303      	orrs	r3, r0
 800a3d8:	f000 81e4 	beq.w	800a7a4 <__ieee754_pow+0x77c>
 800a3dc:	ec51 0b18 	vmov	r0, r1, d8
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	f7f6 fb82 	bl	8000aec <__aeabi_dcmplt>
 800a3e8:	3800      	subs	r0, #0
 800a3ea:	bf18      	it	ne
 800a3ec:	2001      	movne	r0, #1
 800a3ee:	e72b      	b.n	800a248 <__ieee754_pow+0x220>
 800a3f0:	60000000 	.word	0x60000000
 800a3f4:	3ff71547 	.word	0x3ff71547
 800a3f8:	f85ddf44 	.word	0xf85ddf44
 800a3fc:	3e54ae0b 	.word	0x3e54ae0b
 800a400:	55555555 	.word	0x55555555
 800a404:	3fd55555 	.word	0x3fd55555
 800a408:	652b82fe 	.word	0x652b82fe
 800a40c:	3ff71547 	.word	0x3ff71547
 800a410:	00000000 	.word	0x00000000
 800a414:	bff00000 	.word	0xbff00000
 800a418:	3ff00000 	.word	0x3ff00000
 800a41c:	3fd00000 	.word	0x3fd00000
 800a420:	3fe00000 	.word	0x3fe00000
 800a424:	408fffff 	.word	0x408fffff
 800a428:	4bd5      	ldr	r3, [pc, #852]	; (800a780 <__ieee754_pow+0x758>)
 800a42a:	402b      	ands	r3, r5
 800a42c:	2200      	movs	r2, #0
 800a42e:	b92b      	cbnz	r3, 800a43c <__ieee754_pow+0x414>
 800a430:	4bd4      	ldr	r3, [pc, #848]	; (800a784 <__ieee754_pow+0x75c>)
 800a432:	f7f6 f8e9 	bl	8000608 <__aeabi_dmul>
 800a436:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800a43a:	460c      	mov	r4, r1
 800a43c:	1523      	asrs	r3, r4, #20
 800a43e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a442:	4413      	add	r3, r2
 800a444:	9305      	str	r3, [sp, #20]
 800a446:	4bd0      	ldr	r3, [pc, #832]	; (800a788 <__ieee754_pow+0x760>)
 800a448:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800a44c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800a450:	429c      	cmp	r4, r3
 800a452:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a456:	dd08      	ble.n	800a46a <__ieee754_pow+0x442>
 800a458:	4bcc      	ldr	r3, [pc, #816]	; (800a78c <__ieee754_pow+0x764>)
 800a45a:	429c      	cmp	r4, r3
 800a45c:	f340 8162 	ble.w	800a724 <__ieee754_pow+0x6fc>
 800a460:	9b05      	ldr	r3, [sp, #20]
 800a462:	3301      	adds	r3, #1
 800a464:	9305      	str	r3, [sp, #20]
 800a466:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800a46a:	2400      	movs	r4, #0
 800a46c:	00e3      	lsls	r3, r4, #3
 800a46e:	9307      	str	r3, [sp, #28]
 800a470:	4bc7      	ldr	r3, [pc, #796]	; (800a790 <__ieee754_pow+0x768>)
 800a472:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a476:	ed93 7b00 	vldr	d7, [r3]
 800a47a:	4629      	mov	r1, r5
 800a47c:	ec53 2b17 	vmov	r2, r3, d7
 800a480:	eeb0 9a47 	vmov.f32	s18, s14
 800a484:	eef0 9a67 	vmov.f32	s19, s15
 800a488:	4682      	mov	sl, r0
 800a48a:	f7f5 ff05 	bl	8000298 <__aeabi_dsub>
 800a48e:	4652      	mov	r2, sl
 800a490:	4606      	mov	r6, r0
 800a492:	460f      	mov	r7, r1
 800a494:	462b      	mov	r3, r5
 800a496:	ec51 0b19 	vmov	r0, r1, d9
 800a49a:	f7f5 feff 	bl	800029c <__adddf3>
 800a49e:	4602      	mov	r2, r0
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	49bb      	ldr	r1, [pc, #748]	; (800a794 <__ieee754_pow+0x76c>)
 800a4a6:	f7f6 f9d9 	bl	800085c <__aeabi_ddiv>
 800a4aa:	ec41 0b1a 	vmov	d10, r0, r1
 800a4ae:	4602      	mov	r2, r0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	4639      	mov	r1, r7
 800a4b6:	f7f6 f8a7 	bl	8000608 <__aeabi_dmul>
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4c0:	9302      	str	r3, [sp, #8]
 800a4c2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a4c6:	46ab      	mov	fp, r5
 800a4c8:	106d      	asrs	r5, r5, #1
 800a4ca:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800a4ce:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800a4d2:	ec41 0b18 	vmov	d8, r0, r1
 800a4d6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4640      	mov	r0, r8
 800a4de:	4649      	mov	r1, r9
 800a4e0:	4614      	mov	r4, r2
 800a4e2:	461d      	mov	r5, r3
 800a4e4:	f7f6 f890 	bl	8000608 <__aeabi_dmul>
 800a4e8:	4602      	mov	r2, r0
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	f7f5 fed2 	bl	8000298 <__aeabi_dsub>
 800a4f4:	ec53 2b19 	vmov	r2, r3, d9
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	460f      	mov	r7, r1
 800a4fc:	4620      	mov	r0, r4
 800a4fe:	4629      	mov	r1, r5
 800a500:	f7f5 feca 	bl	8000298 <__aeabi_dsub>
 800a504:	4602      	mov	r2, r0
 800a506:	460b      	mov	r3, r1
 800a508:	4650      	mov	r0, sl
 800a50a:	4659      	mov	r1, fp
 800a50c:	f7f5 fec4 	bl	8000298 <__aeabi_dsub>
 800a510:	4642      	mov	r2, r8
 800a512:	464b      	mov	r3, r9
 800a514:	f7f6 f878 	bl	8000608 <__aeabi_dmul>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f5 feba 	bl	8000298 <__aeabi_dsub>
 800a524:	ec53 2b1a 	vmov	r2, r3, d10
 800a528:	f7f6 f86e 	bl	8000608 <__aeabi_dmul>
 800a52c:	ec53 2b18 	vmov	r2, r3, d8
 800a530:	ec41 0b19 	vmov	d9, r0, r1
 800a534:	ec51 0b18 	vmov	r0, r1, d8
 800a538:	f7f6 f866 	bl	8000608 <__aeabi_dmul>
 800a53c:	a37c      	add	r3, pc, #496	; (adr r3, 800a730 <__ieee754_pow+0x708>)
 800a53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a542:	4604      	mov	r4, r0
 800a544:	460d      	mov	r5, r1
 800a546:	f7f6 f85f 	bl	8000608 <__aeabi_dmul>
 800a54a:	a37b      	add	r3, pc, #492	; (adr r3, 800a738 <__ieee754_pow+0x710>)
 800a54c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a550:	f7f5 fea4 	bl	800029c <__adddf3>
 800a554:	4622      	mov	r2, r4
 800a556:	462b      	mov	r3, r5
 800a558:	f7f6 f856 	bl	8000608 <__aeabi_dmul>
 800a55c:	a378      	add	r3, pc, #480	; (adr r3, 800a740 <__ieee754_pow+0x718>)
 800a55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a562:	f7f5 fe9b 	bl	800029c <__adddf3>
 800a566:	4622      	mov	r2, r4
 800a568:	462b      	mov	r3, r5
 800a56a:	f7f6 f84d 	bl	8000608 <__aeabi_dmul>
 800a56e:	a376      	add	r3, pc, #472	; (adr r3, 800a748 <__ieee754_pow+0x720>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f5 fe92 	bl	800029c <__adddf3>
 800a578:	4622      	mov	r2, r4
 800a57a:	462b      	mov	r3, r5
 800a57c:	f7f6 f844 	bl	8000608 <__aeabi_dmul>
 800a580:	a373      	add	r3, pc, #460	; (adr r3, 800a750 <__ieee754_pow+0x728>)
 800a582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a586:	f7f5 fe89 	bl	800029c <__adddf3>
 800a58a:	4622      	mov	r2, r4
 800a58c:	462b      	mov	r3, r5
 800a58e:	f7f6 f83b 	bl	8000608 <__aeabi_dmul>
 800a592:	a371      	add	r3, pc, #452	; (adr r3, 800a758 <__ieee754_pow+0x730>)
 800a594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a598:	f7f5 fe80 	bl	800029c <__adddf3>
 800a59c:	4622      	mov	r2, r4
 800a59e:	4606      	mov	r6, r0
 800a5a0:	460f      	mov	r7, r1
 800a5a2:	462b      	mov	r3, r5
 800a5a4:	4620      	mov	r0, r4
 800a5a6:	4629      	mov	r1, r5
 800a5a8:	f7f6 f82e 	bl	8000608 <__aeabi_dmul>
 800a5ac:	4602      	mov	r2, r0
 800a5ae:	460b      	mov	r3, r1
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	4639      	mov	r1, r7
 800a5b4:	f7f6 f828 	bl	8000608 <__aeabi_dmul>
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	460d      	mov	r5, r1
 800a5be:	464b      	mov	r3, r9
 800a5c0:	ec51 0b18 	vmov	r0, r1, d8
 800a5c4:	f7f5 fe6a 	bl	800029c <__adddf3>
 800a5c8:	ec53 2b19 	vmov	r2, r3, d9
 800a5cc:	f7f6 f81c 	bl	8000608 <__aeabi_dmul>
 800a5d0:	4622      	mov	r2, r4
 800a5d2:	462b      	mov	r3, r5
 800a5d4:	f7f5 fe62 	bl	800029c <__adddf3>
 800a5d8:	4642      	mov	r2, r8
 800a5da:	4682      	mov	sl, r0
 800a5dc:	468b      	mov	fp, r1
 800a5de:	464b      	mov	r3, r9
 800a5e0:	4640      	mov	r0, r8
 800a5e2:	4649      	mov	r1, r9
 800a5e4:	f7f6 f810 	bl	8000608 <__aeabi_dmul>
 800a5e8:	4b6b      	ldr	r3, [pc, #428]	; (800a798 <__ieee754_pow+0x770>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	460f      	mov	r7, r1
 800a5f0:	f7f5 fe54 	bl	800029c <__adddf3>
 800a5f4:	4652      	mov	r2, sl
 800a5f6:	465b      	mov	r3, fp
 800a5f8:	f7f5 fe50 	bl	800029c <__adddf3>
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	4604      	mov	r4, r0
 800a600:	460d      	mov	r5, r1
 800a602:	4602      	mov	r2, r0
 800a604:	460b      	mov	r3, r1
 800a606:	4640      	mov	r0, r8
 800a608:	4649      	mov	r1, r9
 800a60a:	f7f5 fffd 	bl	8000608 <__aeabi_dmul>
 800a60e:	4b62      	ldr	r3, [pc, #392]	; (800a798 <__ieee754_pow+0x770>)
 800a610:	4680      	mov	r8, r0
 800a612:	4689      	mov	r9, r1
 800a614:	2200      	movs	r2, #0
 800a616:	4620      	mov	r0, r4
 800a618:	4629      	mov	r1, r5
 800a61a:	f7f5 fe3d 	bl	8000298 <__aeabi_dsub>
 800a61e:	4632      	mov	r2, r6
 800a620:	463b      	mov	r3, r7
 800a622:	f7f5 fe39 	bl	8000298 <__aeabi_dsub>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4650      	mov	r0, sl
 800a62c:	4659      	mov	r1, fp
 800a62e:	f7f5 fe33 	bl	8000298 <__aeabi_dsub>
 800a632:	ec53 2b18 	vmov	r2, r3, d8
 800a636:	f7f5 ffe7 	bl	8000608 <__aeabi_dmul>
 800a63a:	4622      	mov	r2, r4
 800a63c:	4606      	mov	r6, r0
 800a63e:	460f      	mov	r7, r1
 800a640:	462b      	mov	r3, r5
 800a642:	ec51 0b19 	vmov	r0, r1, d9
 800a646:	f7f5 ffdf 	bl	8000608 <__aeabi_dmul>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4630      	mov	r0, r6
 800a650:	4639      	mov	r1, r7
 800a652:	f7f5 fe23 	bl	800029c <__adddf3>
 800a656:	4606      	mov	r6, r0
 800a658:	460f      	mov	r7, r1
 800a65a:	4602      	mov	r2, r0
 800a65c:	460b      	mov	r3, r1
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	f7f5 fe1b 	bl	800029c <__adddf3>
 800a666:	a33e      	add	r3, pc, #248	; (adr r3, 800a760 <__ieee754_pow+0x738>)
 800a668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66c:	2000      	movs	r0, #0
 800a66e:	4604      	mov	r4, r0
 800a670:	460d      	mov	r5, r1
 800a672:	f7f5 ffc9 	bl	8000608 <__aeabi_dmul>
 800a676:	4642      	mov	r2, r8
 800a678:	ec41 0b18 	vmov	d8, r0, r1
 800a67c:	464b      	mov	r3, r9
 800a67e:	4620      	mov	r0, r4
 800a680:	4629      	mov	r1, r5
 800a682:	f7f5 fe09 	bl	8000298 <__aeabi_dsub>
 800a686:	4602      	mov	r2, r0
 800a688:	460b      	mov	r3, r1
 800a68a:	4630      	mov	r0, r6
 800a68c:	4639      	mov	r1, r7
 800a68e:	f7f5 fe03 	bl	8000298 <__aeabi_dsub>
 800a692:	a335      	add	r3, pc, #212	; (adr r3, 800a768 <__ieee754_pow+0x740>)
 800a694:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a698:	f7f5 ffb6 	bl	8000608 <__aeabi_dmul>
 800a69c:	a334      	add	r3, pc, #208	; (adr r3, 800a770 <__ieee754_pow+0x748>)
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	4606      	mov	r6, r0
 800a6a4:	460f      	mov	r7, r1
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	4629      	mov	r1, r5
 800a6aa:	f7f5 ffad 	bl	8000608 <__aeabi_dmul>
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4630      	mov	r0, r6
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	f7f5 fdf1 	bl	800029c <__adddf3>
 800a6ba:	9a07      	ldr	r2, [sp, #28]
 800a6bc:	4b37      	ldr	r3, [pc, #220]	; (800a79c <__ieee754_pow+0x774>)
 800a6be:	4413      	add	r3, r2
 800a6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c4:	f7f5 fdea 	bl	800029c <__adddf3>
 800a6c8:	4682      	mov	sl, r0
 800a6ca:	9805      	ldr	r0, [sp, #20]
 800a6cc:	468b      	mov	fp, r1
 800a6ce:	f7f5 ff31 	bl	8000534 <__aeabi_i2d>
 800a6d2:	9a07      	ldr	r2, [sp, #28]
 800a6d4:	4b32      	ldr	r3, [pc, #200]	; (800a7a0 <__ieee754_pow+0x778>)
 800a6d6:	4413      	add	r3, r2
 800a6d8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6dc:	4606      	mov	r6, r0
 800a6de:	460f      	mov	r7, r1
 800a6e0:	4652      	mov	r2, sl
 800a6e2:	465b      	mov	r3, fp
 800a6e4:	ec51 0b18 	vmov	r0, r1, d8
 800a6e8:	f7f5 fdd8 	bl	800029c <__adddf3>
 800a6ec:	4642      	mov	r2, r8
 800a6ee:	464b      	mov	r3, r9
 800a6f0:	f7f5 fdd4 	bl	800029c <__adddf3>
 800a6f4:	4632      	mov	r2, r6
 800a6f6:	463b      	mov	r3, r7
 800a6f8:	f7f5 fdd0 	bl	800029c <__adddf3>
 800a6fc:	2000      	movs	r0, #0
 800a6fe:	4632      	mov	r2, r6
 800a700:	463b      	mov	r3, r7
 800a702:	4604      	mov	r4, r0
 800a704:	460d      	mov	r5, r1
 800a706:	f7f5 fdc7 	bl	8000298 <__aeabi_dsub>
 800a70a:	4642      	mov	r2, r8
 800a70c:	464b      	mov	r3, r9
 800a70e:	f7f5 fdc3 	bl	8000298 <__aeabi_dsub>
 800a712:	ec53 2b18 	vmov	r2, r3, d8
 800a716:	f7f5 fdbf 	bl	8000298 <__aeabi_dsub>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4650      	mov	r0, sl
 800a720:	4659      	mov	r1, fp
 800a722:	e610      	b.n	800a346 <__ieee754_pow+0x31e>
 800a724:	2401      	movs	r4, #1
 800a726:	e6a1      	b.n	800a46c <__ieee754_pow+0x444>
 800a728:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a778 <__ieee754_pow+0x750>
 800a72c:	e617      	b.n	800a35e <__ieee754_pow+0x336>
 800a72e:	bf00      	nop
 800a730:	4a454eef 	.word	0x4a454eef
 800a734:	3fca7e28 	.word	0x3fca7e28
 800a738:	93c9db65 	.word	0x93c9db65
 800a73c:	3fcd864a 	.word	0x3fcd864a
 800a740:	a91d4101 	.word	0xa91d4101
 800a744:	3fd17460 	.word	0x3fd17460
 800a748:	518f264d 	.word	0x518f264d
 800a74c:	3fd55555 	.word	0x3fd55555
 800a750:	db6fabff 	.word	0xdb6fabff
 800a754:	3fdb6db6 	.word	0x3fdb6db6
 800a758:	33333303 	.word	0x33333303
 800a75c:	3fe33333 	.word	0x3fe33333
 800a760:	e0000000 	.word	0xe0000000
 800a764:	3feec709 	.word	0x3feec709
 800a768:	dc3a03fd 	.word	0xdc3a03fd
 800a76c:	3feec709 	.word	0x3feec709
 800a770:	145b01f5 	.word	0x145b01f5
 800a774:	be3e2fe0 	.word	0xbe3e2fe0
 800a778:	00000000 	.word	0x00000000
 800a77c:	3ff00000 	.word	0x3ff00000
 800a780:	7ff00000 	.word	0x7ff00000
 800a784:	43400000 	.word	0x43400000
 800a788:	0003988e 	.word	0x0003988e
 800a78c:	000bb679 	.word	0x000bb679
 800a790:	0800b248 	.word	0x0800b248
 800a794:	3ff00000 	.word	0x3ff00000
 800a798:	40080000 	.word	0x40080000
 800a79c:	0800b268 	.word	0x0800b268
 800a7a0:	0800b258 	.word	0x0800b258
 800a7a4:	a3b3      	add	r3, pc, #716	; (adr r3, 800aa74 <__ieee754_pow+0xa4c>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	f7f5 fd75 	bl	800029c <__adddf3>
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	ec41 0b1a 	vmov	d10, r0, r1
 800a7b8:	462b      	mov	r3, r5
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	4639      	mov	r1, r7
 800a7be:	f7f5 fd6b 	bl	8000298 <__aeabi_dsub>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	ec51 0b1a 	vmov	r0, r1, d10
 800a7ca:	f7f6 f9ad 	bl	8000b28 <__aeabi_dcmpgt>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	f47f ae04 	bne.w	800a3dc <__ieee754_pow+0x3b4>
 800a7d4:	4aa2      	ldr	r2, [pc, #648]	; (800aa60 <__ieee754_pow+0xa38>)
 800a7d6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a7da:	4293      	cmp	r3, r2
 800a7dc:	f340 8107 	ble.w	800a9ee <__ieee754_pow+0x9c6>
 800a7e0:	151b      	asrs	r3, r3, #20
 800a7e2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800a7e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800a7ea:	fa4a fa03 	asr.w	sl, sl, r3
 800a7ee:	44da      	add	sl, fp
 800a7f0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800a7f4:	489b      	ldr	r0, [pc, #620]	; (800aa64 <__ieee754_pow+0xa3c>)
 800a7f6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800a7fa:	4108      	asrs	r0, r1
 800a7fc:	ea00 030a 	and.w	r3, r0, sl
 800a800:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800a804:	f1c1 0114 	rsb	r1, r1, #20
 800a808:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800a80c:	fa4a fa01 	asr.w	sl, sl, r1
 800a810:	f1bb 0f00 	cmp.w	fp, #0
 800a814:	f04f 0200 	mov.w	r2, #0
 800a818:	4620      	mov	r0, r4
 800a81a:	4629      	mov	r1, r5
 800a81c:	bfb8      	it	lt
 800a81e:	f1ca 0a00 	rsblt	sl, sl, #0
 800a822:	f7f5 fd39 	bl	8000298 <__aeabi_dsub>
 800a826:	ec41 0b19 	vmov	d9, r0, r1
 800a82a:	4642      	mov	r2, r8
 800a82c:	464b      	mov	r3, r9
 800a82e:	ec51 0b19 	vmov	r0, r1, d9
 800a832:	f7f5 fd33 	bl	800029c <__adddf3>
 800a836:	a37a      	add	r3, pc, #488	; (adr r3, 800aa20 <__ieee754_pow+0x9f8>)
 800a838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83c:	2000      	movs	r0, #0
 800a83e:	4604      	mov	r4, r0
 800a840:	460d      	mov	r5, r1
 800a842:	f7f5 fee1 	bl	8000608 <__aeabi_dmul>
 800a846:	ec53 2b19 	vmov	r2, r3, d9
 800a84a:	4606      	mov	r6, r0
 800a84c:	460f      	mov	r7, r1
 800a84e:	4620      	mov	r0, r4
 800a850:	4629      	mov	r1, r5
 800a852:	f7f5 fd21 	bl	8000298 <__aeabi_dsub>
 800a856:	4602      	mov	r2, r0
 800a858:	460b      	mov	r3, r1
 800a85a:	4640      	mov	r0, r8
 800a85c:	4649      	mov	r1, r9
 800a85e:	f7f5 fd1b 	bl	8000298 <__aeabi_dsub>
 800a862:	a371      	add	r3, pc, #452	; (adr r3, 800aa28 <__ieee754_pow+0xa00>)
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 fece 	bl	8000608 <__aeabi_dmul>
 800a86c:	a370      	add	r3, pc, #448	; (adr r3, 800aa30 <__ieee754_pow+0xa08>)
 800a86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a872:	4680      	mov	r8, r0
 800a874:	4689      	mov	r9, r1
 800a876:	4620      	mov	r0, r4
 800a878:	4629      	mov	r1, r5
 800a87a:	f7f5 fec5 	bl	8000608 <__aeabi_dmul>
 800a87e:	4602      	mov	r2, r0
 800a880:	460b      	mov	r3, r1
 800a882:	4640      	mov	r0, r8
 800a884:	4649      	mov	r1, r9
 800a886:	f7f5 fd09 	bl	800029c <__adddf3>
 800a88a:	4604      	mov	r4, r0
 800a88c:	460d      	mov	r5, r1
 800a88e:	4602      	mov	r2, r0
 800a890:	460b      	mov	r3, r1
 800a892:	4630      	mov	r0, r6
 800a894:	4639      	mov	r1, r7
 800a896:	f7f5 fd01 	bl	800029c <__adddf3>
 800a89a:	4632      	mov	r2, r6
 800a89c:	463b      	mov	r3, r7
 800a89e:	4680      	mov	r8, r0
 800a8a0:	4689      	mov	r9, r1
 800a8a2:	f7f5 fcf9 	bl	8000298 <__aeabi_dsub>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	460b      	mov	r3, r1
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	f7f5 fcf3 	bl	8000298 <__aeabi_dsub>
 800a8b2:	4642      	mov	r2, r8
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	460f      	mov	r7, r1
 800a8b8:	464b      	mov	r3, r9
 800a8ba:	4640      	mov	r0, r8
 800a8bc:	4649      	mov	r1, r9
 800a8be:	f7f5 fea3 	bl	8000608 <__aeabi_dmul>
 800a8c2:	a35d      	add	r3, pc, #372	; (adr r3, 800aa38 <__ieee754_pow+0xa10>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	460d      	mov	r5, r1
 800a8cc:	f7f5 fe9c 	bl	8000608 <__aeabi_dmul>
 800a8d0:	a35b      	add	r3, pc, #364	; (adr r3, 800aa40 <__ieee754_pow+0xa18>)
 800a8d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d6:	f7f5 fcdf 	bl	8000298 <__aeabi_dsub>
 800a8da:	4622      	mov	r2, r4
 800a8dc:	462b      	mov	r3, r5
 800a8de:	f7f5 fe93 	bl	8000608 <__aeabi_dmul>
 800a8e2:	a359      	add	r3, pc, #356	; (adr r3, 800aa48 <__ieee754_pow+0xa20>)
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	f7f5 fcd8 	bl	800029c <__adddf3>
 800a8ec:	4622      	mov	r2, r4
 800a8ee:	462b      	mov	r3, r5
 800a8f0:	f7f5 fe8a 	bl	8000608 <__aeabi_dmul>
 800a8f4:	a356      	add	r3, pc, #344	; (adr r3, 800aa50 <__ieee754_pow+0xa28>)
 800a8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fa:	f7f5 fccd 	bl	8000298 <__aeabi_dsub>
 800a8fe:	4622      	mov	r2, r4
 800a900:	462b      	mov	r3, r5
 800a902:	f7f5 fe81 	bl	8000608 <__aeabi_dmul>
 800a906:	a354      	add	r3, pc, #336	; (adr r3, 800aa58 <__ieee754_pow+0xa30>)
 800a908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90c:	f7f5 fcc6 	bl	800029c <__adddf3>
 800a910:	4622      	mov	r2, r4
 800a912:	462b      	mov	r3, r5
 800a914:	f7f5 fe78 	bl	8000608 <__aeabi_dmul>
 800a918:	4602      	mov	r2, r0
 800a91a:	460b      	mov	r3, r1
 800a91c:	4640      	mov	r0, r8
 800a91e:	4649      	mov	r1, r9
 800a920:	f7f5 fcba 	bl	8000298 <__aeabi_dsub>
 800a924:	4604      	mov	r4, r0
 800a926:	460d      	mov	r5, r1
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4640      	mov	r0, r8
 800a92e:	4649      	mov	r1, r9
 800a930:	f7f5 fe6a 	bl	8000608 <__aeabi_dmul>
 800a934:	2200      	movs	r2, #0
 800a936:	ec41 0b19 	vmov	d9, r0, r1
 800a93a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a93e:	4620      	mov	r0, r4
 800a940:	4629      	mov	r1, r5
 800a942:	f7f5 fca9 	bl	8000298 <__aeabi_dsub>
 800a946:	4602      	mov	r2, r0
 800a948:	460b      	mov	r3, r1
 800a94a:	ec51 0b19 	vmov	r0, r1, d9
 800a94e:	f7f5 ff85 	bl	800085c <__aeabi_ddiv>
 800a952:	4632      	mov	r2, r6
 800a954:	4604      	mov	r4, r0
 800a956:	460d      	mov	r5, r1
 800a958:	463b      	mov	r3, r7
 800a95a:	4640      	mov	r0, r8
 800a95c:	4649      	mov	r1, r9
 800a95e:	f7f5 fe53 	bl	8000608 <__aeabi_dmul>
 800a962:	4632      	mov	r2, r6
 800a964:	463b      	mov	r3, r7
 800a966:	f7f5 fc99 	bl	800029c <__adddf3>
 800a96a:	4602      	mov	r2, r0
 800a96c:	460b      	mov	r3, r1
 800a96e:	4620      	mov	r0, r4
 800a970:	4629      	mov	r1, r5
 800a972:	f7f5 fc91 	bl	8000298 <__aeabi_dsub>
 800a976:	4642      	mov	r2, r8
 800a978:	464b      	mov	r3, r9
 800a97a:	f7f5 fc8d 	bl	8000298 <__aeabi_dsub>
 800a97e:	460b      	mov	r3, r1
 800a980:	4602      	mov	r2, r0
 800a982:	4939      	ldr	r1, [pc, #228]	; (800aa68 <__ieee754_pow+0xa40>)
 800a984:	2000      	movs	r0, #0
 800a986:	f7f5 fc87 	bl	8000298 <__aeabi_dsub>
 800a98a:	ec41 0b10 	vmov	d0, r0, r1
 800a98e:	ee10 3a90 	vmov	r3, s1
 800a992:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800a996:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a99a:	da2b      	bge.n	800a9f4 <__ieee754_pow+0x9cc>
 800a99c:	4650      	mov	r0, sl
 800a99e:	f000 f877 	bl	800aa90 <scalbn>
 800a9a2:	ec51 0b10 	vmov	r0, r1, d0
 800a9a6:	ec53 2b18 	vmov	r2, r3, d8
 800a9aa:	f7ff bbee 	b.w	800a18a <__ieee754_pow+0x162>
 800a9ae:	4b2f      	ldr	r3, [pc, #188]	; (800aa6c <__ieee754_pow+0xa44>)
 800a9b0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a9b4:	429e      	cmp	r6, r3
 800a9b6:	f77f af0d 	ble.w	800a7d4 <__ieee754_pow+0x7ac>
 800a9ba:	4b2d      	ldr	r3, [pc, #180]	; (800aa70 <__ieee754_pow+0xa48>)
 800a9bc:	440b      	add	r3, r1
 800a9be:	4303      	orrs	r3, r0
 800a9c0:	d009      	beq.n	800a9d6 <__ieee754_pow+0x9ae>
 800a9c2:	ec51 0b18 	vmov	r0, r1, d8
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	f7f6 f88f 	bl	8000aec <__aeabi_dcmplt>
 800a9ce:	3800      	subs	r0, #0
 800a9d0:	bf18      	it	ne
 800a9d2:	2001      	movne	r0, #1
 800a9d4:	e448      	b.n	800a268 <__ieee754_pow+0x240>
 800a9d6:	4622      	mov	r2, r4
 800a9d8:	462b      	mov	r3, r5
 800a9da:	f7f5 fc5d 	bl	8000298 <__aeabi_dsub>
 800a9de:	4642      	mov	r2, r8
 800a9e0:	464b      	mov	r3, r9
 800a9e2:	f7f6 f897 	bl	8000b14 <__aeabi_dcmpge>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f43f aef4 	beq.w	800a7d4 <__ieee754_pow+0x7ac>
 800a9ec:	e7e9      	b.n	800a9c2 <__ieee754_pow+0x99a>
 800a9ee:	f04f 0a00 	mov.w	sl, #0
 800a9f2:	e71a      	b.n	800a82a <__ieee754_pow+0x802>
 800a9f4:	ec51 0b10 	vmov	r0, r1, d0
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	e7d4      	b.n	800a9a6 <__ieee754_pow+0x97e>
 800a9fc:	491a      	ldr	r1, [pc, #104]	; (800aa68 <__ieee754_pow+0xa40>)
 800a9fe:	2000      	movs	r0, #0
 800aa00:	f7ff bb31 	b.w	800a066 <__ieee754_pow+0x3e>
 800aa04:	2000      	movs	r0, #0
 800aa06:	2100      	movs	r1, #0
 800aa08:	f7ff bb2d 	b.w	800a066 <__ieee754_pow+0x3e>
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	4639      	mov	r1, r7
 800aa10:	f7ff bb29 	b.w	800a066 <__ieee754_pow+0x3e>
 800aa14:	9204      	str	r2, [sp, #16]
 800aa16:	f7ff bb7b 	b.w	800a110 <__ieee754_pow+0xe8>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f7ff bb65 	b.w	800a0ea <__ieee754_pow+0xc2>
 800aa20:	00000000 	.word	0x00000000
 800aa24:	3fe62e43 	.word	0x3fe62e43
 800aa28:	fefa39ef 	.word	0xfefa39ef
 800aa2c:	3fe62e42 	.word	0x3fe62e42
 800aa30:	0ca86c39 	.word	0x0ca86c39
 800aa34:	be205c61 	.word	0xbe205c61
 800aa38:	72bea4d0 	.word	0x72bea4d0
 800aa3c:	3e663769 	.word	0x3e663769
 800aa40:	c5d26bf1 	.word	0xc5d26bf1
 800aa44:	3ebbbd41 	.word	0x3ebbbd41
 800aa48:	af25de2c 	.word	0xaf25de2c
 800aa4c:	3f11566a 	.word	0x3f11566a
 800aa50:	16bebd93 	.word	0x16bebd93
 800aa54:	3f66c16c 	.word	0x3f66c16c
 800aa58:	5555553e 	.word	0x5555553e
 800aa5c:	3fc55555 	.word	0x3fc55555
 800aa60:	3fe00000 	.word	0x3fe00000
 800aa64:	fff00000 	.word	0xfff00000
 800aa68:	3ff00000 	.word	0x3ff00000
 800aa6c:	4090cbff 	.word	0x4090cbff
 800aa70:	3f6f3400 	.word	0x3f6f3400
 800aa74:	652b82fe 	.word	0x652b82fe
 800aa78:	3c971547 	.word	0x3c971547

0800aa7c <fabs>:
 800aa7c:	ec51 0b10 	vmov	r0, r1, d0
 800aa80:	ee10 2a10 	vmov	r2, s0
 800aa84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aa88:	ec43 2b10 	vmov	d0, r2, r3
 800aa8c:	4770      	bx	lr
	...

0800aa90 <scalbn>:
 800aa90:	b570      	push	{r4, r5, r6, lr}
 800aa92:	ec55 4b10 	vmov	r4, r5, d0
 800aa96:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800aa9a:	4606      	mov	r6, r0
 800aa9c:	462b      	mov	r3, r5
 800aa9e:	b999      	cbnz	r1, 800aac8 <scalbn+0x38>
 800aaa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aaa4:	4323      	orrs	r3, r4
 800aaa6:	d03f      	beq.n	800ab28 <scalbn+0x98>
 800aaa8:	4b35      	ldr	r3, [pc, #212]	; (800ab80 <scalbn+0xf0>)
 800aaaa:	4629      	mov	r1, r5
 800aaac:	ee10 0a10 	vmov	r0, s0
 800aab0:	2200      	movs	r2, #0
 800aab2:	f7f5 fda9 	bl	8000608 <__aeabi_dmul>
 800aab6:	4b33      	ldr	r3, [pc, #204]	; (800ab84 <scalbn+0xf4>)
 800aab8:	429e      	cmp	r6, r3
 800aaba:	4604      	mov	r4, r0
 800aabc:	460d      	mov	r5, r1
 800aabe:	da10      	bge.n	800aae2 <scalbn+0x52>
 800aac0:	a327      	add	r3, pc, #156	; (adr r3, 800ab60 <scalbn+0xd0>)
 800aac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac6:	e01f      	b.n	800ab08 <scalbn+0x78>
 800aac8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800aacc:	4291      	cmp	r1, r2
 800aace:	d10c      	bne.n	800aaea <scalbn+0x5a>
 800aad0:	ee10 2a10 	vmov	r2, s0
 800aad4:	4620      	mov	r0, r4
 800aad6:	4629      	mov	r1, r5
 800aad8:	f7f5 fbe0 	bl	800029c <__adddf3>
 800aadc:	4604      	mov	r4, r0
 800aade:	460d      	mov	r5, r1
 800aae0:	e022      	b.n	800ab28 <scalbn+0x98>
 800aae2:	460b      	mov	r3, r1
 800aae4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800aae8:	3936      	subs	r1, #54	; 0x36
 800aaea:	f24c 3250 	movw	r2, #50000	; 0xc350
 800aaee:	4296      	cmp	r6, r2
 800aaf0:	dd0d      	ble.n	800ab0e <scalbn+0x7e>
 800aaf2:	2d00      	cmp	r5, #0
 800aaf4:	a11c      	add	r1, pc, #112	; (adr r1, 800ab68 <scalbn+0xd8>)
 800aaf6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800aafa:	da02      	bge.n	800ab02 <scalbn+0x72>
 800aafc:	a11c      	add	r1, pc, #112	; (adr r1, 800ab70 <scalbn+0xe0>)
 800aafe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab02:	a319      	add	r3, pc, #100	; (adr r3, 800ab68 <scalbn+0xd8>)
 800ab04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab08:	f7f5 fd7e 	bl	8000608 <__aeabi_dmul>
 800ab0c:	e7e6      	b.n	800aadc <scalbn+0x4c>
 800ab0e:	1872      	adds	r2, r6, r1
 800ab10:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ab14:	428a      	cmp	r2, r1
 800ab16:	dcec      	bgt.n	800aaf2 <scalbn+0x62>
 800ab18:	2a00      	cmp	r2, #0
 800ab1a:	dd08      	ble.n	800ab2e <scalbn+0x9e>
 800ab1c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab20:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab24:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ab28:	ec45 4b10 	vmov	d0, r4, r5
 800ab2c:	bd70      	pop	{r4, r5, r6, pc}
 800ab2e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ab32:	da08      	bge.n	800ab46 <scalbn+0xb6>
 800ab34:	2d00      	cmp	r5, #0
 800ab36:	a10a      	add	r1, pc, #40	; (adr r1, 800ab60 <scalbn+0xd0>)
 800ab38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab3c:	dac0      	bge.n	800aac0 <scalbn+0x30>
 800ab3e:	a10e      	add	r1, pc, #56	; (adr r1, 800ab78 <scalbn+0xe8>)
 800ab40:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab44:	e7bc      	b.n	800aac0 <scalbn+0x30>
 800ab46:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ab4a:	3236      	adds	r2, #54	; 0x36
 800ab4c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ab50:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ab54:	4620      	mov	r0, r4
 800ab56:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <scalbn+0xf8>)
 800ab58:	2200      	movs	r2, #0
 800ab5a:	e7d5      	b.n	800ab08 <scalbn+0x78>
 800ab5c:	f3af 8000 	nop.w
 800ab60:	c2f8f359 	.word	0xc2f8f359
 800ab64:	01a56e1f 	.word	0x01a56e1f
 800ab68:	8800759c 	.word	0x8800759c
 800ab6c:	7e37e43c 	.word	0x7e37e43c
 800ab70:	8800759c 	.word	0x8800759c
 800ab74:	fe37e43c 	.word	0xfe37e43c
 800ab78:	c2f8f359 	.word	0xc2f8f359
 800ab7c:	81a56e1f 	.word	0x81a56e1f
 800ab80:	43500000 	.word	0x43500000
 800ab84:	ffff3cb0 	.word	0xffff3cb0
 800ab88:	3c900000 	.word	0x3c900000

0800ab8c <with_errno>:
 800ab8c:	b570      	push	{r4, r5, r6, lr}
 800ab8e:	4604      	mov	r4, r0
 800ab90:	460d      	mov	r5, r1
 800ab92:	4616      	mov	r6, r2
 800ab94:	f7fd f926 	bl	8007de4 <__errno>
 800ab98:	4629      	mov	r1, r5
 800ab9a:	6006      	str	r6, [r0, #0]
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}

0800aba0 <xflow>:
 800aba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aba2:	4614      	mov	r4, r2
 800aba4:	461d      	mov	r5, r3
 800aba6:	b108      	cbz	r0, 800abac <xflow+0xc>
 800aba8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800abac:	e9cd 2300 	strd	r2, r3, [sp]
 800abb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abb4:	4620      	mov	r0, r4
 800abb6:	4629      	mov	r1, r5
 800abb8:	f7f5 fd26 	bl	8000608 <__aeabi_dmul>
 800abbc:	2222      	movs	r2, #34	; 0x22
 800abbe:	b003      	add	sp, #12
 800abc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abc4:	f7ff bfe2 	b.w	800ab8c <with_errno>

0800abc8 <__math_uflow>:
 800abc8:	b508      	push	{r3, lr}
 800abca:	2200      	movs	r2, #0
 800abcc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800abd0:	f7ff ffe6 	bl	800aba0 <xflow>
 800abd4:	ec41 0b10 	vmov	d0, r0, r1
 800abd8:	bd08      	pop	{r3, pc}

0800abda <__math_oflow>:
 800abda:	b508      	push	{r3, lr}
 800abdc:	2200      	movs	r2, #0
 800abde:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800abe2:	f7ff ffdd 	bl	800aba0 <xflow>
 800abe6:	ec41 0b10 	vmov	d0, r0, r1
 800abea:	bd08      	pop	{r3, pc}

0800abec <__ieee754_sqrt>:
 800abec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abf0:	ec55 4b10 	vmov	r4, r5, d0
 800abf4:	4e67      	ldr	r6, [pc, #412]	; (800ad94 <__ieee754_sqrt+0x1a8>)
 800abf6:	43ae      	bics	r6, r5
 800abf8:	ee10 0a10 	vmov	r0, s0
 800abfc:	ee10 2a10 	vmov	r2, s0
 800ac00:	4629      	mov	r1, r5
 800ac02:	462b      	mov	r3, r5
 800ac04:	d10d      	bne.n	800ac22 <__ieee754_sqrt+0x36>
 800ac06:	f7f5 fcff 	bl	8000608 <__aeabi_dmul>
 800ac0a:	4602      	mov	r2, r0
 800ac0c:	460b      	mov	r3, r1
 800ac0e:	4620      	mov	r0, r4
 800ac10:	4629      	mov	r1, r5
 800ac12:	f7f5 fb43 	bl	800029c <__adddf3>
 800ac16:	4604      	mov	r4, r0
 800ac18:	460d      	mov	r5, r1
 800ac1a:	ec45 4b10 	vmov	d0, r4, r5
 800ac1e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac22:	2d00      	cmp	r5, #0
 800ac24:	dc0b      	bgt.n	800ac3e <__ieee754_sqrt+0x52>
 800ac26:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ac2a:	4326      	orrs	r6, r4
 800ac2c:	d0f5      	beq.n	800ac1a <__ieee754_sqrt+0x2e>
 800ac2e:	b135      	cbz	r5, 800ac3e <__ieee754_sqrt+0x52>
 800ac30:	f7f5 fb32 	bl	8000298 <__aeabi_dsub>
 800ac34:	4602      	mov	r2, r0
 800ac36:	460b      	mov	r3, r1
 800ac38:	f7f5 fe10 	bl	800085c <__aeabi_ddiv>
 800ac3c:	e7eb      	b.n	800ac16 <__ieee754_sqrt+0x2a>
 800ac3e:	1509      	asrs	r1, r1, #20
 800ac40:	f000 808d 	beq.w	800ad5e <__ieee754_sqrt+0x172>
 800ac44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ac48:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800ac4c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ac50:	07c9      	lsls	r1, r1, #31
 800ac52:	bf5c      	itt	pl
 800ac54:	005b      	lslpl	r3, r3, #1
 800ac56:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800ac5a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ac5e:	bf58      	it	pl
 800ac60:	0052      	lslpl	r2, r2, #1
 800ac62:	2500      	movs	r5, #0
 800ac64:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ac68:	1076      	asrs	r6, r6, #1
 800ac6a:	0052      	lsls	r2, r2, #1
 800ac6c:	f04f 0e16 	mov.w	lr, #22
 800ac70:	46ac      	mov	ip, r5
 800ac72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ac76:	eb0c 0001 	add.w	r0, ip, r1
 800ac7a:	4298      	cmp	r0, r3
 800ac7c:	bfde      	ittt	le
 800ac7e:	1a1b      	suble	r3, r3, r0
 800ac80:	eb00 0c01 	addle.w	ip, r0, r1
 800ac84:	186d      	addle	r5, r5, r1
 800ac86:	005b      	lsls	r3, r3, #1
 800ac88:	f1be 0e01 	subs.w	lr, lr, #1
 800ac8c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800ac90:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ac94:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ac98:	d1ed      	bne.n	800ac76 <__ieee754_sqrt+0x8a>
 800ac9a:	4674      	mov	r4, lr
 800ac9c:	2720      	movs	r7, #32
 800ac9e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800aca2:	4563      	cmp	r3, ip
 800aca4:	eb01 000e 	add.w	r0, r1, lr
 800aca8:	dc02      	bgt.n	800acb0 <__ieee754_sqrt+0xc4>
 800acaa:	d113      	bne.n	800acd4 <__ieee754_sqrt+0xe8>
 800acac:	4290      	cmp	r0, r2
 800acae:	d811      	bhi.n	800acd4 <__ieee754_sqrt+0xe8>
 800acb0:	2800      	cmp	r0, #0
 800acb2:	eb00 0e01 	add.w	lr, r0, r1
 800acb6:	da57      	bge.n	800ad68 <__ieee754_sqrt+0x17c>
 800acb8:	f1be 0f00 	cmp.w	lr, #0
 800acbc:	db54      	blt.n	800ad68 <__ieee754_sqrt+0x17c>
 800acbe:	f10c 0801 	add.w	r8, ip, #1
 800acc2:	eba3 030c 	sub.w	r3, r3, ip
 800acc6:	4290      	cmp	r0, r2
 800acc8:	bf88      	it	hi
 800acca:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800acce:	1a12      	subs	r2, r2, r0
 800acd0:	440c      	add	r4, r1
 800acd2:	46c4      	mov	ip, r8
 800acd4:	005b      	lsls	r3, r3, #1
 800acd6:	3f01      	subs	r7, #1
 800acd8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800acdc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ace0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800ace4:	d1dd      	bne.n	800aca2 <__ieee754_sqrt+0xb6>
 800ace6:	4313      	orrs	r3, r2
 800ace8:	d01b      	beq.n	800ad22 <__ieee754_sqrt+0x136>
 800acea:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800ad98 <__ieee754_sqrt+0x1ac>
 800acee:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800ad9c <__ieee754_sqrt+0x1b0>
 800acf2:	e9da 0100 	ldrd	r0, r1, [sl]
 800acf6:	e9db 2300 	ldrd	r2, r3, [fp]
 800acfa:	f7f5 facd 	bl	8000298 <__aeabi_dsub>
 800acfe:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad02:	4602      	mov	r2, r0
 800ad04:	460b      	mov	r3, r1
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 fef9 	bl	8000b00 <__aeabi_dcmple>
 800ad0e:	b140      	cbz	r0, 800ad22 <__ieee754_sqrt+0x136>
 800ad10:	f1b4 3fff 	cmp.w	r4, #4294967295
 800ad14:	e9da 0100 	ldrd	r0, r1, [sl]
 800ad18:	e9db 2300 	ldrd	r2, r3, [fp]
 800ad1c:	d126      	bne.n	800ad6c <__ieee754_sqrt+0x180>
 800ad1e:	3501      	adds	r5, #1
 800ad20:	463c      	mov	r4, r7
 800ad22:	106a      	asrs	r2, r5, #1
 800ad24:	0863      	lsrs	r3, r4, #1
 800ad26:	07e9      	lsls	r1, r5, #31
 800ad28:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800ad2c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800ad30:	bf48      	it	mi
 800ad32:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800ad36:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800ad3a:	461c      	mov	r4, r3
 800ad3c:	e76d      	b.n	800ac1a <__ieee754_sqrt+0x2e>
 800ad3e:	0ad3      	lsrs	r3, r2, #11
 800ad40:	3815      	subs	r0, #21
 800ad42:	0552      	lsls	r2, r2, #21
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d0fa      	beq.n	800ad3e <__ieee754_sqrt+0x152>
 800ad48:	02dc      	lsls	r4, r3, #11
 800ad4a:	d50a      	bpl.n	800ad62 <__ieee754_sqrt+0x176>
 800ad4c:	f1c1 0420 	rsb	r4, r1, #32
 800ad50:	fa22 f404 	lsr.w	r4, r2, r4
 800ad54:	1e4d      	subs	r5, r1, #1
 800ad56:	408a      	lsls	r2, r1
 800ad58:	4323      	orrs	r3, r4
 800ad5a:	1b41      	subs	r1, r0, r5
 800ad5c:	e772      	b.n	800ac44 <__ieee754_sqrt+0x58>
 800ad5e:	4608      	mov	r0, r1
 800ad60:	e7f0      	b.n	800ad44 <__ieee754_sqrt+0x158>
 800ad62:	005b      	lsls	r3, r3, #1
 800ad64:	3101      	adds	r1, #1
 800ad66:	e7ef      	b.n	800ad48 <__ieee754_sqrt+0x15c>
 800ad68:	46e0      	mov	r8, ip
 800ad6a:	e7aa      	b.n	800acc2 <__ieee754_sqrt+0xd6>
 800ad6c:	f7f5 fa96 	bl	800029c <__adddf3>
 800ad70:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad74:	4602      	mov	r2, r0
 800ad76:	460b      	mov	r3, r1
 800ad78:	4640      	mov	r0, r8
 800ad7a:	4649      	mov	r1, r9
 800ad7c:	f7f5 feb6 	bl	8000aec <__aeabi_dcmplt>
 800ad80:	b120      	cbz	r0, 800ad8c <__ieee754_sqrt+0x1a0>
 800ad82:	1ca0      	adds	r0, r4, #2
 800ad84:	bf08      	it	eq
 800ad86:	3501      	addeq	r5, #1
 800ad88:	3402      	adds	r4, #2
 800ad8a:	e7ca      	b.n	800ad22 <__ieee754_sqrt+0x136>
 800ad8c:	3401      	adds	r4, #1
 800ad8e:	f024 0401 	bic.w	r4, r4, #1
 800ad92:	e7c6      	b.n	800ad22 <__ieee754_sqrt+0x136>
 800ad94:	7ff00000 	.word	0x7ff00000
 800ad98:	20000250 	.word	0x20000250
 800ad9c:	20000258 	.word	0x20000258

0800ada0 <_init>:
 800ada0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ada2:	bf00      	nop
 800ada4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ada6:	bc08      	pop	{r3}
 800ada8:	469e      	mov	lr, r3
 800adaa:	4770      	bx	lr

0800adac <_fini>:
 800adac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adae:	bf00      	nop
 800adb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adb2:	bc08      	pop	{r3}
 800adb4:	469e      	mov	lr, r3
 800adb6:	4770      	bx	lr
